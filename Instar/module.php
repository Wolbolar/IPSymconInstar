<?php

declare(strict_types=1);

if (@constant('IPS_BASE') == null) //Nur wenn Konstanten noch nicht bekannt sind.
{
    // --- BASE MESSAGE
    define('IPS_BASE', 10000);                             //Base Message
    define('IPS_KERNELSHUTDOWN', IPS_BASE + 1);            //Pre Shutdown Message, Runlevel UNINIT Follows
    define('IPS_KERNELSTARTED', IPS_BASE + 2);             //Post Ready Message
    // --- KERNEL
    define('IPS_KERNELMESSAGE', IPS_BASE + 100);           //Kernel Message
    define('KR_CREATE', IPS_KERNELMESSAGE + 1);            //Kernel is beeing created
    define('KR_INIT', IPS_KERNELMESSAGE + 2);              //Kernel Components are beeing initialised, Modules loaded, Settings read
    define('KR_READY', IPS_KERNELMESSAGE + 3);             //Kernel is ready and running
    define('KR_UNINIT', IPS_KERNELMESSAGE + 4);            //Got Shutdown Message, unloading all stuff
    define('KR_SHUTDOWN', IPS_KERNELMESSAGE + 5);          //Uninit Complete, Destroying Kernel Inteface
    // --- KERNEL LOGMESSAGE
    define('IPS_LOGMESSAGE', IPS_BASE + 200);              //Logmessage Message
    define('KL_MESSAGE', IPS_LOGMESSAGE + 1);              //Normal Message                      | FG: Black | BG: White  | STLYE : NONE
    define('KL_SUCCESS', IPS_LOGMESSAGE + 2);              //Success Message                     | FG: Black | BG: Green  | STYLE : NONE
    define('KL_NOTIFY', IPS_LOGMESSAGE + 3);               //Notiy about Changes                 | FG: Black | BG: Blue   | STLYE : NONE
    define('KL_WARNING', IPS_LOGMESSAGE + 4);              //Warnings                            | FG: Black | BG: Yellow | STLYE : NONE
    define('KL_ERROR', IPS_LOGMESSAGE + 5);                //Error Message                       | FG: Black | BG: Red    | STLYE : BOLD
    define('KL_DEBUG', IPS_LOGMESSAGE + 6);                //Debug Informations + Script Results | FG: Grey  | BG: White  | STLYE : NONE
    define('KL_CUSTOM', IPS_LOGMESSAGE + 7);               //User Message                        | FG: Black | BG: White  | STLYE : NONE
    // --- MODULE LOADER
    define('IPS_MODULEMESSAGE', IPS_BASE + 300);           //ModuleLoader Message
    define('ML_LOAD', IPS_MODULEMESSAGE + 1);              //Module loaded
    define('ML_UNLOAD', IPS_MODULEMESSAGE + 2);            //Module unloaded
    // --- OBJECT MANAGER
    define('IPS_OBJECTMESSAGE', IPS_BASE + 400);
    define('OM_REGISTER', IPS_OBJECTMESSAGE + 1);          //Object was registered
    define('OM_UNREGISTER', IPS_OBJECTMESSAGE + 2);        //Object was unregistered
    define('OM_CHANGEPARENT', IPS_OBJECTMESSAGE + 3);      //Parent was Changed
    define('OM_CHANGENAME', IPS_OBJECTMESSAGE + 4);        //Name was Changed
    define('OM_CHANGEINFO', IPS_OBJECTMESSAGE + 5);        //Info was Changed
    define('OM_CHANGETYPE', IPS_OBJECTMESSAGE + 6);        //Type was Changed
    define('OM_CHANGESUMMARY', IPS_OBJECTMESSAGE + 7);     //Summary was Changed
    define('OM_CHANGEPOSITION', IPS_OBJECTMESSAGE + 8);    //Position was Changed
    define('OM_CHANGEREADONLY', IPS_OBJECTMESSAGE + 9);    //ReadOnly was Changed
    define('OM_CHANGEHIDDEN', IPS_OBJECTMESSAGE + 10);     //Hidden was Changed
    define('OM_CHANGEICON', IPS_OBJECTMESSAGE + 11);       //Icon was Changed
    define('OM_CHILDADDED', IPS_OBJECTMESSAGE + 12);       //Child for Object was added
    define('OM_CHILDREMOVED', IPS_OBJECTMESSAGE + 13);     //Child for Object was removed
    define('OM_CHANGEIDENT', IPS_OBJECTMESSAGE + 14);      //Ident was Changed
    define('OM_CHANGEDISABLED', IPS_OBJECTMESSAGE + 15);   //Operability has changed
    // --- INSTANCE MANAGER
    define('IPS_INSTANCEMESSAGE', IPS_BASE + 500);         //Instance Manager Message
    define('IM_CREATE', IPS_INSTANCEMESSAGE + 1);          //Instance created
    define('IM_DELETE', IPS_INSTANCEMESSAGE + 2);          //Instance deleted
    define('IM_CONNECT', IPS_INSTANCEMESSAGE + 3);         //Instance connectged
    define('IM_DISCONNECT', IPS_INSTANCEMESSAGE + 4);      //Instance disconncted
    define('IM_CHANGESTATUS', IPS_INSTANCEMESSAGE + 5);    //Status was Changed
    define('IM_CHANGESETTINGS', IPS_INSTANCEMESSAGE + 6);  //Settings were Changed
    define('IM_CHANGESEARCH', IPS_INSTANCEMESSAGE + 7);    //Searching was started/stopped
    define('IM_SEARCHUPDATE', IPS_INSTANCEMESSAGE + 8);    //Searching found new results
    define('IM_SEARCHPROGRESS', IPS_INSTANCEMESSAGE + 9);  //Searching progress in %
    define('IM_SEARCHCOMPLETE', IPS_INSTANCEMESSAGE + 10); //Searching is complete
    // --- VARIABLE MANAGER
    define('IPS_VARIABLEMESSAGE', IPS_BASE + 600);              //Variable Manager Message
    define('VM_CREATE', IPS_VARIABLEMESSAGE + 1);               //Variable Created
    define('VM_DELETE', IPS_VARIABLEMESSAGE + 2);               //Variable Deleted
    define('VM_UPDATE', IPS_VARIABLEMESSAGE + 3);               //On Variable Update
    define('VM_CHANGEPROFILENAME', IPS_VARIABLEMESSAGE + 4);    //On Profile Name Change
    define('VM_CHANGEPROFILEACTION', IPS_VARIABLEMESSAGE + 5);  //On Profile Action Change
    // --- SCRIPT MANAGER
    define('IPS_SCRIPTMESSAGE', IPS_BASE + 700);           //Script Manager Message
    define('SM_CREATE', IPS_SCRIPTMESSAGE + 1);            //On Script Create
    define('SM_DELETE', IPS_SCRIPTMESSAGE + 2);            //On Script Delete
    define('SM_CHANGEFILE', IPS_SCRIPTMESSAGE + 3);        //On Script File changed
    define('SM_BROKEN', IPS_SCRIPTMESSAGE + 4);            //Script Broken Status changed
    // --- EVENT MANAGER
    define('IPS_EVENTMESSAGE', IPS_BASE + 800);             //Event Scripter Message
    define('EM_CREATE', IPS_EVENTMESSAGE + 1);             //On Event Create
    define('EM_DELETE', IPS_EVENTMESSAGE + 2);             //On Event Delete
    define('EM_UPDATE', IPS_EVENTMESSAGE + 3);
    define('EM_CHANGEACTIVE', IPS_EVENTMESSAGE + 4);
    define('EM_CHANGELIMIT', IPS_EVENTMESSAGE + 5);
    define('EM_CHANGESCRIPT', IPS_EVENTMESSAGE + 6);
    define('EM_CHANGETRIGGER', IPS_EVENTMESSAGE + 7);
    define('EM_CHANGETRIGGERVALUE', IPS_EVENTMESSAGE + 8);
    define('EM_CHANGETRIGGEREXECUTION', IPS_EVENTMESSAGE + 9);
    define('EM_CHANGECYCLIC', IPS_EVENTMESSAGE + 10);
    define('EM_CHANGECYCLICDATEFROM', IPS_EVENTMESSAGE + 11);
    define('EM_CHANGECYCLICDATETO', IPS_EVENTMESSAGE + 12);
    define('EM_CHANGECYCLICTIMEFROM', IPS_EVENTMESSAGE + 13);
    define('EM_CHANGECYCLICTIMETO', IPS_EVENTMESSAGE + 14);
    // --- MEDIA MANAGER
    define('IPS_MEDIAMESSAGE', IPS_BASE + 900);           //Media Manager Message
    define('MM_CREATE', IPS_MEDIAMESSAGE + 1);             //On Media Create
    define('MM_DELETE', IPS_MEDIAMESSAGE + 2);             //On Media Delete
    define('MM_CHANGEFILE', IPS_MEDIAMESSAGE + 3);         //On Media File changed
    define('MM_AVAILABLE', IPS_MEDIAMESSAGE + 4);          //Media Available Status changed
    define('MM_UPDATE', IPS_MEDIAMESSAGE + 5);
    // --- LINK MANAGER
    define('IPS_LINKMESSAGE', IPS_BASE + 1000);           //Link Manager Message
    define('LM_CREATE', IPS_LINKMESSAGE + 1);             //On Link Create
    define('LM_DELETE', IPS_LINKMESSAGE + 2);             //On Link Delete
    define('LM_CHANGETARGET', IPS_LINKMESSAGE + 3);       //On Link TargetID change
    // --- DATA HANDLER
    define('IPS_DATAMESSAGE', IPS_BASE + 1100);             //Data Handler Message
    define('FM_CONNECT', IPS_DATAMESSAGE + 1);             //On Instance Connect
    define('FM_DISCONNECT', IPS_DATAMESSAGE + 2);          //On Instance Disconnect
    // --- SCRIPT ENGINE
    define('IPS_ENGINEMESSAGE', IPS_BASE + 1200);           //Script Engine Message
    define('SE_UPDATE', IPS_ENGINEMESSAGE + 1);             //On Library Refresh
    define('SE_EXECUTE', IPS_ENGINEMESSAGE + 2);            //On Script Finished execution
    define('SE_RUNNING', IPS_ENGINEMESSAGE + 3);            //On Script Started execution
    // --- PROFILE POOL
    define('IPS_PROFILEMESSAGE', IPS_BASE + 1300);
    define('PM_CREATE', IPS_PROFILEMESSAGE + 1);
    define('PM_DELETE', IPS_PROFILEMESSAGE + 2);
    define('PM_CHANGETEXT', IPS_PROFILEMESSAGE + 3);
    define('PM_CHANGEVALUES', IPS_PROFILEMESSAGE + 4);
    define('PM_CHANGEDIGITS', IPS_PROFILEMESSAGE + 5);
    define('PM_CHANGEICON', IPS_PROFILEMESSAGE + 6);
    define('PM_ASSOCIATIONADDED', IPS_PROFILEMESSAGE + 7);
    define('PM_ASSOCIATIONREMOVED', IPS_PROFILEMESSAGE + 8);
    define('PM_ASSOCIATIONCHANGED', IPS_PROFILEMESSAGE + 9);
    // --- TIMER POOL
    define('IPS_TIMERMESSAGE', IPS_BASE + 1400);            //Timer Pool Message
    define('TM_REGISTER', IPS_TIMERMESSAGE + 1);
    define('TM_UNREGISTER', IPS_TIMERMESSAGE + 2);
    define('TM_SETINTERVAL', IPS_TIMERMESSAGE + 3);
    define('TM_UPDATE', IPS_TIMERMESSAGE + 4);
    define('TM_RUNNING', IPS_TIMERMESSAGE + 5);
    // --- STATUS CODES
    define('IS_SBASE', 100);
    define('IS_CREATING', IS_SBASE + 1); //module is being created
    define('IS_ACTIVE', IS_SBASE + 2); //module created and running
    define('IS_DELETING', IS_SBASE + 3); //module us being deleted
    define('IS_INACTIVE', IS_SBASE + 4); //module is not beeing used
    // --- ERROR CODES
    define('IS_EBASE', 200);          //default errorcode
    define('IS_NOTCREATED', IS_EBASE + 1); //instance could not be created
    // --- Search Handling
    define('FOUND_UNKNOWN', 0);     //Undefined value
    define('FOUND_NEW', 1);         //Device is new and not configured yet
    define('FOUND_OLD', 2);         //Device is already configues (InstanceID should be set)
    define('FOUND_CURRENT', 3);     //Device is already configues (InstanceID is from the current/searching Instance)
    define('FOUND_UNSUPPORTED', 4); //Device is not supported by Module
    define('vtBoolean', 0);
    define('vtInteger', 1);
    define('vtFloat', 2);
    define('vtString', 3);
    define('vtArray', 8);
    define('vtObject', 9);
}

// Modul für INSTAR

class INSTAR extends IPSModule
{
    // helper properties
    private $position = 0;

    private const IN_5905_HD      = 1; // IN-5905 HD
    private const IN_5907_HD      = 2; // IN-5907 HD
    private const IN_7011_HD      = 3; // IN-7011 HD
    private const IN_9008_Full_HD = 4; // IN-9008 Full HD
    private const IN_9010_Full_HD = 5; // IN-9010 Full HD
    private const IN_9020_Full_HD = 6; // IN-9020 Full HD
    private const IN_3011         = 7; // IN-3011
    private const IN_6001_HD      = 8; // IN-6001 HD
    private const IN_6012_HD      = 9; // IN-6012 HD
    private const IN_6014_HD      = 10; // IN-6014 HD
    private const IN_8003_Full_HD = 11; // IN-8003 Full HD
    private const IN_8015_Full_HD = 12; // IN-8015 Full HD

    private const RESOLUTION_1080p = 11; // 1080p Full HD
    private const RESOLUTION_320p  = 12; // 320p VGA
    private const RESOLUTION_160p  = 13; // 160p QVGA

    private const Hardware_WDR_Modus = 1; //  Hardware Wide Dynamic Range
    private const Software_WDR_Modus = 0; //  Software Wide Dynamic Range

    private const POSITION_1 = 0; //  Position 1
    private const POSITION_2 = 1; //  Position 2
    private const POSITION_3 = 2; //  Position 3
    private const POSITION_4 = 3; //  Position 4
    private const POSITION_5 = 4; //  Position 5
    private const POSITION_6 = 5; //  Position 6
    private const POSITION_7 = 6; //  Position 7
    private const POSITION_8 = 7; //  Position 8

    private const GET_IMAGE_1080p = '/tmpfs/snap.jpg'; // Get Image (1080p)
    private const GET_IMAGE_320p  = '/tmpfs/auto.jpg'; // Get Image (320p)
    private const GET_IMAGE_160p  = '/tmpfs/auto2.jpg'; // Get Image (160p)

    private const RESOLUTION_SNAPSHOT_1080p = 0; // Get Image (1080p)
    private const RESOLUTION_SNAPSHOT_320p  = 1; // Get Image (320p)
    private const RESOLUTION_SNAPSHOT_160p  = 2; // Get Image (160p)

    private const ERROR_INACTIVE          = 201; // Please follow the instructions.
    private const ERROR_IP_EMPTY          = 202; // INSTAR IP adress must not empty.
    private const ERROR_IP_NOT_VALID      = 203; // No valid IP address or host
    private const ERROR_CONNECTION        = 204; // connection to INSTAR lost.
    private const ERROR_FIELD_EMPTY       = 205; // Field can not be left empty
    private const ERROR_CATEGORY_1        = 206; // The category for saving the images has not been set
    private const ERROR_EMAIL             = 207; // email not valid.
    private const ERROR_SNAPSHOT_CATEGORY = 208; // category INSTAR snapshot not set.
    private const ERROR_CAMERA_MODEL      = 209; // Please select a camera model
    private const ERROR_USER_PASSWORD     = 210; // Webhook username and password can not be left empty

    private const PICTURE_TRANSPARENT = 'iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAQAAAC1HAwCAAAAC0lEQVR42mNkYAAAAAYAAjCB0C8AAAAASUVORK5CYII=';
    // IN-5905 HD
    private const PICTURE_IN_5905_HD = '';
    // IN-5907 HD
    private const PICTURE_IN_5907_HD = '';
    // IN-7011 HD
    private const PICTURE_IN_7011_HD = 'iVBORw0KGgoAAAANSUhEUgAAAHsAAAB7CAIAAADbpWgoAAAAGXRFWHRTb2Z0d2FyZQBBZG9iZSBJbWFnZVJlYWR5ccllPAAAA3ZpVFh0WE1MOmNvbS5hZG9iZS54bXAAAAAAADw/eHBhY2tldCBiZWdpbj0i77u/IiBpZD0iVzVNME1wQ2VoaUh6cmVTek5UY3prYzlkIj8+IDx4OnhtcG1ldGEgeG1sbnM6eD0iYWRvYmU6bnM6bWV0YS8iIHg6eG1wdGs9IkFkb2JlIFhNUCBDb3JlIDUuNi1jMDY3IDc5LjE1Nzc0NywgMjAxNS8wMy8zMC0yMzo0MDo0MiAgICAgICAgIj4gPHJkZjpSREYgeG1sbnM6cmRmPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5LzAyLzIyLXJkZi1zeW50YXgtbnMjIj4gPHJkZjpEZXNjcmlwdGlvbiByZGY6YWJvdXQ9IiIgeG1sbnM6eG1wTU09Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC9tbS8iIHhtbG5zOnN0UmVmPSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvc1R5cGUvUmVzb3VyY2VSZWYjIiB4bWxuczp4bXA9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC8iIHhtcE1NOk9yaWdpbmFsRG9jdW1lbnRJRD0ieG1wLmRpZDo1NTFkMWQ0MC1iNjgzLTRiNDAtOWMzNC1mYjJjMjY3NGJhYWMiIHhtcE1NOkRvY3VtZW50SUQ9InhtcC5kaWQ6MkVEMkQ1REU4MTZBMTFFOTgyN0FFOEQ0RDBBREMyRkUiIHhtcE1NOkluc3RhbmNlSUQ9InhtcC5paWQ6MkVEMkQ1REQ4MTZBMTFFOTgyN0FFOEQ0RDBBREMyRkUiIHhtcDpDcmVhdG9yVG9vbD0iQWRvYmUgUGhvdG9zaG9wIENDIDIwMTUgKFdpbmRvd3MpIj4gPHhtcE1NOkRlcml2ZWRGcm9tIHN0UmVmOmluc3RhbmNlSUQ9InhtcC5paWQ6ODhlNjJlYjYtMDg4NS05YjQxLWI5NjYtMTMwNTI5NDc3NmQ1IiBzdFJlZjpkb2N1bWVudElEPSJ4bXAuZGlkOjU1MWQxZDQwLWI2ODMtNGI0MC05YzM0LWZiMmMyNjc0YmFhYyIv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';
    // IN-9008 Full HD
    private const PICTURE_IN_9008_Full_HD = '';
    // IN-9010 Full HD
    private const PICTURE_IN_9010_Full_HD = 'iVBORw0KGgoAAAANSUhEUgAAAHsAAAB7CAIAAADbpWgoAAAAGXRFWHRTb2Z0d2FyZQBBZG9iZSBJbWFnZVJlYWR5ccllPAAAA3ZpVFh0WE1MOmNvbS5hZG9iZS54bXAAAAAAADw/eHBhY2tldCBiZWdpbj0i77u/IiBpZD0iVzVNME1wQ2VoaUh6cmVTek5UY3prYzlkIj8+IDx4OnhtcG1ldGEgeG1sbnM6eD0iYWRvYmU6bnM6bWV0YS8iIHg6eG1wdGs9IkFkb2JlIFhNUCBDb3JlIDUuNi1jMDY3IDc5LjE1Nzc0NywgMjAxNS8wMy8zMC0yMzo0MDo0MiAgICAgICAgIj4gPHJkZjpSREYgeG1sbnM6cmRmPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5LzAyLzIyLXJkZi1zeW50YXgtbnMjIj4gPHJkZjpEZXNjcmlwdGlvbiByZGY6YWJvdXQ9IiIgeG1sbnM6eG1wTU09Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC9tbS8iIHhtbG5zOnN0UmVmPSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvc1R5cGUvUmVzb3VyY2VSZWYjIiB4bWxuczp4bXA9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC8iIHhtcE1NOk9yaWdpbmFsRG9jdW1lbnRJRD0ieG1wLmRpZDo1NTFkMWQ0MC1iNjgzLTRiNDAtOWMzNC1mYjJjMjY3NGJhYWMiIHhtcE1NOkRvY3VtZW50SUQ9InhtcC5kaWQ6MzI2N0RGNTk4MTZBMTFFOUJFQTZGOTFFQjIyMkE2Q0QiIHhtcE1NOkluc3RhbmNlSUQ9InhtcC5paWQ6MzI2N0RGNTg4MTZBMTFFOUJFQTZGOTFFQjIyMkE2Q0QiIHhtcDpDcmVhdG9yVG9vbD0iQWRvYmUgUGhvdG9zaG9wIENDIDIwMTUgKFdpbmRvd3MpIj4gPHhtcE1NOkRlcml2ZWRGcm9tIHN0UmVmOmluc3RhbmNlSUQ9InhtcC5paWQ6ODhlNjJlYjYtMDg4NS05YjQxLWI5NjYtMTMwNTI5NDc3NmQ1IiBzdFJlZjpkb2N1bWVudElEPSJ4bXAuZGlkOjU1MWQxZDQwLWI2ODMtNGI0MC05YzM0LWZiMmMyNjc0YmFhYyIv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';
    // IN-9020 Full HD
    private const PICTURE_IN_9020_Full_HD = 'iVBORw0KGgoAAAANSUhEUgAAAHsAAAB7CAIAAADbpWgoAAAAGXRFWHRTb2Z0d2FyZQBBZG9iZSBJbWFnZVJlYWR5ccllPAAAA3ZpVFh0WE1MOmNvbS5hZG9iZS54bXAAAAAAADw/eHBhY2tldCBiZWdpbj0i77u/IiBpZD0iVzVNME1wQ2VoaUh6cmVTek5UY3prYzlkIj8+IDx4OnhtcG1ldGEgeG1sbnM6eD0iYWRvYmU6bnM6bWV0YS8iIHg6eG1wdGs9IkFkb2JlIFhNUCBDb3JlIDUuNi1jMDY3IDc5LjE1Nzc0NywgMjAxNS8wMy8zMC0yMzo0MDo0MiAgICAgICAgIj4gPHJkZjpSREYgeG1sbnM6cmRmPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5LzAyLzIyLXJkZi1zeW50YXgtbnMjIj4gPHJkZjpEZXNjcmlwdGlvbiByZGY6YWJvdXQ9IiIgeG1sbnM6eG1wTU09Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC9tbS8iIHhtbG5zOnN0UmVmPSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvc1R5cGUvUmVzb3VyY2VSZWYjIiB4bWxuczp4bXA9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC8iIHhtcE1NOk9yaWdpbmFsRG9jdW1lbnRJRD0ieG1wLmRpZDo1NTFkMWQ0MC1iNjgzLTRiNDAtOWMzNC1mYjJjMjY3NGJhYWMiIHhtcE1NOkRvY3VtZW50SUQ9InhtcC5kaWQ6MzQzMEE1MEQ4MTZBMTFFOUE5QUQ5QkVCQzBFQzJFNzIiIHhtcE1NOkluc3RhbmNlSUQ9InhtcC5paWQ6MzQzMEE1MEM4MTZBMTFFOUE5QUQ5QkVCQzBFQzJFNzIiIHhtcDpDcmVhdG9yVG9vbD0iQWRvYmUgUGhvdG9zaG9wIENDIDIwMTUgKFdpbmRvd3MpIj4gPHhtcE1NOkRlcml2ZWRGcm9tIHN0UmVmOmluc3RhbmNlSUQ9InhtcC5paWQ6ODhlNjJlYjYtMDg4NS05YjQxLWI5NjYtMTMwNTI5NDc3NmQ1IiBzdFJlZjpkb2N1bWVudElEPSJ4bXAuZGlkOjU1MWQxZDQwLWI2ODMtNGI0MC05YzM0LWZiMmMyNjc0YmFhYyIv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';
    // IN-3011
    private const PICTURE_IN_3011 = 'iVBORw0KGgoAAAANSUhEUgAAAIIAAACCCAIAAAAFYYeqAAAAGXRFWHRTb2Z0d2FyZQBBZG9iZSBJbWFnZVJlYWR5ccllPAAAA3ZpVFh0WE1MOmNvbS5hZG9iZS54bXAAAAAAADw/eHBhY2tldCBiZWdpbj0i77u/IiBpZD0iVzVNME1wQ2VoaUh6cmVTek5UY3prYzlkIj8+IDx4OnhtcG1ldGEgeG1sbnM6eD0iYWRvYmU6bnM6bWV0YS8iIHg6eG1wdGs9IkFkb2JlIFhNUCBDb3JlIDUuNi1jMDY3IDc5LjE1Nzc0NywgMjAxNS8wMy8zMC0yMzo0MDo0MiAgICAgICAgIj4gPHJkZjpSREYgeG1sbnM6cmRmPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5LzAyLzIyLXJkZi1zeW50YXgtbnMjIj4gPHJkZjpEZXNjcmlwdGlvbiByZGY6YWJvdXQ9IiIgeG1sbnM6eG1wTU09Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC9tbS8iIHhtbG5zOnN0UmVmPSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvc1R5cGUvUmVzb3VyY2VSZWYjIiB4bWxuczp4bXA9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC8iIHhtcE1NOk9yaWdpbmFsRG9jdW1lbnRJRD0ieG1wLmRpZDo1NTFkMWQ0MC1iNjgzLTRiNDAtOWMzNC1mYjJjMjY3NGJhYWMiIHhtcE1NOkRvY3VtZW50SUQ9InhtcC5kaWQ6MjEzM0ZBQzQ4MTZBMTFFOThGQkE5NTlGQzIwOTI1N0EiIHhtcE1NOkluc3RhbmNlSUQ9InhtcC5paWQ6MjEzM0ZBQzM4MTZBMTFFOThGQkE5NTlGQzIwOTI1N0EiIHhtcDpDcmVhdG9yVG9vbD0iQWRvYmUgUGhvdG9zaG9wIENDIDIwMTUgKFdpbmRvd3MpIj4gPHhtcE1NOkRlcml2ZWRGcm9tIHN0UmVmOmluc3RhbmNlSUQ9InhtcC5paWQ6ODhlNjJlYjYtMDg4NS05YjQxLWI5NjYtMTMwNTI5NDc3NmQ1IiBzdFJlZjpkb2N1bWVudElEPSJ4bXAuZGlkOjU1MWQxZDQwLWI2ODMtNGI0MC05YzM0LWZiMmMyNjc0YmFhYyIvPiA8L3JkZjpEZXNjcmlwdGlvbj4gPC9yZGY6UkRGPiA8L3g6eG1wbWV0YT4gPD94cGFja2V0IGVuZD0iciI/PqbkZOYAACx/SURBVHja7H0HmBzVlW7dytVpejpNHoXRKCKBBEICgSVhCxtjbAzGCxi8jvuc2Ofd9Xrf2t+u17vP+4zXab1rHMB5HfADjLEBY5EMSijnhMLkmc7d1V25bt09t3pmNJKGqFEYdor+mpludU/V/e855//PPecWIoQwU8f5PtipIZiCYeqYgmEKhqljCoYpGKaOKRimYJg6XuHgL/xT9DyvpjHhB9d1T9GbHMfx/PBVIIRYlp2CYcIOGOvaoDuOY9s2PMMrjv8LDDZTQwIhwEAURYAB3oWfJUmCZ0ACXoFnQGWywIAutGQGjL7tH8bo4XiYsKGgwnASYXnCsAROe3T6I/gF88TxPMwgTmJxKCADNoIg1AxlUtjHBQRDDQBd16uVSrlSqRiOKAcCkTgnKukK3t1v7OkzBsqOgxnbZTCcNj1xoogoFuBaotyshDinUWmI8ICKxDgIkbDCBxQFYBjruKZgeDkXZFlWDYBCqWw6pD7Z2N5QD9O7YmCeY/IVK626siQZNl7/YvmxvWpv0SPUGBDPMuB+OJbhWaSILIeYxjpu9ezgVbNCYYlRWFfmUSSkAAwAxgXrps4/DBAAAIBioVBUq6bjJVKNibrQ/r7Shi6b44VFKW9/2u1sCPxgo5oMsdctjLbFZIFDP9mQe2iHajgnTh9RH0WR4TkEQy+LbHs9f9vS6OJ2Och7EYWXaRC5QH3U+YShZgTgfvK5XFm3I8m2rMklQ/zGo+pPN5Z4z/zYm1vuXVfsz1X+7u2tIUXIqtZvdlWvnR++Zk7wWNY8lHZ/vLFUMfG4VwAxA/AA+0iF+Q+vqF8+MxiVSV1A5Fh0AToo/jxiAEZQgKNYcogwfeasr6zNb++qdMS5T72lKSqzqYgoicLKWYbTDgMngNGsPagfHjTKhfzKjjkbjmozU8G3Lww9vFO1nNPnEiVatuvZJq5WmX95RJvTHPy7tzW21TupiHABhgn+fDkiYED5fD6TK8r1TUfyfGnQWdQi3XhJ5FjG/PH6XNkkdTK7dJp8+/JkXUD4+ab8ghY5GdKxWb5sdigRkeIB9IuNmU9dk9rWZRzLOSdZBMHEtXlittXz81vCzXEFjD5Xdb/5RN+qefVvXxRtiKCQzP9Pd0qAQblcLhaL2UI51jTjVzuNoZJ1x7L6J/eXHt2rc4wXkYEIMekKsTCbDPNffGdja0xqivCDReNIxrx8Rmgop5oe9+QhPRUW9g/ZD+/SIKjUEGA8l3X1eQ3cX7xleiQgbjle7S66nsc01/FLpgWb60XQgkCoeI6FaPE/Fwb4c4BBJpMt61assd1DwraualBiv/1Mrq2eu+WymCRw6bIDbr25XvrpxvyT+ysJxfvcDW0Riezp0zsbFUuv/mCzBbP7Szc2SwK7+Wjpe+urJR3TC8GuSLTrF9XdcFkzhI2uAobIAa4Jhp6GCp5VBPbqWfL7l0VbokJQkcMXDBL8uY8H5VKpqFbkxIwv/D53VWfAc+xfbjY/uTrZWzD/+XeDLOM1RjiJ5wo6/vMVSRjH9QcLfXltqMosbJYhJMBQHs05pWLpyV3MXW+d0ZtmAgJTptEAC572zsXRZbOTX1lbGCg5Vd32HJNjXEpkOc6xmSpmHt5afXJ/+fZlsfctiws8K/EIUEIjx/8IGECdgS/K5ArxxrY9WXL5DMV1vacOmh9flfjR+lyupP/FVck3XxQ3LFc1Ccexx7PGVTPFrUdRumSpNpet4vnNgaaI8Lsd+WQMX7+kwbBdRFzgr4ghyDWu6FBWLkh9+7lyT97WtWpccq6/LHH9kkb4KuwxIofAMLpz5s6e6q7jJYHx3nt5sl6BUOLAuYHw5kaOc4/HuYMBY6yqar5QFOoaf7PPuXaeIhHrO+sqn1iduueZDAzZvR/sRMTecjizpdcFNnP9xbHF7cFdx2D6o/og111ys2WTY+VYkP+v/zU3KJC+XHXtviIiLAQSDzsNIXzLFc2/3l7pK9imps5LMH9zw9wtXfoXfp8FeQFBHEQFaIawhDqT/FsWJmY3SFXD1C3e87CMLIG3BYTDoZAkSedeXvDnxhcBBpqmATs1idBT5HYeL1zTKf1oU+WWy+of2l5sCnmfvX56uqDes64akPgbLo7WB/gdXeWbl9RXDDcgoERI7C3orXXMkCpsOZa7bVliqKg/uLMSkthLpymG7XGe9bZFiSM5fChtG1rl0hbu09d33LuhdDDtlDTsYKYWAms5qONZ++mDmiSyIYkHp9Qe41Z0BJbPDMgcKRftVARFw9wbyhrA7TqOA/GgJtNyhXJrx9wfP5G744rEti7NcTHLEBjQL7yzLV2o3rtJe9fi+mLV+vazecO0v/2+aeDZYRynJ5WyRQoVY35TZFaD/MIx54cb8h9eEX/LfDavmpkKBifWFGYunRn9/oZKsazNSTCfvG7md54vHRiyS7qHvbFclgAiQNVawzgoy0fyNsDSW2S2dpn3rSsvbpM+9/bGrOaIEgkrbxQY4Gph6KuVilrVLAc7rNw6Y3ambN16eawp6P1wnX7NvMhTh7RblibBVh7Yqd+wqH7jscq6oxZEggAuqFoKG+bBLHnX4tgf96t1oregJdSdrTy8x+zKWdmC+m+3zkoXme+tVx3bumJu+Hje7ctbUdH60DUzfr1NpXZwCgaj5JBhBYH/P+9o+9XW8lP7VNuxeBENmcI6Xd8yL7juiPaJVZyvwM+dTbBnD4NSqZROpzOFMhNI4XDbi5VgXjXuXlt8fFeuL6/3l9yZSepPWuOSbtkVm8mo1qbj1kDBtKrFN3WG2mPiHw7YrTG5rLu7e7TV8+rSVa/icMCd9KoaQKbAeumi1lt0A7x7yfS6F7pM09CvWxgbLHs7+wEDPB4GNSDY7hLzD7/pv+mSyCXtSn2A/dLN05qiYsVCD25OdyTFrz4x2J2teueQyrNnKRiYpgmkqGhgrq71m8+V//b+7nlNActDxzLGopbAYMXTLQz/ElxzvopdwsWCbF8Jp0umpxeWT+P+5obODS+WNvfhN88N/nZ3uSWMQQD/1wsFj5U+vjL2wRXxz9+84PBAZXMvzqvWzITA8uKxrNUaIctnx544aBQ0MLCXGUQEbw6U3W/8ceCjV8cCivzCUXVlZwAieF/B7EyJB/vKAsdaw5Jw0sJQI6aFUiWRavnmn0ovHNWIWWyM8HUyC8PaVC9Rc2FQWgV+wgLzgbg9JyXdeUX8I1dGvn5H5zc/cPH6w8WfbbPef0X9L7aUM/nKh97UtL3P3tFrfffZjMizH1jZnggix7F3DmLwSJfPjOwdMKu6CVBt77UGy9h2vFeayYAEOpa1n9hTuPnSui3dxuo5ITgTzWY4f4ECJolmuZMYBjAFIEWlsspHGh7YUT6acQpl9brFDSCvvrRWbaxXZjeFptXzIZn/yfrch1YkjmfNGXFxbnOgMYRuvyzUEsL/+vjQ/TvMj62MP7SjvLurePOSyBWzIlfOkG5eEoao/i+/z7zv3mN/3FtY1+Wmy25YdGc1Bvf0WyEBL2gLb+mxq9a43oiAwKMPZvQ9ZGH2+cPqvEYZGOq2bv2qzqDjIdB8oYAM5pIva4aNJysMYArlclm3sepwG7udgZLNe86b5qcww11/UfitC6K5qtvZHGmPCf0q8+n7+0DGlssqNsqPbev/58cLn/2dBpzyb9+auu/5/L6e8sdWJu5Y0fKzDem/f6TAIu57d06fHkOLW1iG5Tf3eJphdSRl8HwDRWt+k1w0mLTqunh80sZ7hsToCFvAlYbBQKigMw9sTr9zUXjt/soNi6INwAQ8hue4gub9YEOpK6tNSqZUM4WyWgWdfN9Tpd6Ca1lOUoF5Bz7EGchXv7++dFGT+E/vbPnyjY2f/nX/gf7qv/xOA7Em8qhOZmAo//Wm5p09lc8/PBRkzb9/e3N7Mnigv/LcMXw0Y/YN5eYlZ7z/yhTE5O+ur8KIE9dZ0BI9nrNN257fEj0wZGmWN25oRYismhu9a01Lf9H+2YbM7j5Tc1h41SXsvn7jz5Y3Op76s025L9zYrmsGTYK43o4e/eOrBYhhEk/rPyYNDLWUEUQFy8XpjNFXxJSuYHdaU2BXn1knSRt7SXfO6hsYumVxuLVe/OSqeDTYDMwHpn9Y4XXTeeag+o+PDJVUfW6Sueut048MVT73sPrBK+OxoInNSkPEmt8sVyvqN543u/PYtLHC42nJwFNHbBF5zfXyxl7TdsfPVRLErT/uHvhFf0RmQRX+5ZoAxGc4K8thirq3v6/SGuNf6LIy1QxIGVW34CPAd+97pvcz101jGC7ATR5rAHeUh6NYbmid+dOni0NlB+YU4zmXzUrtHjCvW1gnC0jG5QVN7Jym4MZjalNEvOdPhe68BS4YprBl4yBnt0eZ/3vHzLmNgV9syT+4w+zJmc8eKP71tU3XL1Cu6oxk88V7X7D2pz3VwJ6H6xQ2JAsDJa1eQaLAFTUXj8tuaFQAlYcGHJxh2W89XUiGwN3Fb1/Ofu0P/emis79P7YiHt3VbBwdtxHhRgcIAXGBOS+jrawffszh08YzE5IChRlJBrgUT7f/xXGn/IFVPMLjIwxe1hrf2qeCyv3JTs+s1cQw+0p+fGQ/8Ylv1Qyti8Nmhkg4ROyBw8bAAbCpfKP77k8V5LeFv/FnrP/528OlDVUL6wUENprPf32xv7fMoH6XhFrfGRBAcZR131vOqRao2GccjESIid3aKgY9kq3bZJGqV1QwBQv3sRunf3tsOJNV28bZug0GM668faQzqK5pXzw7HJfLTF0vvXxahqXIWTQ4YaHGR5YTq+GN53FtwbDAFQgSOxEJCxfLymvPvTxdvXBTc01N54rCjm6Xv3Dn9hePGoUFQrfGy7tzzXOlo1vrLVbGnD1kbj9sPbh+ACfuOiwJdQyXHNrszlfs2OXsHKQZuTRMQ3BYP5TVs2G48xINzM51xwwKDGTYQCKyZH17YooDRbDhSfmxnoado7ep2PvVLuwVom8R05z1aEeh/wMDCt57K3bIkdPeTBaOYF7hpeLLAMEy8WPZY1oCQMOyjCQkIMMU8+PX+F7LJkJypevuyBEAyq+Wf/anrrjVtMtE+88DQ9LjwN2tSX3xkAOi8atGKGGQUEA5ce3GLAuIM4a88TdfR1BP5CQJOPFUn5mn4wSFJqloEj6WjY3AA7rOr33kxV1IEVRFQQx136xWpeU3Bh7YXntir7h/AHItgzowqPo9hgSLdt17lrcKn3txc1pz2BjQ5nBLySxklWU7yEiGVkeEgAZFVNZBTzNMH1f+8I/HU3vw7Fka2Hy2FJeO2K+eB+Hr8oH1wyNnTVWwI4DXzAo/uLt9yWbx3MH/lxYlblrUMZnJHBq3nu8lAyQUC43knrI9nSVgWj5fo4lpQYuFd8hJLifCi5RLwPCVE6UBfCR0YtCOy+qbZga/dOu1Lj6aBa52iNcDrea5+w5LYDUvbghJiEZo0IdpfOWFTEaFO4YZPm3gAQw4iJwbHzX3ugZ57P9DRFpc6ElIixBmW7VChikxTl131smntMLI/TusDBeVHH52HHfO5fQMP7iNHsrgwal5jDoFl4MsroHcJhFNOc5iXV85+kR9d5YYRtx1cNvAD25y9vdpn1iT/+bHMUMk9CQji1Uneu5e1378le9vl8cmkG2BaWqYlhOkFj0weElH4gu6BNYClD6jeR3/affdNTdNjHC2+26cFRQY0xK83oVVzZ4gi35U1VswKLWoNbDmae/SAczSHsxWsQ+AdTwtwLCPwyKKjRxDLeK8lEUd89mRY7pGB6uFBaUacz6rYOzkNJYt0za4nb8GfmEww+FXvjOXQ1CYZidtBWdBsUuORmLD9JXzXrwYvaRP/bHHwY6saTAfLAvuxa1o03SiqFR5bHoO+/MdctopBx5q253ovWbPA+qvHLl3SgRlA68NeW0aUYMY1I5J1SXv4iUOF072s43Ewm4B0OJhMJhhYWtLO0Zp4cmJEBJ6li18jL8BbwG3WHTG3d+sNoezi6eHVc7HCeZuOm1u7zXQVqwahIhYzL+npT5nVdPQRsDL+1fpv4pftO5xntkXI598999E9alo9LSuO2LLNHhyoLmgNAoWaNDD4xaPAOAAIyuzQiTWWcQ7LcTm7+pHrOtIV9ycbi6DFLmpRPrk69f/+kOkv2i5+VZl+nxZBoPYppu2FQuiVRh88IwYABMZJhdC7Lm1cNivy862VvQN2SXdP9WkImS73X88P/Ogv5tuWOelW3whPM8Vo5FrAqLEigutGp6iMRIgFl/u7vcZgtvTRlQ3rj1nPHipd0ir0FBz31TkB14PAQFcs4K/oNk4K6KWZPWE9J8CayTr24mmRNQsTIsesPaDdvbbYkzNs0+A4ARORnGxO4Od6y+TnGwbfszQJ9nNWyzUmUr45rotdWq7C06TZsKPKqnZLHS/wp841kEitcZnxinW8+Y5LYhYpz0rwTx549RlNyvQNG0dksEAup+GFCi/4pS3jmhK4rDuubp0RF/YMWGABEPmHiqZna/MaxQ+u6pAl4VtP5/YNWCdmADUd1yLsI1vTty2HGOad1TXRiYSh1iOlW7RYcXgsEKtaXku9JPPaSQOE2JIt3PNs7jPXNvBsCjv2kpTz+GFz14Bru69u7ZEmHtiS5sSDlCWny26dwoJ6KBvjxnTkIv5X2zQguGA3cIaMo7dFvE/f2FHU3Z9vUYH7fnB56AuPOuAefdXpccRsDbtNibpjvSrEHs8jk8YpgTOSZKVsUJ1FRmZ91QLmxwd8BeSNWXJxCLut2+opZFMRjkekYnpZzVMNz321F4w8xA6U7DmtAYHnCpoFplivsENlZlx26REEQgEeDLZloq+eG7lpWdP9OypHMu5g0WwLmEExLAC9cP0wgLg63rn79nmEYf/tYZUljiSwkwMGcAcyPcRwiLaBjL5quShfdRTh9JQMvAXa2BkquxA6GF9VvaY5hxDblbOunMOBERTLaKhszUgIh9O2+9L2ymAniLRbr2yY3RS65/ny8ZxTMTG2zLo4M1R2TMuZXW9/6rrZ//rYUJAgCAd7etW/fvs0+FMQ8CbH6lutGVYWePCvPEdZvB8eYM5yLxwtt0Q5kR8nxsG4w/R3XFpV95rtHnGDqiuwEO15l+GODBlzGiRJeOlQ6uEAa9xyebI1EfzxZu3QkA3G4To4wDlvXph69ogRF53P3zRv94C1ek6gKSoNFI0VM+VpcXl6Y93ZZkoTCbIgCJFIWEbul9/d/J5LI2E/pQEM9oUXy5e1iUHxVLp05tBXLGawZM1K0qbPg0MmrTpQuJfWD2RhW2RBe/TXO/SunGPQDBUIP6stimY1ho5mrPdf3fjwztLRjJ4ICXObA8tnBJvqA9Ma63mOm0wwwFgoitIUjyQV/OErozAolNT7c7YjpUQD3ASnihEVurt6tHlNckDi0xVcrNrgl07+K2TkQc/kxSL73XVqT96xHD8/gp0wZ912VdsD28sJxUuGha3dhkAc0yHTkwGBmNGwcrbd0cTDAO7A70ZmecZ1bOfyaXJIphRScxA48VSYEyb8klhu74CRCLKNdYKJub391SVt8hi/RJDnisQUWa9Gz4o66crZ1A4ITYHBW1fPjsC3HBo03ndlw//fUQUgGyJ8RrUBkoLmisI5Ktyb4HGpRQhJFGKy+5GrYqkwz3NAkIQHt2Su7gBUJjphTEeWOTCgLW2XOZ7f1au3x4RY8ERlPMu4Ny+J3HlFLCSh4SDt0TQJxAnO0+ek2BuXNv1qW6UxiEG7H8s5CNszk0qmZMbDYiwaYc9Vhf3EWxy1CVEMKTLB9kdWRGMhHnHc4bS1oCUABsFNdHhwCPf8IXVxu5wIC2nVg7g6v1Hk2RFSS0BSWHcsj9+1OpYKgbvyMyB+Q8r8FLrruo4fblLzZf09lzf8fq9erLoii9vjMvGcVIhLRgPMuTrOiuMD16QociKALm6VV3YGAxJXtdkn9xUXNYuKONFriYjrKbr9BXPZdAX40r6+6kXNUi3DQckRYodU98W0OVB2v3hj85s6AwHe4xlnzYK6T75t5k83qwcGzOYI8FEGyKtpmgoyk2H+Q1clZVEAOTK5YaBpPp4PKHJLhP34qsSb54ZCAfGx3cW3LoiAm5rgBg6aF+Ee31O6ujMYD4kDRScW5EfBBqZW1mkpzZZu855n82+aE/nCu5ovnxka0thvPFXc0W1UdLts8z/dVMrkikGcn98kxhUyrznQGAuy57Dn52wV1tf2c2E5N4ncT6yMX9TEf++54oYjlWUz5UzVrRoTmxzgjuXcQwP6W+aFNh4uSjwTENFwdglAcjzDdgAWcIzffiY/v1leNa++ISL0Fqw9vZV0CRPiRSXv46til8+cAXw3EgrUBaVzQ5DOOgy13IbA8wKyJTs3PyXVBYXfbM9/7dYZO3qsI7Y9kWspCJmY/f3u4mff3no8a7jYA6d0InhgpmriALAljylqeNMxfT84oig/PSa0J4KL2kMQrlTTq5jW9LjQkqoXOPYN2PtmWaau6TxPCXjJQPf9Kf2BK+JfezKXrbgT2T8AMaCCH91VuOnSGCLemBQv4xJGs7BvH1Q+uJgAGKCfD6dtQAu0PRiKadkdIf3O5TGIB+elG/ScmB5wJ7oIwRCW39qlFzTr2vmhoDSxvhe5HrvhSLVQdVqj3BiPAmSJsVwPBMAJNcFQ2mq7pGrSqqdcFUOEYInDIPZ8deSeE4nI0knH+2vHhsP8dvPAncvqV3QEZH5CrR+xwMd+sTFd1Gotuid0NAiFcTH3C6n89HtNZTPn7WDPviVQSQceiR9OKSHTco9ljNuXRi6droxx4hNwQETOVuz+ksPTzOKIkEaM6PdFv/zhndcNjdizjQGtE/BjHlsbGkQrhVTD/v66IvjiFbOCijCRSHgewR4Zm71CtJQG4ZelZjU3dR53Wjrrf7nWdA9AjEZNmHccIn1F9+7H09ddFLlpSV3EzzRMhDmANMMQGMYOOsxy4E6vMMSIfgRO9HztLnUunBLxw8OooAJrqHHC7oLzlT+kU2Hhr65NtUXpGtwZgUE8BlsQn+sCYk6r+Rg/b4EcoAN+0d8rNCXCSXrkjWgNnueZpmlbFgHSXnPXfpWQvygEU4/JVNwfrMtv7zH+9m2N18wLhkWCiPeawaCpOod1tWl17odXtz17RM9XXdoK6loSoy2dHmyokwbLL++WaIEBhBZ8nnA4u7rBcRy6gSdmBnLmcHqZeAKLHJeMLLIjkE5P7Ku8mLFuWlx3dWfowW2Fw0OW7vhTBL0Sf6GFXy7y7LDgLJ8VvuHS1PPHzC1dVkWzOGw2h8iNlzVOTwXv36GnK+7LDjFVebQn5g0JA92swXbkSPypbVa24hdVEq89LveWXdM9ccHgMQ4NWfc8m1/SLr93acKw3bV7iwcHzYpFMAEwamEFnQ4AS+x60b18Znjl/BbDZX+5TTs4aBi63hL01iyML2wL7xl0frip2ld0NOtlqRDy12IxOV986ezCQKtmMI5E5IJuVq3h2pPO5khfmZzSEgK/lHT83GF9T7+1qEX65JubNcvd0a3t7Kkez5qqSSwXnEYNDwAA84wbkbyl00NrFiVyOvPHgwYAoOlmY4hce2liVmNw35Dz480aEIGKianxkVcIYMCUsHfe9n8868kMuH4QtZZLaM2vL7J0mwji+K4GpmSu6j5z0IoHmNXzo4jj1yxMRGSmpNFUdm/eGCxaAE8qwl82IzEjFSgZzIM7taMZw3PtzqRw9dJEY728e8D+wabKYMmtWjDBPeK9mlCDMMObtAuavDFh8IUyIiO1xKDktndrf/nW+PNHTNXA4xoQIegPe1VJ5Be1Bnb3G11ZMyxzHUn5znn1rXXsUMk8VvD2DVrrN6uq7kQk5rr5yrymuEPYnX3WI/srEPbBBbmvqdQD0RBdNd3ztb/YWYeBqraxuQTE9pW9jOpe3Rn83c6S5vua0fH3Ewsex3iWSZ7cPZQuht+7rOH2pfX7B3RMUE/B3nDE7Co4Zd2LB9mrO5SW+gjow+M555F9Zm+RNj1aDhmv3omMr9lG/wehGYHv8tB5ymjwZzUwMH4XggmuAYbGhRGi09/E5LvPDN61prn+ivpNhwtlzSK0U5FuXRsNCvEgnwiJ8bAQC0uiKKgWGejSioZnu3R720Sd0tEQxNR3OT15e0MXbVKvGK7lePA3TnSjkFMGm4wqav+5xpj9LXPprrlEZElKZuuCAhk57RE7PkfH2dKNtX3+6SaT2ZwjRh875L04oNoO7VsGQgIxIBIQrlkQ70hKoKhh9IAvGg6tmq7lIegAsXSbZ3jAoENoUQ0vU3Vh0ItVV3c8gBbTaAMPD9HVHbqLPesPHX34P7D0QbfvpvX+NK0y/J0yT3NcELEEHkk+/PA6iH2OZRe1BVvrJZFjRIE/l5sgnhUYahiUSqVCoVg2PT6c2tJt2NgfHH+M/A4IBAAIrCfCMCHaDgSyzc8AIoGj2xOyiGoLy/UqlgcIwce92iZtYweHZk+ZsZmQWpNLrfyC1mHQ+0BQ3U73FfNfd3xiCggCtIYLhM0zbaLZHsgaCCfLO4IfvDLeEEKJsEgnwbnawHjiYRjFIF8oqCaDlcS9G9VDaaeoUR6CRsy9tq05Syc+qfWljPx3Us6ZjDQNen7gqKWmT/Y4hCHMKdx3pOXrpF/H+Krhj4zcfGC4b67mG6cnxI+vjC9pk5vrRVnkz82K9MTDABgUi8V8oQjy2JGT31mvHhqysxX39OYR9JK0ZcyokZePs6+Q+H4d1wZzok5h370ketvS+raYFJa5cwDEBMMAUZLu7ZbJAgaukvrP58sHB+181XHP0b5EE2DMNbuQebJ8uvRPN7ZPSygCP6n6omu7+ORy+VLVCiSn3b02d6Bfz6s29kZ2LxrNEZ16Veg1j9QZn+vJhI7Uko5AoiBQiRxRkFcsW3v6KuAPkxExFhLP6gLpRFoDuKNMJtM3mE60zgKmfyTnZUpGWbd1G0MANB3it+qTWvYGHtTj12KpL7ZHPTU52amgkQyfH05oIGFHo4j/PNb7j4SL00AeZlA+T/U5As8BcQLKxEA8kAVWFlCQ7szKAW2tD/IpCNGC0F2we0vu/16dbE/I8tmsZ50wGOB7KpVKX1+/wUd+s889kqWtJfEgF1XYgEjboWqscbQzzvPFWo3PUFXhEUyG4zB96+R1oOHhozePoWvaLBpjWCfQOjHFyXi2hkY4APHVDO0+8uO/608ImByahauWV9S9TAVnq7ioue9YFNneYzSGyF+taexsCnNnzSL4CYwKuq5ruhFtajqYKezps0FSDdMhBJSUqfF3/+H/7DN6KhTQ8KIQO/KPa5QfjXFdNdJJdzf2Rsjo2Bh+mvY9aQl0xD5GiRYltf53eiNfiId/GJkHdE7QtpT1hwqfekvLlx/tLxoAkhtRBM8/xrqzkYVe9oKAoXaTKswH/ri/nFFdwxrtYiNjYwE6Kdf0khzp9HBBTnHpE6fzmZNkx9i30bEcPjRkLO0I3/1Y35dvbpdTqFpRazehq8GJqB7kQ6GgLMtnovX4iboeep8qTY8lWzbvKOWr+JQO83HcxQV2v7lxiTNdw9iU/fptM774W33dUY1nPVur+jcaYPz9gcCKWZHzCC8LIjmTSrOJgcF1XdM0LQdbupvXsL+nDvMGOIi/NeUPnhu6bXn8vucLbbGmiBTeP2TCBWo2ZRwASUThrpnLCCKuD7LnGYZhjySEn9hX9ZWax7xBDmR77NYu/ebLkiCq/+Gh3m/c2vbzrTSfWLtRqV/24T6xY/Abt88My9HXbRDshHgkMAVNN1PJ+IEsrRD13jAo+Jn5is1+9fHeT6yMeyz/xD71sjbJsLBq0EfFxIbp9g3lYBjAGbz+5YAJ8UiGYdiu11swaxl/wryhDogBg6q3/khl9dzQ73eVblocTUVO6i4mHgbi55yBD2AnxCNpmo6U6GP79OwrFEBMVoswXe6hLbnrL6qLBOUfr8/ceHFYHu049f8n8OyZyHt2AjwS2IJpJeP1XSWinnJPQn/vHP/hvsTDf5cMrxxcsPQJYnXJQt9a2//hFfVbu4wrZoZao6NtS1ThgPQ5k3PnJ8AjmaaNyYtDWlHz7JM8EkGekwgxilhTviMpiNpeVLVUzkgeG57BqF1MO6iGiwcuMINwCLt3wHzvMnZWU/AXmzJL2qWegjscBtGZzh9+ojzSE7tNWit38h1cFN69c0XbsbyjW57pkpperUlbzr+5LZi2QHM7qLY3SDLMP7an0p23L0iqxeoO+epjvd/58857nhloENFoF4WfF0TnDYYTHqmxsaecG94FZ4xHiij8+qPGi2lTQF7FZgI81TiI5UQWCwKfrzjRoJCtOE0RVhSl7ry1Zn7Y3xMJMcyF6J0gVhd071dbCu1xhba8o1MkPzk/MIx6pKMZHTjSqVsheV4qIg6UnZlxZlZDsGwyLVG+NaY8vLNcJzEtMel4WltzUez+zdmrOsM5ncgCNQ7DIRcw00Kmxz6wpbComV05Nzpm/rNneNLsGXokUG2MFFl7yDjVI/lri61xxcGkJabEwnJbXKkPiVu69Nkpsb/k7um3ruiM6o7XFFUa6+QrZwR0hy4UW45HLmjGizDGum5QpoROTnmdlxBdU22GZSeSDceL+fHu2+zFwwIhTn/Zc7B1YMi+skMRBdbBGIiFYXvrj4LkxnMaxLUHygXNC4msqmPLvdBlB5ye7WDaAc+g8dOQ5xIGuvktHA42K7Y6vmpDEZmPBblCxS5U6er/pqM6kCaXwGU4xEMDBZro39XjYoJc7PAhrmKxNr6wUfCTqwCDyJ+SXkfkvMDgOHR3AyQEnzqo5bVxVBtixWcO6wqtdWFrCzmIVh8xIR4JHN3SxK8RogtBcElg42ERPX1Ic/EF6JNG+hQ9DxFXYe14CIncRBb4vX4Y/KyqFYgkD2TVijmedGa5g0MW53f7jNlkb0TwnNgHbmRBk6UCzj3/1jCyGFsbfeKxjCdynsJ5EYmkwtyqBc2XzqzPlKoTuBbHv27ThPhs2m6kXlJNxnoJekNXuF5V5CIXwLh7I8+eXxXgSSwJikxQYJIRcUF7/ZLpdWEFaDb7p4PFLzwy+Ner6xiGmShm/fphAMIAujdbsaoWdiZNZpucoDX+TIdxByMUOCJxnszRW0+DnwRWPb8tPK85FJQ4zXLBpvcPOeufLeaqzupOGXRoUa1KUhyhC8ApMf4eszbiiUc4xt/t/fSenAtl0IdnOgIPU6vY5AgMuiyAzkcNUXlOSwgGHWY9XMtQ2TqUcXYPuU++WARnW7U8x6Wu0oXAgC1ab47oPxPYMUzpjK/6jGDgWBQPsp+/Lv7957IvDtF+BdNFuNb9fKKu5Vw6lrE+nSAYM5aItEyWSDzMd3q/h5a4MqcpNLc5GA+LQPbSqn0s5xzNuZt7aYSr2iBcaJUGxrUKgeG1nRqe4hjPy7InMaUz5BVnpBt4jt1yXH1ot7WiI/KxVU37B7S1u/ODJVt3GcNlHEx7NzwyFpKXXvJ/DYGDnBxFaWINeAA4dJ4lPJ3stN5L4pmIwk9LBua3hDobg0GZc108UHKO5JxDeWddV7li+QuZo4Pu12t4w7fCecWEK0N3AfGLSGoVD+cttVerO/c80ld0/uMZI6KUp8eFVfNji1sVmCpHM/qOrurRjFaquq5fTO8ACyKItnPQq63BM6bslzkVoJHiIh/GWpUYHWvQ/cSvr4Fn+ivQd0XiQJ83RaVpCaUtLqcitBi7ajhdBedo1tnQ7Ty6v1D1B912aTXUyEyvdba8huQo8ev34dsFv0CfFtK4FuOaHOeMVEmfl9SeX48Nz45LchW3WMW7e01JKEUVLh7kZiTFt10cmhEXYiEhAPPTw31Fe1B18hW7qLnw0G1M7yPt0lsOjq0hoFVlPN0IGLSeJHAhma1TeJja0QA8hLoAH5Rqm2IQEOQlnW4Bk67Qx7Z+/PSRiuGv1xsOvQkETaFjgoe91Gsb9NMnnsfwLxy3vnprU7FcCciC6GnNUiUYIks6GljP4jj59X/163Nq4FXz+fxQOrtPDX/9Wa2/eEJDj1bYsb4D5XyZs7JT+tiV4Z9trXYViMyjsMwCIQkIbFBCEqg5tlaR5yskvwOqZj2GTTSH7llsOESzPN32LH//YhvTHl6btikQd6TMi85ub/gOHuQknz6hyW6GxELcl9/dcEmrki1r4YComVgSubZ4kO48el6sAa4ZBpE9mT7XZtzwfXLoag597fnDhmZhwGCoTEuYhoP4iHJ7KeY3UmdHxvw8Go/J6TWv5yTXjXKq/dmf7Hzg04unN9SFFHFCKirPKDZgeqcv7lVUq6GKzaw76tT2Qz+TjoULJq2ERYGTRH6iqlpfPwz+nXwE2ijGjo7pS99NhFwIWYqJ4MT+Biksi8mEziL+dZuCLMvBgMwEZKAMCmtaLnggjgxvdMGetjI1qYabYU5TIRh5DofoftIKMpd1xl3b5NjIRP3J119Yb9t2VdOzJmVve/uNhzYP7umpWC7QU85FvB85gVpwBHHDCTzmFHjOrbgb/7exEoQZzqEyLqJsDeQy4RiXY7D/Mw4KzMIZ8Xde2nRRW0gznVlNdYoknH8YqNzxPPBMpr/7e1/BwC6GiKXZzLGMvr2rtLdX7S84VcPyu0gQJqzHCgCMR5cMkU9p0Ik+wFN6D9HrHmdyeiYDEVzb7c0Xegw73BoNJ4RZBvuve8OvMCQosomoMi0Z7GgIdjaG2uKKIrIs4+mWG5CEplgASJ0iTnCH6ER2+9B777kYCCXMf9V0Sppju1jkGOD+Nqa3K0yXnXTZGlKdrOpkKna+alU0RzMsywbhQHdZI35TDqkpO+ZEFm5sa+jJpkRGdr2lXrtWSlDLrKORj4HEkHkmoAhBWQTxkfA7qODRUCfVB6imgdMDLQba28VUwYAdCzy9DXU4IEDco3uhsaBguLO6NehZ39aM+AVIcHkQ1Com5pH3y835sukpAlMvc8kI31wnTovLtmPTGxsjzqV7jaCaxK11gjAnrfSSEaJbk/FjG3vpw29doZLN9dtB/B5p3wJoLwiCEadLTCIn+feo8/z+olrnD23J5hB3nrYAPae7y8F0A+Xck6m62K3trOCTf+oQWpKRaEjxt02tabHRbufxGqnQqXyBHYak1jU0vCcAiyYNO0CEvPFKTiffwU4NwRQMU8cUDFMwTB1TMEzBMHVMwTAFw9QxBcMUDFPHFAxTMEwdUzBMxuO/BRgA6VcbeZ/rFo0AAAAASUVORK5CYII=';
    // IN-6001 HD
    private const PICTURE_IN_6001_HD = '';
    // IN-6012 HD
    private const PICTURE_IN_6012_HD = '';
    // IN-6014 HD
    private const PICTURE_IN_6014_HD = '';
    // IN-8003 Full HD
    private const PICTURE_IN_8003_Full_HD = '';
    // IN-8015 Full HD
    private const PICTURE_IN_8015_Full_HD = '';

    private $BooleanAttributes = [
        'boolean_attribute',
        'volume',
        'volin_type',
        'aec',
        'denoise',
        'ov_enable',
        'ov_authflag',
        'd3th_enable',
        'our_enable',
        'wf_enable',
        'show_1',
        'show_2',
        'show_3',
        'show_4',
        'rtsp_aenable',
        'upm_enable',
        'aeswitch_1',
        'aeswitch_2',
        'aeswitch_3',
        'wdrmode',
        'wdrauto',
        'd3noauto',
        'show_0_osd',
        'show_1_osd',
        'start_position_activate_action',
        'timerpreset_enable',
        'tour_parkposition',
        'admin_value46',
        'm1_enable',
        'm2_enable',
        'm3_enable',
        'm4_enable',
        'profile',
        'pir_enable',
        'platformstatus'];

    private $StringAttributes  = ['string_attribute', 'wf_key', 'aemodeex', 'color_1', 'color_2', 'color_3', 'color_4', 'at_password0', 'at_password1', 'at_password2'];

    private $NoAttributes      = [
        'no_attribute',
        'LastMovement',
        'LastAlarmtype',
        'Control_Continuous',
        'Control_Step',
        'Control_Scan',
        'INSTARButtonSnapshot',
        'IR_LED',
        'SetPosition',
        'UnsetPosition',
        'GotoPosition',
        'notification_alarm',
        'alarm_detection'];

    // state code mapper
    protected $state_codes        = [
        0  => 'unknown',
        1  => 'alarm area 1 triggered',
        2  => 'alarm area 2 triggered',
        3  => 'alarm area 3 triggered',
        4  => 'alarm area 4 triggered',
        5  => 'alarm input / pir triggered',
        6  => 'audio alarm triggered',
        7  => 'motion detection & PIR triggered (area 1)',
        8  => 'motion detection & PIR triggered (area 2)',
        9  => 'motion detection & PIR triggered (area 3)',
        10 => 'motion detection & PIR triggered (area 4)',
        11 => 'no alarm'];

    protected $push_notifications = [
        [
            'enabled'  => true,
            'state_id' => 1,
            'name'     => 'alarm area 1 triggered',
            'sound'    => 'alarm'],
        [
            'enabled'  => true,
            'state_id' => 2,
            'name'     => 'alarm area 2 triggered',
            'sound'    => '' // empty = default sound
        ],
        [
            'enabled'  => true,
            'state_id' => 3,
            'name'     => 'alarm area 3 triggered',
            'sound'    => '' // empty = default sound
        ],
        [
            'enabled'  => true,
            'state_id' => 4,
            'name'     => 'alarm area 4 triggered',
            'sound'    => '' // empty = default sound
        ],
        [
            'enabled'  => true,
            'state_id' => 5,
            'name'     => 'alarm input / pir triggered',
            'sound'    => '' // empty = default sound
        ],
        [
            'enabled'  => true,
            'state_id' => 6,
            'name'     => 'audio alarm triggered',
            'sound'    => '' // empty = default sound
        ],
        [
            'enabled'  => true,
            'state_id' => 7,
            'name'     => 'motion detection & PIR triggered (area 1)',
            'sound'    => 'alarm'],
        [
            'enabled'  => true,
            'state_id' => 8,
            'name'     => 'motion detection & PIR triggered (area 2)',
            'sound'    => 'alarm'],
        [
            'enabled'  => true,
            'state_id' => 9,
            'name'     => 'motion detection & PIR triggered (area 3)',
            'sound'    => 'alarm'],
        [
            'enabled'  => true,
            'state_id' => 10,
            'name'     => 'motion detection & PIR triggered (area 4)',
            'sound'    => 'alarm']];

    public function Create()
    {
        //Never delete this line!
        parent::Create();
        //These lines are parsed on Symcon Startup or Instance creation
        //You cannot use variables here. Just static values.
        $this->RegisterTimer('SystemLogTimerUpdate', 0, 'INSTAR_GetCameraSystemLog(' . $this->InstanceID . ');');
        $this->RegisterTimer('RebootTimerUpdate', 0, 'INSTAR_RebootCamera(' . $this->InstanceID . ');');
        $this->RegisterPropertyString('webhook_username', 'instar');
        $this->RegisterPropertyString('webhook_password', 'symcon');
        $this->RegisterAttributeString('webhook_username', 'instar');
        $this->RegisterAttributeString('webhook_password', 'symcon');
        $this->RegisterPropertyString('Host', '');
        $this->RegisterPropertyInteger('Port', 80);
        $this->RegisterPropertyString('User', 'admin');
        $this->RegisterPropertyString('Password', 'instar');
        $this->RegisterPropertyInteger('snapshot_resolution', 0);
        $this->RegisterPropertyInteger('MJPEG_Stream', 11);
        $this->RegisterPropertyInteger('relaxationmotionsensor', 10);
        $this->RegisterPropertyInteger('notification_instance', 0);
        $this->RegisterPropertyString('notifications', $this->GetPushNotifications());
        $this->RegisterPropertyBoolean('activeemail', false);
        $this->RegisterPropertyString('email', '');
        $this->RegisterPropertyInteger('smtpmodule', 0);
        $this->RegisterPropertyString('subject', $this->Translate('Camera Alarm!'));
        $this->RegisterPropertyString('emailtext', $this->Translate('Motion detected'));
        $this->RegisterPropertyBoolean('activeemail2', false);
        $this->RegisterPropertyString('email2', '');
        $this->RegisterPropertyInteger('smtpmodule2', 0);
        $this->RegisterPropertyString('subject2', $this->Translate('Camera Alarm!'));
        $this->RegisterPropertyString('emailtext2', $this->Translate('Motion detected'));
        $this->RegisterPropertyBoolean('activeemail3', false);
        $this->RegisterPropertyString('email3', '');
        $this->RegisterPropertyInteger('smtpmodule3', 0);
        $this->RegisterPropertyString('subject3', $this->Translate('Camera Alarm!'));
        $this->RegisterPropertyString('emailtext3', $this->Translate('Motion detected'));
        $this->RegisterPropertyBoolean('activeemail4', false);
        $this->RegisterPropertyString('email4', '');
        $this->RegisterPropertyInteger('smtpmodule4', 0);
        $this->RegisterPropertyString('subject4', $this->Translate('Camera Alarm!'));
        $this->RegisterPropertyString('emailtext4', $this->Translate('Motion detected'));
        $this->RegisterPropertyBoolean('activeemail5', false);
        $this->RegisterPropertyString('email5', '');
        $this->RegisterPropertyInteger('smtpmodule5', 0);
        $this->RegisterPropertyString('subject5', $this->Translate('Camera Alarm!'));
        $this->RegisterPropertyString('emailtext5', $this->Translate('Motion detected'));
        $this->RegisterPropertyBoolean('activeemail6', false);
        $this->RegisterPropertyString('email6', '');
        $this->RegisterPropertyInteger('smtpmodule6', 0);
        $this->RegisterPropertyString('subject6', $this->Translate('Camera Alarm!'));
        $this->RegisterPropertyString('emailtext6', $this->Translate('Motion detected'));
        $this->RegisterPropertyBoolean('activeemail7', false);
        $this->RegisterPropertyString('email7', '');
        $this->RegisterPropertyInteger('smtpmodule7', 0);
        $this->RegisterPropertyString('subject7', $this->Translate('Camera Alarm!'));
        $this->RegisterPropertyString('emailtext7', $this->Translate('Motion detected'));
        $this->RegisterPropertyBoolean('activeemail8', false);
        $this->RegisterPropertyString('email8', '');
        $this->RegisterPropertyInteger('smtpmodule8', 0);
        $this->RegisterPropertyString('subject8', $this->Translate('Camera Alarm!'));
        $this->RegisterPropertyString('emailtext8', $this->Translate('Motion detected'));
        $this->RegisterPropertyBoolean('activeemail9', false);
        $this->RegisterPropertyString('email9', '');
        $this->RegisterPropertyInteger('smtpmodule9', 0);
        $this->RegisterPropertyString('subject9', $this->Translate('Camera Alarm!'));
        $this->RegisterPropertyString('emailtext9', $this->Translate('Motion detected'));
        $this->RegisterPropertyBoolean('activeemail10', false);
        $this->RegisterPropertyString('email10', '');
        $this->RegisterPropertyInteger('smtpmodule10', 0);
        $this->RegisterPropertyString('subject10', $this->Translate('Camera Alarm!'));
        $this->RegisterPropertyString('emailtext10', $this->Translate('Motion detected'));
        $this->RegisterPropertyBoolean('activeemail11', false);
        $this->RegisterPropertyString('email11', '');
        $this->RegisterPropertyInteger('smtpmodule11', 0);
        $this->RegisterPropertyString('subject11', $this->Translate('Camera Alarm!'));
        $this->RegisterPropertyString('emailtext11', $this->Translate('Motion detected'));
        $this->RegisterPropertyBoolean('altview', false);
        $this->RegisterPropertyInteger('categorysnapshot', 0);
        $this->RegisterPropertyInteger('picturelimitsnapshot', 20);
        $this->RegisterPropertyInteger('model_type', 0);
        $this->RegisterAttributeBoolean('INSTARButtonSnapshot_enabled', true); // show Attribute in Webfront
        $this->RegisterAttributeBoolean('system_log', false); // Camera System Log
        $this->RegisterAttributeString('model', ''); // Camera Model Identifier
        $this->RegisterAttributeBoolean('model_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeString('hardVersion', ''); // Hardware Version
        $this->RegisterAttributeBoolean('hardVersion_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeString('softVersion', ''); // Firmware Version
        $this->RegisterAttributeBoolean('softVersion_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeString('webVersion', ''); // WebUI Version
        $this->RegisterAttributeBoolean('webVersion_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeString('name', '');
        $this->RegisterAttributeBoolean('name_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeInteger('sdfreespace', 0); // SD free space，KB
        $this->RegisterAttributeBoolean('sdfreespace_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeInteger('sdtotalspace', 0); // SD total space，KB
        $this->RegisterAttributeBoolean('sdtotalspace_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeInteger('platformstatus', 0); // Platform Status 0, 1
        $this->RegisterAttributeBoolean('platformstatus_enabled', false); // show Attribute in Webfront

        $this->RegisterAttributeString('dhcpflag', 'off'); // on: (DHCP enabled), off: (DHCP disabled)
        $this->RegisterAttributeBoolean('dhcpflag_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeString('ip', ''); // LAN IPv4 Address
        $this->RegisterAttributeBoolean('ip_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeString('netmask', ''); // LAN Subnet Mask
        $this->RegisterAttributeBoolean('netmask_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeString('gateway', ''); // LAN Gateway
        $this->RegisterAttributeBoolean('gateway_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeInteger('dnsstat', 0); // DNS Status: 0 (manually), 1 (from DHCP Server)
        $this->RegisterAttributeBoolean('dnsstat_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeString('fdnsip', ''); // Primary DNS
        $this->RegisterAttributeBoolean('fdnsip_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeString('sdnsip', ''); // Secondary DNS
        $this->RegisterAttributeBoolean('sdnsip_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeString('macaddress', ''); // LAN MAC Address
        $this->RegisterAttributeBoolean('macaddress_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeString('networktype', ''); // LAN or WLAN
        $this->RegisterAttributeBoolean('networktype_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeString('th3ddnsstatus', 'ok'); // INSTAR 3rd Party DDNS Status ok, off, failed
        $this->RegisterAttributeBoolean('th3ddnsstatus_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeString('upnpstatus', 'ok'); // UPNP ok, off, failed
        $this->RegisterAttributeBoolean('upnpstatus_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeString('startdate', ''); // Camera Uptime
        $this->RegisterAttributeBoolean('startdate_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeString('facddnsstatus', 'ok'); // INSTAR DDNS Status ok, off, failed
        $this->RegisterAttributeBoolean('facddnsstatus_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeString('sdstatus', ''); // SD Card Status out, Ready, Read only
        $this->RegisterAttributeBoolean('sdstatus_enabled', false); // show Attribute in Webfront

        $this->RegisterAttributeInteger('httpport', 0);
        $this->RegisterAttributeBoolean('httpport_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeInteger('httpsport', 0);
        $this->RegisterAttributeBoolean('httpsport_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeInteger('rtspport', 0);
        $this->RegisterAttributeBoolean('rtspport_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeInteger('rtsp_aenable', 0); // 1: RTSP Stream needs Authentication, 0: Authentication deactivated
        $this->RegisterAttributeBoolean('rtsp_aenable_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeInteger('rtmpport', 0);
        $this->RegisterAttributeBoolean('rtmpport_enabled', false); // show Attribute in Webfront

        $this->RegisterAttributeInteger('wf_enable', 0); // 1 (WiFi enabled), 0 (WiFi disabled)
        $this->RegisterAttributeBoolean('wf_enable_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeString('wf_ssid', ''); // SSID (max. 32 Characters)
        $this->RegisterAttributeBoolean('wf_ssid_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeInteger('wf_auth', 0); // 0 (no encryption), 1 (WEP), 2 (WPA-PSK), 3 (WPA2-PSK)
        $this->RegisterAttributeBoolean('wf_auth_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeString('wf_key', ''); // Key max. 63 Characters (Allowed special characters: &='`)
        $this->RegisterAttributeBoolean('wf_key_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeInteger('wf_enc', 0); // Key type 0 (TKIP), 1 (AES)
        $this->RegisterAttributeBoolean('wf_enc_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeInteger('wf_mode', 0); // 0 (infra), 1 (ad-hoc)
        $this->RegisterAttributeBoolean('wf_mode_enabled', false); // show Attribute in Webfront

        $this->RegisterAttributeInteger('our_enable', 1); // 1: INSTAR DDNS enabled, 0: INSTAR DDNS disabled
        $this->RegisterAttributeBoolean('our_enable_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeString('our_server', ''); // INSTAR DDNS Server Domain
        $this->RegisterAttributeBoolean('our_server_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeInteger('our_port', 0); // INSTAR DDNS Server Port
        $this->RegisterAttributeBoolean('our_port_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeString('our_uname', ''); // Your INSTAR DDNS ID
        $this->RegisterAttributeBoolean('our_uname_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeString('our_passwd', ''); // Your INSTAR DDNS Password
        $this->RegisterAttributeBoolean('our_passwd_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeString('our_domain', ''); // Your INSTAR DDNS Address
        $this->RegisterAttributeBoolean('our_domain_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeInteger('our_interval', 0); // Update Intervall
        $this->RegisterAttributeBoolean('our_interval_enabled', false); // show Attribute in Webfront

        $this->RegisterAttributeInteger(
            'd3th_enable', 0
        ); // 1: 3rd Party DDNS activated / INSTAR DDNS disabled, 0: 3rd Party DDNS deactivated / INSTAR DDNS enabled
        $this->RegisterAttributeBoolean('d3th_enable_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeInteger('d3th_service', 0); // 0: DynDNS, 1: NoIP
        $this->RegisterAttributeBoolean('d3th_service_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeString('d3th_uname', ''); // Your Username
        $this->RegisterAttributeBoolean('d3th_uname_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeString('d3th_passwd', ''); // Your Password
        $this->RegisterAttributeBoolean('d3th_passwd_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeString('d3th_domain', ''); // Your 3rd Party DDNS Address
        $this->RegisterAttributeBoolean('d3th_domain_enabled', false); // show Attribute in Webfront

        $this->RegisterAttributeInteger('upm_enable', 1); // 1: UPnP activated, 0: UPnP deactivated
        $this->RegisterAttributeBoolean('upm_enable_enabled', false); // show Attribute in Webfront

        $this->RegisterAttributeInteger('ov_enable', 1); // 1 ONVIF activated, 0 ONVIF deactivated
        $this->RegisterAttributeBoolean('ov_enable_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeInteger('ov_port', 0); // ONVIF Port
        $this->RegisterAttributeBoolean('ov_port_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeInteger('ov_authflag', 0); // 1 ONVIF Login Required, 0: ONVIF Authentication deactivated
        $this->RegisterAttributeBoolean('ov_authflag_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeInteger(
            'ov_forbitset', 0
        ); // 0: Time zone setting enabled, image parameter settings enabled, 1: Time zone setting disabled, the image parameter settings enabled, 2: Time zone setting enabled, image parameter settings prohibited, 3: Time zone setting prohibited, image parameter settings prohibited
        $this->RegisterAttributeBoolean('ov_forbitset_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeInteger('ov_subchn', 0); // Use video channel 11, 12 or 13
        $this->RegisterAttributeBoolean('ov_subchn_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeInteger('ov_snapchn', 0); // Use video channel 11, 12 or 13 for snapshots
        $this->RegisterAttributeBoolean('ov_snapchn_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeInteger('ov_nvctype', 0);
        $this->RegisterAttributeBoolean('ov_nvctype_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeInteger('volume', 0); // Audio input volume: 1 - 100
        $this->RegisterAttributeBoolean('volume_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeInteger('volin_type', 0); // 0: linear input, 1: microphone input
        $this->RegisterAttributeBoolean('volin_type_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeInteger('aec', 0); // audio encoder: 0, 1
        $this->RegisterAttributeBoolean('aec_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeInteger('denoise', 0); // Noise suppression: 0, 1
        $this->RegisterAttributeBoolean('denoise_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeInteger('ao_volume', 0); // Audio output volume: 1 - 100
        $this->RegisterAttributeBoolean('ao_volume_enabled', false); // show Attribute in Webfront

        $this->RegisterAttributeInteger('chn', 0); // 1st, 2nd or 3rd audio channel: 1, 2, 3
        $this->RegisterAttributeBoolean('chn_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeInteger('aeswitch_1', 0); // Audio encode switch on, off: 1, 0
        $this->RegisterAttributeBoolean('aeswitch_1_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeInteger('aeswitch_2', 0); // Audio encode switch on, off: 1, 0
        $this->RegisterAttributeBoolean('aeswitch_2_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeInteger('aeswitch_3', 0); // Audio encode switch on, off: 1, 0
        $this->RegisterAttributeBoolean('aeswitch_3_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeString('aeformat_1', 'g711a'); //  Audio encode format g711a: G711A 64Kbps, g726: G726 16Kbps
        $this->RegisterAttributeBoolean('aeformat_1_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeString('aeformat_2', 'g711a'); //  Audio encode format g711a: G711A 64Kbps, g726: G726 16Kbps
        $this->RegisterAttributeBoolean('aeformat_2_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeString('aeformat_3', 'g711a'); //  Audio encode format g711a: G711A 64Kbps, g726: G726 16Kbps
        $this->RegisterAttributeBoolean('aeformat_3_enabled', false); // show Attribute in Webfront

        $this->RegisterAttributeInteger('videomode', 41); //  Resolution CH11=1080p, CH12=320p, CH13=160p
        $this->RegisterAttributeBoolean('videomode_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeString('vinorm', 'P'); //  50Hz(PAL)
        $this->RegisterAttributeBoolean('vinorm_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeInteger('wdrmode', 0); //  Hardware Wide Dynamic Range: 0 (off), 1 (active)
        $this->RegisterAttributeBoolean('wdrmode_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeInteger('profile', 0); //  h.264 encoder 0: baseline, 1: mainprofile
        $this->RegisterAttributeBoolean('profile_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeInteger('maxchn', 0); //  Maximum active video channels
        $this->RegisterAttributeBoolean('maxchn_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeInteger(
            'bps_1', 2048
        ); //  Bitrate CH11 1080p = 512kbps - 4096kbps, Bitrate CH11 320p = 512kbps - 2048kbps, Bitrate CH11 160p = 90kbps - 512kbps
        $this->RegisterAttributeBoolean('bps_1_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeInteger(
            'bps_2', 2048
        ); //  Bitrate CH11 1080p = 512kbps - 4096kbps, Bitrate CH11 320p = 512kbps - 2048kbps, Bitrate CH11 160p = 90kbps - 512kbps
        $this->RegisterAttributeBoolean('bps_2_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeInteger(
            'bps_3', 2048
        ); //  Bitrate CH11 1080p = 512kbps - 4096kbps, Bitrate CH11 320p = 512kbps - 2048kbps, Bitrate CH11 160p = 90kbps - 512kbps
        $this->RegisterAttributeBoolean('bps_3_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeInteger('fps_1', 25); //  Framerate: PAL：Range [1 ~ 25], NTSC：Range [1 ~ 30]
        $this->RegisterAttributeBoolean('fps_1_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeInteger('fps_2', 25); //  Framerate: PAL：Range [1 ~ 25], NTSC：Range [1 ~ 30]
        $this->RegisterAttributeBoolean('fps_2_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeInteger('fps_3', 25); //  Framerate: PAL：Range [1 ~ 25], NTSC：Range [1 ~ 30]
        $this->RegisterAttributeBoolean('fps_3_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeInteger('gop_1', 40); //  Keyframe Interval: gop Range [10 ~ 150]
        $this->RegisterAttributeBoolean('gop_1_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeInteger('gop_2', 40); //  Keyframe Interval: gop Range [10 ~ 150]
        $this->RegisterAttributeBoolean('gop_2_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeInteger('gop_3', 40); //  Keyframe Interval: gop Range [10 ~ 150]
        $this->RegisterAttributeBoolean('gop_3_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeInteger('brmode_1', 1); //  Video encode control: 0: fixed bit rate, 1: changeable bit rate
        $this->RegisterAttributeBoolean('brmode_1_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeInteger('brmode_2', 1); //  Video encode control: 0: fixed bit rate, 1: changeable bit rate
        $this->RegisterAttributeBoolean('brmode_2_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeInteger('brmode_3', 1); //  Video encode control: 0: fixed bit rate, 1: changeable bit rate
        $this->RegisterAttributeBoolean('brmode_3_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeInteger('imagegrade_1', 1); //  1 (low compression) -6 (high compression)
        $this->RegisterAttributeBoolean('imagegrade_1_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeInteger('imagegrade_2', 1); //  1 (low compression) -6 (high compression)
        $this->RegisterAttributeBoolean('imagegrade_2_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeInteger('imagegrade_3', 1); //  1 (low compression) -6 (high compression)
        $this->RegisterAttributeBoolean('imagegrade_3_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeInteger('width_1', 1920); //  Video width
        $this->RegisterAttributeBoolean('width_1_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeInteger('width_2', 1920); //  Video width
        $this->RegisterAttributeBoolean('width_2_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeInteger('width_3', 1920); //  Video width
        $this->RegisterAttributeBoolean('width_3_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeInteger('height_1', 1080); //  Video height
        $this->RegisterAttributeBoolean('height_1_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeInteger('height_2', 1080); //  Video height
        $this->RegisterAttributeBoolean('height_2_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeInteger('height_3', 1080); //  Video height
        $this->RegisterAttributeBoolean('height_3_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeInteger('display_mode', 0); //  Current 0: black and white mode 1: color mode
        $this->RegisterAttributeBoolean('display_mode_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeInteger('brightness', 70); //  brightness [0-100]
        $this->RegisterAttributeBoolean('brightness_enabled', true); // show Attribute in Webfront
        $this->RegisterAttributeInteger('saturation', 150); //  saturation [0-255]
        $this->RegisterAttributeBoolean('saturation_enabled', true); // show Attribute in Webfront
        $this->RegisterAttributeInteger('sharpness', 70); //  sharpness [0-100]
        $this->RegisterAttributeBoolean('sharpness_enabled', true); // show Attribute in Webfront
        $this->RegisterAttributeInteger('contrast', 70); //  contrast [0-100]
        $this->RegisterAttributeBoolean('contrast_enabled', true); // show Attribute in Webfront
        $this->RegisterAttributeInteger('hue', 100); //  [0-255]
        $this->RegisterAttributeBoolean('hue_enabled', true); // show Attribute in Webfront
        $this->RegisterAttributeString('wdr', 'on'); //  Software Wide Dynamic Range Mode: [on, off]
        $this->RegisterAttributeBoolean('wdr_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeString('night', 'off'); //  Night mode 0 (inactive) off, 1 (active) on
        $this->RegisterAttributeBoolean('night_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeInteger('shutter', 0); //  Shutter Speed [0 - 65535]
        $this->RegisterAttributeBoolean('shutter_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeString('flip', 'on'); //  Flip the Image [on, off]
        $this->RegisterAttributeBoolean('flip_enabled', true); // show Attribute in Webfront
        $this->RegisterAttributeString('mirror', 'on'); // Mirror the Image [on, off]
        $this->RegisterAttributeBoolean('mirror_enabled', true); // show Attribute in Webfront
        $this->RegisterAttributeString('scene', 'auto'); // scene (auto , indoor , outdoor) sets the white balance mode
        $this->RegisterAttributeBoolean('scene_enabled', true); // show Attribute in Webfront
        $this->RegisterAttributeInteger('gc', 0); //  Night illumination, value Range 0=auto, [1-255]=manual
        $this->RegisterAttributeBoolean('gc_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeInteger('ae', 0); //  Minimum exposure, range 0-65535
        $this->RegisterAttributeBoolean('ae_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeInteger('targety', 0); //  Exposure [0-255]
        $this->RegisterAttributeBoolean('targety_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeInteger('noise', 0); //  Low light denoising intensity (0-100)
        $this->RegisterAttributeBoolean('noise_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeInteger('gamma', 0); //  Gamma 0-3
        $this->RegisterAttributeBoolean('gamma_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeInteger('aemode', 0); //  Auto-Exposure mode, the range: 0 Automatic, 1 Indoor, 2 Outdoor
        $this->RegisterAttributeBoolean('aemode_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeInteger('imgmode', 0); //  Image priority mode: 0: Frame rate priority, 1: Illumination priority
        $this->RegisterAttributeBoolean('imgmode_enabled', false); // show Attribute in Webfront

        $this->RegisterAttributeInteger('wdrauto', 0); //  Hardware Wide Dynamic Range 0 (Auto), 1 (Manual)
        $this->RegisterAttributeBoolean('wdrauto_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeInteger('wdrautval', 0); //  Auto WDR Strength [0-2]
        $this->RegisterAttributeBoolean('wdrautval_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeInteger('wdrmanval', 0); //  Manual WDR Strength [0-255]
        $this->RegisterAttributeBoolean('wdrmanval_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeInteger('d3noauto', 0); //  3D Noise Reduction Mode: 0 (auto), 1 (manual)
        $this->RegisterAttributeBoolean('d3noauto_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeInteger('d3noval', 0); //  3D Noise Reduction Strength: [0-255]
        $this->RegisterAttributeBoolean('d3noval_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeInteger('gcauto', 0); //  Signal Gain: 0 (auto), 1 (manual)
        $this->RegisterAttributeBoolean('gcauto_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeInteger('gcval', 0); //  Gain Multiplier: [0-255]
        $this->RegisterAttributeBoolean('gcval_enabled', false); // show Attribute in Webfront
        // TODO aemodeex String or Integer?
        $this->RegisterAttributeString('aemodeex', 'Highlight'); // Exposure Mode: Highlight (Exposure) priority, Lowlight (Framerate) priority
        $this->RegisterAttributeBoolean('aemodeex_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeInteger('aelowval', 0); //  Lowlight Intensity [0-255]
        $this->RegisterAttributeBoolean('aelowval_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeInteger('aehighval', 0); //  Highlight Intensity [0-255]
        $this->RegisterAttributeBoolean('aehighval_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeInteger('aeratio', 0); //  Length Exposure Ratio [0-100]
        $this->RegisterAttributeBoolean('aeratio_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeInteger('ldc_enable', 0); //  Image Distortion Correction: 0 (disabled), 1 (enabled)
        $this->RegisterAttributeBoolean('ldc_enable_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeInteger('ldc_xoffset', 0); //  Horizontal Image Offset
        $this->RegisterAttributeBoolean('ldc_xoffset_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeInteger('ldc_yoffset', 0); //  Vertical Image Offset
        $this->RegisterAttributeBoolean('ldc_yoffset_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeInteger('ldc_ratio', 0); //  Distortion Correction [0-511]
        $this->RegisterAttributeBoolean('ldc_ratio_enabled', false); // show Attribute in Webfront

        $this->RegisterAttributeInteger('region', 1); //  OSD time zone, 1: OSD Name region
        $this->RegisterAttributeBoolean('region_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeInteger('show_0_osd', 0); //  0 (hidden), 1 (displayed)
        $this->RegisterAttributeBoolean('show_0_osd_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeInteger('place_0_osd', 0); //  0: top, 1: bottom
        $this->RegisterAttributeBoolean('place_0_osd_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeInteger('x_0_osd', 0); //  OSD region x coordinate
        $this->RegisterAttributeBoolean('x_0_osd_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeInteger('y_0_osd', 0); // OSD region y coordinate
        $this->RegisterAttributeBoolean('y_0_osd_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeString('name_0_osd', ''); //  Region 0="YYYY-MM-DD hh:mm:ss", region="Camera Name"
        $this->RegisterAttributeBoolean('name_0_osd_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeInteger('show_1_osd', 0); //  0 (hidden), 1 (displayed)
        $this->RegisterAttributeBoolean('show_1_osd_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeInteger('place_1_osd', 0); //  0: top, 1: bottom
        $this->RegisterAttributeBoolean('place_1_osd_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeInteger('x_1_osd', 0); //  OSD region x coordinate
        $this->RegisterAttributeBoolean('x_1_osd_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeInteger('y_1_osd', 0); // OSD region y coordinate
        $this->RegisterAttributeBoolean('y_1_osd_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeString('name_1_osd', ''); //  Region 0="YYYY-MM-DD hh:mm:ss", region="Camera Name"
        $this->RegisterAttributeBoolean('name_1_osd_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeInteger('show_2_osd', 0); //  0 (hidden), 1 (displayed)
        $this->RegisterAttributeBoolean('show_2_osd_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeInteger('place_2_osd', 0); //  0: top, 1: bottom
        $this->RegisterAttributeBoolean('place_2_osd_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeInteger('x_2_osd', 0); //  OSD region x coordinate
        $this->RegisterAttributeBoolean('x_2_osd_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeInteger('y_2_osd', 0); // OSD region y coordinate
        $this->RegisterAttributeBoolean('y_2_osd_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeString('name_2_osd', ''); //  Region 0="YYYY-MM-DD hh:mm:ss", region="Camera Name"
        $this->RegisterAttributeBoolean('name_2_osd_enabled', false); // show Attribute in Webfront

        $this->RegisterAttributeInteger('privacy_region', 1); // Privacy Mask [1-4]
        $this->RegisterAttributeBoolean('privacy_region_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeInteger('show_1', 0); // [0, 1] De/Activate Mask
        $this->RegisterAttributeBoolean('show_1_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeInteger('show_2', 0); // [0, 1] De/Activate Mask
        $this->RegisterAttributeBoolean('show_2_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeInteger('show_3', 0); // [0, 1] De/Activate Mask
        $this->RegisterAttributeBoolean('show_3_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeInteger('show_4', 0); // [0, 1] De/Activate Mask
        $this->RegisterAttributeBoolean('show_4_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeString('color_1', "0"); // Color Hex
        $this->RegisterAttributeBoolean('color_1_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeString('color_2', "0"); // Color Hex
        $this->RegisterAttributeBoolean('color_2_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeString('color_3', "0"); // Color Hex
        $this->RegisterAttributeBoolean('color_3_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeString('color_4', "0"); // Color Hex
        $this->RegisterAttributeBoolean('color_4_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeInteger('x_1', 0); // X-Coordinate Origin [0-(1920-w)]
        $this->RegisterAttributeBoolean('x_1_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeInteger('x_2', 0); // X-Coordinate Origin [0-(1920-w)]
        $this->RegisterAttributeBoolean('x_2_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeInteger('x_3', 0); // X-Coordinate Origin [0-(1920-w)]
        $this->RegisterAttributeBoolean('x_3_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeInteger('x_4', 0); // X-Coordinate Origin [0-(1920-w)]
        $this->RegisterAttributeBoolean('x_4_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeInteger('y_1', 0); // Y-Coordinate Origin [0-(1080-h)]
        $this->RegisterAttributeBoolean('y_1_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeInteger('y_2', 0); // Y-Coordinate Origin [0-(1080-h)]
        $this->RegisterAttributeBoolean('y_2_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeInteger('y_3', 0); // Y-Coordinate Origin [0-(1080-h)]
        $this->RegisterAttributeBoolean('y_3_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeInteger('y_4', 0); // Y-Coordinate Origin [0-(1080-h)]
        $this->RegisterAttributeBoolean('y_4_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeInteger('w_1', 1); // Mask Width [1-1920] Pixel
        $this->RegisterAttributeBoolean('w_1_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeInteger('w_2', 1); // Mask Width [1-1920] Pixel
        $this->RegisterAttributeBoolean('w_2_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeInteger('w_3', 1); // Mask Width [1-1920] Pixel
        $this->RegisterAttributeBoolean('w_3_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeInteger('w_4', 1); // Mask Width [1-1920] Pixel
        $this->RegisterAttributeBoolean('w_4_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeInteger('h_1', 1); // Mask Height [1-1080] Pixel
        $this->RegisterAttributeBoolean('h_1_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeInteger('h_2', 1); // Mask Height [1-1080] Pixel
        $this->RegisterAttributeBoolean('h_2_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeInteger('h_3', 1); // Mask Height [1-1080] Pixel
        $this->RegisterAttributeBoolean('h_3_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeInteger('h_4', 1); // Mask Height [1-1080] Pixel
        $this->RegisterAttributeBoolean('h_4_enabled', false); // show Attribute in Webfront
        // Features
        $this->RegisterAttributeString('ma_server', ''); // SMTP Server Address e.g. smtp.strato.de
        $this->RegisterAttributeBoolean('ma_server_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeInteger('ma_port', 25); // SMTP Server Port e.g. 25, 587 (TLS) or 465 (SSL)
        $this->RegisterAttributeBoolean('ma_port_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeInteger('ma_ssl', 25); // SSL Encryption 0 (Disabled), 1 (SSL), 2 (TLS) or 3 (STARTTLS)
        $this->RegisterAttributeBoolean('ma_ssl_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeInteger('ma_logintype', 1); // Enable (1) or Disable (3) Authentication
        $this->RegisterAttributeBoolean('ma_logintype_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeString('ma_username', ''); // SMTP Server Username
        $this->RegisterAttributeBoolean('ma_username_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeString('ma_password', ''); // SMTP Server Password
        $this->RegisterAttributeBoolean('ma_password_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeString('ma_from', ''); // Sender Email Address
        $this->RegisterAttributeBoolean('ma_from_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeString('ma_to', ''); // Receiver Email Address
        $this->RegisterAttributeBoolean('ma_to_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeString('ma_subject', ''); // Mail Subject Line
        $this->RegisterAttributeBoolean('ma_subject_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeString('ma_text', ''); // Mail Content
        $this->RegisterAttributeBoolean('ma_text_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeString('ft_server', ''); // FTP Server Address
        $this->RegisterAttributeBoolean('ft_server_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeInteger('ft_port', 25); // FTP Server Port
        $this->RegisterAttributeBoolean('ft_port_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeString('ft_username', ''); // FTP Username
        $this->RegisterAttributeBoolean('ft_username_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeString('ft_password', ''); // FTP Password
        $this->RegisterAttributeBoolean('ft_password_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeInteger('ft_mode', 0); // FTP Mode Port (0) or Passive (1)
        $this->RegisterAttributeBoolean('ft_mode_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeString('ft_dirname', ''); // FTP Directory
        $this->RegisterAttributeBoolean('ft_dirname_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeInteger('ft_autocreatedir', 0); // Automatically create the directory 0 (no), 1 (yes)
        $this->RegisterAttributeBoolean('ft_autocreatedir_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeInteger('ft_dirmode', 0); // 0 (Create a new Folder every Day), 1 (All Files in One Directory)
        $this->RegisterAttributeBoolean('ft_dirmode_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeInteger('ft_ssl', 0); // FTPS Encryption - 0：None, 1：SSL, 2: TLS
        $this->RegisterAttributeBoolean('ft_ssl_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeString('infraredstat', ''); // IR LED Status - auto, close (deactivated)
        $this->RegisterAttributeBoolean('infraredstat_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeInteger('infraredstat_form', 0); // IR LED Status - auto, close (deactivated)
        $this->RegisterAttributeBoolean('infraredstat_form_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeInteger('infraredcut_form', 0); // IR Cut - auto, day , night
        $this->RegisterAttributeBoolean('infraredcut_form_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeInteger('plancgi_enable_0_ir', 0);
        $this->RegisterAttributeInteger('plancgi_time_0_ir', 0);
        $this->RegisterAttributeInteger('plancgi_enable_1_ir', 0);
        $this->RegisterAttributeInteger('plancgi_time_1_ir', 0);
        $this->RegisterAttributeInteger('plancgi_enable_2_ir', 0);
        $this->RegisterAttributeInteger('plancgi_time_2_ir', 0);
        $this->RegisterAttributeInteger('plancgi_enable_3_ir', 0);
        $this->RegisterAttributeInteger('plancgi_time_3_ir', 0);
        $this->RegisterAttributeInteger('plancgi_enable_4_ir', 0);
        $this->RegisterAttributeInteger('plancgi_time_4_ir', 0);
        $this->RegisterAttributeInteger('plancgi_enable_5_ir', 0);
        $this->RegisterAttributeInteger('plancgi_time_5_ir', 0);
        $this->RegisterAttributeInteger('plancgi_enable_6_ir', 0);
        $this->RegisterAttributeInteger('plancgi_time_6_ir', 0);
        $this->RegisterAttributeInteger('plancgi_enable_7_ir', 0);
        $this->RegisterAttributeInteger('plancgi_time_7_ir', 0);
        $this->RegisterAttributeInteger('plancgi_enable_8_ir', 0);
        $this->RegisterAttributeInteger('plancgi_time_8_ir', 0);
        $this->RegisterAttributeInteger('plancgi_enable_9_ir', 0);
        $this->RegisterAttributeInteger('plancgi_time_9_ir', 0);
        $this->RegisterAttributeInteger('plancgi_enable_10_ir', 0);
        $this->RegisterAttributeInteger('plancgi_time_10_ir', 0);
        $this->RegisterAttributeInteger('plancgi_enable_11_ir', 0);
        $this->RegisterAttributeInteger('plancgi_time_11_ir', 0);
        $this->RegisterAttributeInteger('plancgi_enable_12_ir', 0);
        $this->RegisterAttributeInteger('plancgi_time_12_ir', 0);
        $this->RegisterAttributeInteger('plancgi_enable_13_ir', 0);
        $this->RegisterAttributeInteger('plancgi_time_13_ir', 0);
        $this->RegisterAttributeInteger('plancgi_enable_14_ir', 0);
        $this->RegisterAttributeInteger('plancgi_time_14_ir', 0);
        $this->RegisterAttributeInteger('plancgi_enable_15_ir', 0);
        $this->RegisterAttributeInteger('plancgi_time_15_ir', 0);
        $this->RegisterAttributeInteger('plancgi_enable_16_ir', 0);
        $this->RegisterAttributeInteger('plancgi_time_16_ir', 0);
        $this->RegisterAttributeInteger('plancgi_enable_17_ir', 0);
        $this->RegisterAttributeInteger('plancgi_time_17_ir', 0);
        $this->RegisterAttributeInteger('plancgi_enable_18_ir', 0);
        $this->RegisterAttributeInteger('plancgi_time_18_ir', 0);
        $this->RegisterAttributeInteger('plancgi_enable_19_ir', 0);
        $this->RegisterAttributeInteger('plancgi_time_19_ir', 0);
        $this->RegisterAttributeInteger('start_position_activate_action', 0);
        $this->RegisterAttributeBoolean('start_position_activate_action_enabled', false);
        $this->RegisterAttributeInteger('start_position_select_action', 0);
        $this->RegisterAttributeBoolean('start_position_select_action_enabled', false);
        $this->RegisterAttributeString('ptzrfmask', "");
        $this->RegisterAttributeBoolean('ptzrfmask_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeInteger('panspeed', 0); // fast (0) - slow (2)
        $this->RegisterAttributeBoolean('panspeed_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeInteger('tiltspeed', 0); // fast (0) - slow (2)
        $this->RegisterAttributeBoolean('tiltspeed_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeInteger('panscan', 1); // [1-50] - Number of hscans
        $this->RegisterAttributeBoolean('panscan_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeInteger('tiltscan', 1); // [1-50] - Number of vscans
        $this->RegisterAttributeBoolean('tiltscan_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeString('movehome', 'on'); // [on, off] - Go to Center or Postion [initpresetindex] after Restart
        $this->RegisterAttributeBoolean('movehome_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeString('ptzalarmmask', 'on'); // [on, off] - Deactivate Motion Detection during Pan&Tilt
        $this->RegisterAttributeBoolean('ptzalarmmask_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeString('selfdet', ''); // De/Activate Calibration (Required for Preset Postions and PTZ Tour)
        $this->RegisterAttributeBoolean('selfdet_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeInteger('alarmpresetindex', 0); // [1-8]; - Alarmposition
        $this->RegisterAttributeBoolean('alarmpresetindex_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeInteger('initpresetindex', 0); // [1-8]; - Position Camera goes to after Restart
        $this->RegisterAttributeBoolean('initpresetindex_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeInteger('md_preset_switch_position', 0); // Go to [alarmpresetindex] (Alarm Position) at Alarm Event - [on, off]
        $this->RegisterAttributeBoolean('md_preset_switch_position_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeString('md_preset_switch', 'on'); // Go to [alarmpresetindex] (Alarm Position) at Alarm Event - [on, off]
        $this->RegisterAttributeBoolean('md_preset_switch_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeInteger('timerpreset_enable', 0); // De/Activate Park Position - [0, 1]
        $this->RegisterAttributeBoolean('timerpreset_enable_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeInteger('timerpreset_index', 1); // Select Park Position - [1 - 8]
        $this->RegisterAttributeBoolean('timerpreset_index_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeInteger('timerpreset_interval', 30); // Time before going back to Park Position in seconds - [30 - 900]
        $this->RegisterAttributeBoolean('timerpreset_interval_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeInteger('tour_parkposition', 0); // Enable Tour Park Position
        $this->RegisterAttributeBoolean('tour_parkposition_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeInteger('admin_value46', 0); // De/Activate One-Step Pan&Tilt Control - [0, 1]
        $this->RegisterAttributeBoolean('admin_value46_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeInteger('tour_enable', 0); // De/Activate PTZ Tour [0, 1]
        $this->RegisterAttributeBoolean('tour_enable_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeInteger('tour_times', 1); // Number of Rounds [1 - 50]
        $this->RegisterAttributeBoolean('tour_times_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeString('tour_index', ''); // Set Tour Positions to Preset Position [1-8] / [-1] to deactivate Tour Position
        $this->RegisterAttributeBoolean('tour_index_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeString('tour_interval', ''); // Set Pause when Tour Position is reached in seconds [60-43200]
        $this->RegisterAttributeBoolean('tour_interval_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeInteger('ptz_tour_time', 1); // Time in Seconds
        $this->RegisterAttributeBoolean('ptz_tour_time_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeString('light1_enable', 'on'); // WiFi Status LED - [on, off]
        $this->RegisterAttributeBoolean('light1_enable_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeString('light2_enable', 'on'); // Power LED - [on, off]
        $this->RegisterAttributeBoolean('light2_enable_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeInteger('admin_value44', 44); // Recording Length in Seconds [60 - 3600] / Set [0] to Deactivate File Splitting
        $this->RegisterAttributeBoolean('admin_value44_enabled', false); // show Attribute in Webfront
        // Alarm Menu
        $this->RegisterAttributeString('md_emailsnap_switch', 'on'); // E-mail Alarm / Send Snapshot
        $this->RegisterAttributeBoolean('md_emailsnap_switch_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeString('md_snap_switch', 'on'); // Save Snapshot to SD
        $this->RegisterAttributeBoolean('md_snap_switch_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeString('md_record_switch', 'on'); //
        $this->RegisterAttributeBoolean('md_record_switch_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeString('md_ftprec_switch', 'on'); //
        $this->RegisterAttributeBoolean('md_ftprec_switch_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeString('md_relay_switch', 'on'); //
        $this->RegisterAttributeBoolean('md_relay_switch_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeString('md_ftpsnap_switch', 'on'); //
        $this->RegisterAttributeBoolean('md_ftpsnap_switch_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeString('md_sound_switch', 'on'); //
        $this->RegisterAttributeBoolean('md_sound_switch_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeString('md_alarm_type', 'on'); //
        $this->RegisterAttributeBoolean('md_alarm_type_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeString(
            'admin_value31', ''
        ); // [FTP Server];[FTP User Name];[FTP User Password];[FTP Mode];[FTP Directory];[Auto Create Directory];[FTP Directory Mode];[FTP SSL]", e.g "192.168.178.1;21;ftpuser;1234;1;./Kamera;1;0;0
        $this->RegisterAttributeInteger('FTP_Mode', 0);
        $this->RegisterAttributeBoolean('FTP_Mode_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeString('FTP_Directory', '');
        $this->RegisterAttributeBoolean('FTP_Directory_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeInteger('Auto_Create_Directory', 0);
        $this->RegisterAttributeBoolean('Auto_Create_Directory_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeString('ftprec', 'on'); // Send Video to FTP Server
        $this->RegisterAttributeBoolean('ftprec_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeString('relay', 'on'); // Alarm Out Relay
        $this->RegisterAttributeBoolean('relay_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeString('ftpsnap', 'on'); // Send Snapshot to FTP Server
        $this->RegisterAttributeBoolean('ftpsnap_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeString('sound', 'on'); // Audio Alarm Signal
        $this->RegisterAttributeBoolean('sound_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeString('type', 'on'); // Link Alarm Areas and Alarm-Input
        $this->RegisterAttributeBoolean('type_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeInteger('aa_enable', 0); // De/Activate Audio Detection [0, 1]
        $this->RegisterAttributeBoolean('aa_enable_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeInteger('aa_value', 10); // Sensitivity [10 - 100]
        $this->RegisterAttributeBoolean('aa_value_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeInteger('aa_time', 0); // Minimum Audio Signal Length Threshold [0 - 10]
        $this->RegisterAttributeBoolean('aa_time_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeInteger('io_enable', 0); // De/Activate Alarm Input [0, 1]
        $this->RegisterAttributeBoolean('io_enable_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeInteger('io_flag', 0); // Circuit Nomally Closed N.C. [0] or Normally Open N.O. [1]
        $this->RegisterAttributeBoolean('io_flag_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeInteger('pir_enable', 0); // De/Activate PIR Sensor [0, 1]
        $this->RegisterAttributeBoolean('pir_enable_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeInteger('pir_flag', 0); // Circuit Nomally Closed N.C. [0] or Normally Open N.O. [1]
        $this->RegisterAttributeBoolean('pir_flag_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeInteger('snap_chn', 11); // Set Snapshot Resolution to Video Channel [11, 12, 13]
        $this->RegisterAttributeBoolean('snap_chn_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeString('snap_name', ''); // Fixed File Name for All Alarm Snapshots (leave empty for auto-name by time stamp)
        $this->RegisterAttributeBoolean('snap_name_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeString(
            'snap_timer_name', ''
        ); // Fixed File Name for All Photoseries Snapshots (leave empty for auto-name by time stamp)
        $this->RegisterAttributeBoolean('snap_timer_name_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeInteger(
            'snap_name_mode', 0
        ); // Set Filename to [0] time stamp, or [1] fixed file name set snapname and snaptimer_name
        $this->RegisterAttributeBoolean('snap_name_mode_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeInteger('snap_count', 1); // Number of Snapshot saved to SD Card per Alarm Event [1-15]
        $this->RegisterAttributeBoolean('snap_count_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeInteger('ftp_snap_count', 1); // Number of Snapshot send to FTP Server per Alarm Event [1-15]
        $this->RegisterAttributeBoolean('ftp_snap_count_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeInteger('email_snap_count', 1); // Number of Snapshot send by Email per Alarm Event [1-15]
        $this->RegisterAttributeBoolean('email_snap_count_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeInteger('admin17', 17); // admin17
        $this->RegisterAttributeBoolean('admin17_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeInteger('m1_enable', 0); // Dis/Enable Alarm Detection Area 1 - 4: [0, 1]
        $this->RegisterAttributeBoolean('m1_enable_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeInteger('m2_enable', 0); // Dis/Enable Alarm Detection Area 1 - 4: [0, 1]
        $this->RegisterAttributeBoolean('m2_enable_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeInteger('m3_enable', 0); // Dis/Enable Alarm Detection Area 1 - 4: [0, 1]
        $this->RegisterAttributeBoolean('m3_enable_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeInteger('m4_enable', 0); // Dis/Enable Alarm Detection Area 1 - 4: [0, 1]
        $this->RegisterAttributeBoolean('m4_enable_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeInteger('m1_x', 0); // X-Axis Offset of Alarm Area Origin [0-(1920-w)]
        $this->RegisterAttributeBoolean('m1_x_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeInteger('m2_x', 0); // X-Axis Offset of Alarm Area Origin [0-(1920-w)]
        $this->RegisterAttributeBoolean('m2_x_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeInteger('m3_x', 0); // X-Axis Offset of Alarm Area Origin [0-(1920-w)]
        $this->RegisterAttributeBoolean('m3_x_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeInteger('m4_x', 0); // X-Axis Offset of Alarm Area Origin [0-(1920-w)]
        $this->RegisterAttributeBoolean('m4_x_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeInteger('m1_y', 0); // Y-Axis Offset of Alarm Area Origin [0-(1080-h)]
        $this->RegisterAttributeBoolean('m1_y_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeInteger('m2_y', 0); // Y-Axis Offset of Alarm Area Origin [0-(1080-h)]
        $this->RegisterAttributeBoolean('m2_y_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeInteger('m3_y', 0); // Y-Axis Offset of Alarm Area Origin [0-(1080-h)]
        $this->RegisterAttributeBoolean('m3_y_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeInteger('m4_y', 0); // Y-Axis Offset of Alarm Area Origin [0-(1080-h)]
        $this->RegisterAttributeBoolean('m4_y_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeInteger('m1_w', 0); // Alarm Area Width [1-1920] Pixel
        $this->RegisterAttributeBoolean('m1_w_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeInteger('m2_w', 0); // Alarm Area Width [1-1920] Pixel
        $this->RegisterAttributeBoolean('m2_w_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeInteger('m3_w', 0); // Alarm Area Width [1-1920] Pixel
        $this->RegisterAttributeBoolean('m3_w_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeInteger('m4_w', 0); // Alarm Area Width [1-1920] Pixel
        $this->RegisterAttributeBoolean('m4_w_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeInteger('m1_h', 0); // Alarm Area Height [1-1080] Pixel
        $this->RegisterAttributeBoolean('m1_h_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeInteger('m2_h', 0); // Alarm Area Height [1-1080] Pixel
        $this->RegisterAttributeBoolean('m2_h_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeInteger('m3_h', 0); // Alarm Area Height [1-1080] Pixel
        $this->RegisterAttributeBoolean('m3_h_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeInteger('m4_h', 0); // Alarm Area Height [1-1080] Pixel
        $this->RegisterAttributeBoolean('m4_h_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeInteger('m1_sensitivity', 0); // Detection Sensitivity [1 - 100]
        $this->RegisterAttributeBoolean('m1_sensitivity_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeInteger('m2_sensitivity', 0); // Detection Sensitivity [1 - 100]
        $this->RegisterAttributeBoolean('m2_sensitivity_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeInteger('m3_sensitivity', 0); // Detection Sensitivity [1 - 100]
        $this->RegisterAttributeBoolean('m3_sensitivity_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeInteger('m4_sensitivity', 0); // Detection Sensitivity [1 - 100]
        $this->RegisterAttributeBoolean('m4_sensitivity_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeInteger('m1_threshold', 0); // Detection Threshold (not active)
        $this->RegisterAttributeBoolean('m1_threshold_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeInteger('m2_threshold', 0); // Detection Threshold (not active)
        $this->RegisterAttributeBoolean('m2_threshold_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeInteger('m3_threshold', 0); // Detection Threshold (not active)
        $this->RegisterAttributeBoolean('m3_threshold_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeInteger('m4_threshold', 0); // Detection Threshold (not active)
        $this->RegisterAttributeBoolean('m4_threshold_enabled', false); // show Attribute in Webfront

        $this->RegisterAttributeInteger('etm_as', 0); // Detection Threshold (not active)
        $this->RegisterAttributeBoolean('etm_as_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeString(
            'week0_as', 'NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN'
        ); // Sunday：every 24 hrs divide to half hr is a segment , use P or N to indicate if the alarm is active - [P] means active , [N] means inactive
        $this->RegisterAttributeBoolean('week0_as_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeString(
            'week1_as', 'NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN'
        ); // Sunday：every 24 hrs divide to half hr is a segment , use P or N to indicate if the alarm is active - [P] means active , [N] means inactive
        $this->RegisterAttributeBoolean('week1_as_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeString(
            'week2_as', 'NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN'
        ); // Sunday：every 24 hrs divide to half hr is a segment , use P or N to indicate if the alarm is active - [P] means active , [N] means inactive
        $this->RegisterAttributeBoolean('week2_as_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeString(
            'week3_as', 'NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN'
        ); // Sunday：every 24 hrs divide to half hr is a segment , use P or N to indicate if the alarm is active - [P] means active , [N] means inactive
        $this->RegisterAttributeBoolean('week3_as_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeString(
            'week4_as', 'NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN'
        ); // Sunday：every 24 hrs divide to half hr is a segment , use P or N to indicate if the alarm is active - [P] means active , [N] means inactive
        $this->RegisterAttributeBoolean('week4_as_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeString(
            'week5_as', 'NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN'
        ); // Sunday：every 24 hrs divide to half hr is a segment , use P or N to indicate if the alarm is active - [P] means active , [N] means inactive
        $this->RegisterAttributeBoolean('week5_as_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeString(
            'week6_as', 'NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN'
        ); // Sunday：every 24 hrs divide to half hr is a segment , use P or N to indicate if the alarm is active - [P] means active , [N] means inactive
        $this->RegisterAttributeBoolean('week6_as_enabled', false); // show Attribute in Webfront

        $this->RegisterAttributeInteger('etm_network', 0); // Detection Threshold (not active)
        $this->RegisterAttributeBoolean('etm_network_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeString(
            'week0_network', 'NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN'
        ); // Sunday：every 24 hrs divide to half hr is a segment , use P or N to indicate if the alarm is active - [P] means active , [N] means inactive
        $this->RegisterAttributeBoolean('week0_network_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeString(
            'week1_network', 'NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN'
        ); // Sunday：every 24 hrs divide to half hr is a segment , use P or N to indicate if the alarm is active - [P] means active , [N] means inactive
        $this->RegisterAttributeBoolean('week1_network_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeString(
            'week2_network', 'NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN'
        ); // Sunday：every 24 hrs divide to half hr is a segment , use P or N to indicate if the alarm is active - [P] means active , [N] means inactive
        $this->RegisterAttributeBoolean('week2_network_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeString(
            'week3_network', 'NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN'
        ); // Sunday：every 24 hrs divide to half hr is a segment , use P or N to indicate if the alarm is active - [P] means active , [N] means inactive
        $this->RegisterAttributeBoolean('week3_network_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeString(
            'week4_network', 'NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN'
        ); // Sunday：every 24 hrs divide to half hr is a segment , use P or N to indicate if the alarm is active - [P] means active , [N] means inactive
        $this->RegisterAttributeBoolean('week4_network_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeString(
            'week5_network', 'NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN'
        ); // Sunday：every 24 hrs divide to half hr is a segment , use P or N to indicate if the alarm is active - [P] means active , [N] means inactive
        $this->RegisterAttributeBoolean('week5_network_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeString(
            'week6_network', 'NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN'
        ); // Sunday：every 24 hrs divide to half hr is a segment , use P or N to indicate if the alarm is active - [P] means active , [N] means inactive
        $this->RegisterAttributeBoolean('week6_network_enabled', false); // show Attribute in Webfront

        $this->RegisterAttributeInteger('etm_time', 0); // Detection Threshold (not active)
        $this->RegisterAttributeBoolean('etm_time_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeString(
            'week0_time', 'NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN'
        ); // Sunday：every 24 hrs divide to half hr is a segment , use P or N to indicate if the alarm is active - [P] means active , [N] means inactive
        $this->RegisterAttributeBoolean('week0_time_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeString(
            'week1_time', 'NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN'
        ); // Sunday：every 24 hrs divide to half hr is a segment , use P or N to indicate if the alarm is active - [P] means active , [N] means inactive
        $this->RegisterAttributeBoolean('week1_time_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeString(
            'week2_time', 'NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN'
        ); // Sunday：every 24 hrs divide to half hr is a segment , use P or N to indicate if the alarm is active - [P] means active , [N] means inactive
        $this->RegisterAttributeBoolean('week2_time_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeString(
            'week3_time', 'NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN'
        ); // Sunday：every 24 hrs divide to half hr is a segment , use P or N to indicate if the alarm is active - [P] means active , [N] means inactive
        $this->RegisterAttributeBoolean('week3_time_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeString(
            'week4_time', 'NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN'
        ); // Sunday：every 24 hrs divide to half hr is a segment , use P or N to indicate if the alarm is active - [P] means active , [N] means inactive
        $this->RegisterAttributeBoolean('week4_time_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeString(
            'week5_time', 'NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN'
        ); // Sunday：every 24 hrs divide to half hr is a segment , use P or N to indicate if the alarm is active - [P] means active , [N] means inactive
        $this->RegisterAttributeBoolean('week5_time_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeString(
            'week6_time', 'NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN'
        ); // Sunday：every 24 hrs divide to half hr is a segment , use P or N to indicate if the alarm is active - [P] means active , [N] means inactive
        $this->RegisterAttributeBoolean('week6_time_enabled', false); // show Attribute in Webfront

        $this->RegisterAttributeInteger('etm_record', 0); // Detection Threshold (not active)
        $this->RegisterAttributeBoolean('etm_record_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeString(
            'week0_record', 'NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN'
        ); // Sunday：every 24 hrs divide to half hr is a segment , use P or N to indicate if the alarm is active - [P] means active , [N] means inactive
        $this->RegisterAttributeBoolean('week0_record_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeString(
            'week1_record', 'NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN'
        ); // Sunday：every 24 hrs divide to half hr is a segment , use P or N to indicate if the alarm is active - [P] means active , [N] means inactive
        $this->RegisterAttributeBoolean('week1_record_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeString(
            'week2_record', 'NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN'
        ); // Sunday：every 24 hrs divide to half hr is a segment , use P or N to indicate if the alarm is active - [P] means active , [N] means inactive
        $this->RegisterAttributeBoolean('week2_record_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeString(
            'week3_record', 'NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN'
        ); // Sunday：every 24 hrs divide to half hr is a segment , use P or N to indicate if the alarm is active - [P] means active , [N] means inactive
        $this->RegisterAttributeBoolean('week3_record_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeString(
            'week4_record', 'NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN'
        ); // Sunday：every 24 hrs divide to half hr is a segment , use P or N to indicate if the alarm is active - [P] means active , [N] means inactive
        $this->RegisterAttributeBoolean('week4_record_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeString(
            'week5_record', 'NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN'
        ); // Sunday：every 24 hrs divide to half hr is a segment , use P or N to indicate if the alarm is active - [P] means active , [N] means inactive
        $this->RegisterAttributeBoolean('week5_record_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeString(
            'week6_record', 'NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN'
        ); // Sunday：every 24 hrs divide to half hr is a segment , use P or N to indicate if the alarm is active - [P] means active , [N] means inactive
        $this->RegisterAttributeBoolean('week6_record_enabled', false); // show Attribute in Webfront

        $this->RegisterAttributeInteger('etm_snapshot', 0); // Detection Threshold (not active)
        $this->RegisterAttributeBoolean('etm_snapshot_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeString(
            'week0_snapshot', 'NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN'
        ); // Sunday：every 24 hrs divide to half hr is a segment , use P or N to indicate if the alarm is active - [P] means active , [N] means inactive
        $this->RegisterAttributeBoolean('week0_snapshot_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeString(
            'week1_snapshot', 'NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN'
        ); // Sunday：every 24 hrs divide to half hr is a segment , use P or N to indicate if the alarm is active - [P] means active , [N] means inactive
        $this->RegisterAttributeBoolean('week1_snapshot_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeString(
            'week2_snapshot', 'NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN'
        ); // Sunday：every 24 hrs divide to half hr is a segment , use P or N to indicate if the alarm is active - [P] means active , [N] means inactive
        $this->RegisterAttributeBoolean('week2_snapshot_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeString(
            'week3_snapshot', 'NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN'
        ); // Sunday：every 24 hrs divide to half hr is a segment , use P or N to indicate if the alarm is active - [P] means active , [N] means inactive
        $this->RegisterAttributeBoolean('week3_snapshot_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeString(
            'week4_snapshot', 'NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN'
        ); // Sunday：every 24 hrs divide to half hr is a segment , use P or N to indicate if the alarm is active - [P] means active , [N] means inactive
        $this->RegisterAttributeBoolean('week4_snapshot_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeString(
            'week5_snapshot', 'NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN'
        ); // Sunday：every 24 hrs divide to half hr is a segment , use P or N to indicate if the alarm is active - [P] means active , [N] means inactive
        $this->RegisterAttributeBoolean('week5_snapshot_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeString(
            'week6_snapshot', 'NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN'
        ); // Sunday：every 24 hrs divide to half hr is a segment , use P or N to indicate if the alarm is active - [P] means active , [N] means inactive
        $this->RegisterAttributeBoolean('week6_snapshot_enabled', false); // show Attribute in Webfront

        $this->RegisterAttributeInteger(
            'plancgi_enable_0', 0
        ); // De/Activate Switch Event at Time - [0 - 86399] in seconds = 0:00:00 - 23:59:59 o´clock
        $this->RegisterAttributeBoolean('plancgi_enable_0_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeInteger(
            'plancgi_enable_1', 0
        ); // De/Activate Switch Event at Time - [0 - 86399] in seconds = 0:00:00 - 23:59:59 o´clock
        $this->RegisterAttributeBoolean('plancgi_enable_1_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeInteger(
            'plancgi_enable_2', 0
        ); // De/Activate Switch Event at Time - [0 - 86399] in seconds = 0:00:00 - 23:59:59 o´clock
        $this->RegisterAttributeBoolean('plancgi_enable_2_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeInteger(
            'plancgi_enable_3', 0
        ); // De/Activate Switch Event at Time - [0 - 86399] in seconds = 0:00:00 - 23:59:59 o´clock
        $this->RegisterAttributeBoolean('plancgi_enable_3_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeInteger(
            'plancgi_enable_4', 0
        ); // De/Activate Switch Event at Time - [0 - 86399] in seconds = 0:00:00 - 23:59:59 o´clock
        $this->RegisterAttributeBoolean('plancgi_enable_4_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeInteger(
            'plancgi_enable_5', 0
        ); // De/Activate Switch Event at Time - [0 - 86399] in seconds = 0:00:00 - 23:59:59 o´clock
        $this->RegisterAttributeBoolean('plancgi_enable_5_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeInteger(
            'plancgi_enable_6', 0
        ); // De/Activate Switch Event at Time - [0 - 86399] in seconds = 0:00:00 - 23:59:59 o´clock
        $this->RegisterAttributeBoolean('plancgi_enable_6_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeInteger(
            'plancgi_enable_7', 0
        ); // De/Activate Switch Event at Time - [0 - 86399] in seconds = 0:00:00 - 23:59:59 o´clock
        $this->RegisterAttributeBoolean('plancgi_enable_7_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeInteger(
            'plancgi_enable_8', 0
        ); // De/Activate Switch Event at Time - [0 - 86399] in seconds = 0:00:00 - 23:59:59 o´clock
        $this->RegisterAttributeBoolean('plancgi_enable_8_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeInteger(
            'plancgi_enable_9', 0
        ); // De/Activate Switch Event at Time - [0 - 86399] in seconds = 0:00:00 - 23:59:59 o´clock
        $this->RegisterAttributeBoolean('plancgi_enable_9_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeInteger(
            'plancgi_enable_10', 0
        ); // De/Activate Switch Event at Time - [0 - 86399] in seconds = 0:00:00 - 23:59:59 o´clock
        $this->RegisterAttributeBoolean('plancgi_enable_10_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeInteger(
            'plancgi_enable_11', 0
        ); // De/Activate Switch Event at Time - [0 - 86399] in seconds = 0:00:00 - 23:59:59 o´clock
        $this->RegisterAttributeBoolean('plancgi_enable_11_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeInteger(
            'plancgi_enable_12', 0
        ); // De/Activate Switch Event at Time - [0 - 86399] in seconds = 0:00:00 - 23:59:59 o´clock
        $this->RegisterAttributeBoolean('plancgi_enable_12_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeInteger(
            'plancgi_enable_13', 0
        ); // De/Activate Switch Event at Time - [0 - 86399] in seconds = 0:00:00 - 23:59:59 o´clock
        $this->RegisterAttributeBoolean('plancgi_enable_13_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeInteger(
            'plancgi_enable_14', 0
        ); // De/Activate Switch Event at Time - [0 - 86399] in seconds = 0:00:00 - 23:59:59 o´clock
        $this->RegisterAttributeBoolean('plancgi_enable_14_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeInteger(
            'plancgi_enable_15', 0
        ); // De/Activate Switch Event at Time - [0 - 86399] in seconds = 0:00:00 - 23:59:59 o´clock
        $this->RegisterAttributeBoolean('plancgi_enable_15_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeInteger(
            'plancgi_enable_16', 0
        ); // De/Activate Switch Event at Time - [0 - 86399] in seconds = 0:00:00 - 23:59:59 o´clock
        $this->RegisterAttributeBoolean('plancgi_enable_16_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeInteger(
            'plancgi_enable_17', 0
        ); // De/Activate Switch Event at Time - [0 - 86399] in seconds = 0:00:00 - 23:59:59 o´clock
        $this->RegisterAttributeBoolean('plancgi_enable_17_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeInteger(
            'plancgi_enable_18', 0
        ); // De/Activate Switch Event at Time - [0 - 86399] in seconds = 0:00:00 - 23:59:59 o´clock
        $this->RegisterAttributeBoolean('plancgi_enable_18_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeInteger(
            'plancgi_enable_19', 0
        ); // De/Activate Switch Event at Time - [0 - 86399] in seconds = 0:00:00 - 23:59:59 o´clock
        $this->RegisterAttributeBoolean('plancgi_enable_19_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeInteger('plancgi_time_0', 0);
        $this->RegisterAttributeInteger('plancgi_time_1', 0);
        $this->RegisterAttributeInteger('plancgi_time_2', 0);
        $this->RegisterAttributeInteger('plancgi_time_3', 0);
        $this->RegisterAttributeInteger('plancgi_time_4', 0);
        $this->RegisterAttributeInteger('plancgi_time_5', 0);
        $this->RegisterAttributeInteger('plancgi_time_6', 0);
        $this->RegisterAttributeInteger('plancgi_time_7', 0);
        $this->RegisterAttributeInteger('plancgi_time_8', 0);
        $this->RegisterAttributeInteger('plancgi_time_9', 0);
        $this->RegisterAttributeInteger('plancgi_time_10', 0);
        $this->RegisterAttributeInteger('plancgi_time_11', 0);
        $this->RegisterAttributeInteger('plancgi_time_12', 0);
        $this->RegisterAttributeInteger('plancgi_time_13', 0);
        $this->RegisterAttributeInteger('plancgi_time_14', 0);
        $this->RegisterAttributeInteger('plancgi_time_15', 0);
        $this->RegisterAttributeInteger('plancgi_time_16', 0);
        $this->RegisterAttributeInteger('plancgi_time_17', 0);
        $this->RegisterAttributeInteger('plancgi_time_18', 0);
        $this->RegisterAttributeInteger('plancgi_time_19', 0);
        $this->RegisterAttributeString('as_server', ''); // Address of the receiving Server (e.g. Home Automation Server) [IPv4 Address]
        $this->RegisterAttributeBoolean('as_server_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeInteger('as_port', 0); // Port of the receiving Server [1-65536]
        $this->RegisterAttributeBoolean('as_port_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeInteger('as_auth', 0); // Authentication required [0, 1]
        $this->RegisterAttributeBoolean('as_auth_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeString('as_username', ''); // Alarmserver Username
        $this->RegisterAttributeBoolean('as_username_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeString('as_password', ''); // Alarmserver Password
        $this->RegisterAttributeBoolean('as_password_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeString('as_path', ''); // URL Path
        $this->RegisterAttributeBoolean('as_path_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeInteger('as_area', 1); // Send Query when Motion is Detected
        $this->RegisterAttributeBoolean('as_area_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeInteger('as_io', 1); // Send Query when Alarm Input is Triggered
        $this->RegisterAttributeBoolean('as_io_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeInteger('as_audio', 1); // Send Query when Audio Alarm is Triggered
        $this->RegisterAttributeBoolean('as_audio_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeInteger('as_areaio', 1); // Send Query when Motion is Detected and Input is Triggered
        $this->RegisterAttributeBoolean('as_areaio_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeInteger('as_activequery', 1); // Append Alarm Trigger to Query
        $this->RegisterAttributeBoolean('as_activequery_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeInteger('as_query1', 0); // Activate Sending optional Parameter 1
        $this->RegisterAttributeBoolean('as_query1_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeString('as_queryattr1', ''); // Command 1 Attribute
        $this->RegisterAttributeBoolean('as_queryattr1_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeString('as_queryval1', ''); // Command 1 Value
        $this->RegisterAttributeBoolean('as_queryval1_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeInteger('as_query2', 0); // Activate Sending optional Parameter 2
        $this->RegisterAttributeBoolean('as_query2_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeString('as_queryattr2', ''); // Command 2 Attribute
        $this->RegisterAttributeBoolean('as_queryattr2_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeString('as_queryval2', ''); // Command 2 Value
        $this->RegisterAttributeBoolean('as_queryval2_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeInteger('as_query3', 0); // Activate Sending optional Parameter 3
        $this->RegisterAttributeBoolean('as_query3_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeString('as_queryattr3', ''); // Command 3 Attribute
        $this->RegisterAttributeBoolean('as_queryattr3_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeString('as_queryval3', ''); // Command 3 Value
        $this->RegisterAttributeBoolean('as_queryval3_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeInteger('alarmserver', 0); // Alarmserver  0 choose, 1 IP-Symcon connect, 2 local network
        $this->RegisterAttributeBoolean('alarmserver_enabled', false); // show Attribute in Webfront

        $this->RegisterAttributeString('as_server_0', ''); // Address of the receiving Server (e.g. Home Automation Server) [IPv4 Address]
        $this->RegisterAttributeBoolean('as_server_0_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeInteger('as_port_0', 0); // Port of the receiving Server [1-65536]
        $this->RegisterAttributeBoolean('as_port_0_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeInteger('as_auth_0', 0); // Authentication required [0, 1]
        $this->RegisterAttributeBoolean('as_auth_0_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeString('as_username_0', ''); // Alarmserver Username
        $this->RegisterAttributeBoolean('as_username_0_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeString('as_password_0', ''); // Alarmserver Password
        $this->RegisterAttributeBoolean('as_password_0_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeString('as_path_0', ''); // URL Path
        $this->RegisterAttributeBoolean('as_path_0_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeInteger('as_area_0', 1); // Send Query when Motion is Detected
        $this->RegisterAttributeBoolean('as_area_0_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeInteger('as_io_0', 1); // Send Query when Alarm Input is Triggered
        $this->RegisterAttributeBoolean('as_io_0_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeInteger('as_audio_0', 1); // Send Query when Audio Alarm is Triggered
        $this->RegisterAttributeBoolean('as_audio_0_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeInteger('as_areaio_0', 1); // Send Query when Motion is Detected and Input is Triggered
        $this->RegisterAttributeBoolean('as_areaio_0_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeInteger('as_activequery_0', 1); // Append Alarm Trigger to Query
        $this->RegisterAttributeBoolean('as_activequery_0_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeInteger('as_query1_0', 0); // Activate Sending optional Parameter 1
        $this->RegisterAttributeBoolean('as_query1_0_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeString('as_queryattr1_0', ''); // Command 1 Attribute
        $this->RegisterAttributeBoolean('as_queryattr1_0_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeString('as_queryval1_0', ''); // Command 1 Value
        $this->RegisterAttributeBoolean('as_queryval1_0_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeInteger('as_query2_0', 0); // Activate Sending optional Parameter 2
        $this->RegisterAttributeBoolean('as_query2_0_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeString('as_queryattr2_0', ''); // Command 2 Attribute
        $this->RegisterAttributeBoolean('as_queryattr2_0_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeString('as_queryval2_0', ''); // Command 2 Value
        $this->RegisterAttributeBoolean('as_queryval2_0_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeInteger('as_query3_0', 0); // Activate Sending optional Parameter 3
        $this->RegisterAttributeBoolean('as_query3_enabled_0', false); // show Attribute in Webfront
        $this->RegisterAttributeString('as_queryattr3_0', ''); // Command 3 Attribute
        $this->RegisterAttributeBoolean('as_queryattr3_0_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeString('as_queryval3_0', ''); // Command 3 Value
        $this->RegisterAttributeBoolean('as_queryval3_0_enabled', false); // show Attribute in Webfront

        $this->RegisterAttributeString('as_server_1', ''); // Address of the receiving Server (e.g. Home Automation Server) [IPv4 Address]
        $this->RegisterAttributeBoolean('as_server_1_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeInteger('as_port_1', 0); // Port of the receiving Server [1-65536]
        $this->RegisterAttributeBoolean('as_port_1_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeInteger('as_auth_1', 0); // Authentication required [0, 1]
        $this->RegisterAttributeBoolean('as_auth_1_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeString('as_username_1', ''); // Alarmserver Username
        $this->RegisterAttributeBoolean('as_username_1_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeString('as_password_1', ''); // Alarmserver Password
        $this->RegisterAttributeBoolean('as_password_1_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeString('as_path_1', ''); // URL Path
        $this->RegisterAttributeBoolean('as_path_1_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeInteger('as_area_1', 1); // Send Query when Motion is Detected
        $this->RegisterAttributeBoolean('as_area_1_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeInteger('as_io_1', 1); // Send Query when Alarm Input is Triggered
        $this->RegisterAttributeBoolean('as_io_1_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeInteger('as_audio_1', 1); // Send Query when Audio Alarm is Triggered
        $this->RegisterAttributeBoolean('as_audio_1_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeInteger('as_areaio_1', 1); // Send Query when Motion is Detected and Input is Triggered
        $this->RegisterAttributeBoolean('as_areaio_1_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeInteger('as_activequery_1', 1); // Append Alarm Trigger to Query
        $this->RegisterAttributeBoolean('as_activequery_1_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeInteger('as_query1_1', 0); // Activate Sending optional Parameter 1
        $this->RegisterAttributeBoolean('as_query1_1_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeString('as_queryattr1_1', ''); // Command 1 Attribute
        $this->RegisterAttributeBoolean('as_queryattr1_1_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeString('as_queryval1_1', ''); // Command 1 Value
        $this->RegisterAttributeBoolean('as_queryval1_1_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeInteger('as_query2_1', 0); // Activate Sending optional Parameter 2
        $this->RegisterAttributeBoolean('as_query2_1_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeString('as_queryattr2_1', ''); // Command 2 Attribute
        $this->RegisterAttributeBoolean('as_queryattr2_1_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeString('as_queryval2_1', ''); // Command 2 Value
        $this->RegisterAttributeBoolean('as_queryval2_1_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeInteger('as_query3_1', 0); // Activate Sending optional Parameter 3
        $this->RegisterAttributeBoolean('as_query3_enabled_1', false); // show Attribute in Webfront
        $this->RegisterAttributeString('as_queryattr3_1', ''); // Command 3 Attribute
        $this->RegisterAttributeBoolean('as_queryattr3_1_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeString('as_queryval3_1', ''); // Command 3 Value
        $this->RegisterAttributeBoolean('as_queryval3_1_enabled', false); // show Attribute in Webfront

        $this->RegisterAttributeString('as_server_2', ''); // Address of the receiving Server (e.g. Home Automation Server) [IPv4 Address]
        $this->RegisterAttributeBoolean('as_server_2_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeInteger('as_port_2', 0); // Port of the receiving Server [1-65536]
        $this->RegisterAttributeBoolean('as_port_2_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeInteger('as_auth_2', 1); // Authentication required [0, 1]
        $this->RegisterAttributeBoolean('as_auth_2_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeString('as_username_2', 'instar'); // Alarmserver Username
        $this->RegisterAttributeBoolean('as_username_2_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeString('as_password_2', 'symcon'); // Alarmserver Password
        $this->RegisterAttributeBoolean('as_password_2_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeString('as_path_2', '/hook/INSTAR'); // URL Path
        $this->RegisterAttributeBoolean('as_path_2_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeInteger('as_area_2', 1); // Send Query when Motion is Detected
        $this->RegisterAttributeBoolean('as_area_2_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeInteger('as_io_2', 1); // Send Query when Alarm Input is Triggered
        $this->RegisterAttributeBoolean('as_io_2_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeInteger('as_audio_2', 1); // Send Query when Audio Alarm is Triggered
        $this->RegisterAttributeBoolean('as_audio_2_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeInteger('as_areaio_2', 1); // Send Query when Motion is Detected and Input is Triggered
        $this->RegisterAttributeBoolean('as_areaio_2_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeInteger('as_activequery_2', 1); // Append Alarm Trigger to Query
        $this->RegisterAttributeBoolean('as_activequery_2_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeInteger('as_query1_2', 0); // Activate Sending optional Parameter 1
        $this->RegisterAttributeBoolean('as_query1_2_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeString('as_queryattr1_2', ''); // Command 1 Attribute
        $this->RegisterAttributeBoolean('as_queryattr1_2_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeString('as_queryval1_2', ''); // Command 1 Value
        $this->RegisterAttributeBoolean('as_queryval1_2_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeInteger('as_query2_2', 1); // Activate Sending optional Parameter 2
        $this->RegisterAttributeBoolean('as_query2_2_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeString('as_queryattr2_2', ''); // Command 2 Attribute
        $this->RegisterAttributeBoolean('as_queryattr2_2_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeString('as_queryval2_2', ''); // Command 2 Value
        $this->RegisterAttributeBoolean('as_queryval2_2_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeInteger('as_query3_2', 1); // Activate Sending optional Parameter 3
        $this->RegisterAttributeBoolean('as_query3_2_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeString('as_queryattr3_2', ''); // Command 3 Attribute
        $this->RegisterAttributeBoolean('as_queryattr3_2_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeString('as_queryval3_2', ''); // Command 3 Value
        $this->RegisterAttributeBoolean('as_queryval3_2_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeString('md_server2_switch', 'on'); // De/Activate Alarm Server2 [off, on]
        $this->RegisterAttributeBoolean('md_server2_switch_enabled', false); // show Attribute in Webfront

        // Recording Menu
        $this->RegisterAttributeInteger('as_snap_enable', 0); // Dis/Enable snapshot to SD card： [0, 1]
        $this->RegisterAttributeBoolean('as_snap_enable_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeInteger('as_snap_interval', 1); // Time interval between shots in seconds [1-86400]
        $this->RegisterAttributeBoolean('as_snap_interval_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeInteger('as_email_enable', 0); // DDis/Enable snapshot to Email： [0, 1]
        $this->RegisterAttributeBoolean('as_email_enable_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeInteger('as_email_interval', 1); // Time interval between shots in seconds [1-86400]
        $this->RegisterAttributeBoolean('as_email_interval_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeInteger('as_ftp_enable', 0); // Dis/Enable snapshot to FTP Server： [0, 1]
        $this->RegisterAttributeBoolean('as_ftp_enable_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeInteger('as_ftp_interval', 1); // Time interval between shots in seconds [1-86400]
        $this->RegisterAttributeBoolean('as_ftp_interval_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeInteger('as_cloud_enable', 0); // Dis/Enable snapshot to INSTAR Cloud Server： [0, 1]
        $this->RegisterAttributeBoolean('as_cloud_enable_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeInteger('as_cloud_interval', 1); // Time interval between shots in seconds [1-86400]
        $this->RegisterAttributeBoolean('as_cloud_interval_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeString(
            'rt_week0', 'NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN'
        ); // Sunday：every 24 hrs divide to half hr is a segment , use P or N to indicate if the alarm is active - [P] means active , [N] means inactive
        $this->RegisterAttributeBoolean('rt_week0_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeString(
            'rt_week1', 'NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN'
        ); // Sunday：every 24 hrs divide to half hr is a segment , use P or N to indicate if the alarm is active - [P] means active , [N] means inactive
        $this->RegisterAttributeBoolean('rt_week1_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeString(
            'rt_week2', 'NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN'
        ); // Sunday：every 24 hrs divide to half hr is a segment , use P or N to indicate if the alarm is active - [P] means active , [N] means inactive
        $this->RegisterAttributeBoolean('rt_week2_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeString(
            'rt_week3', 'NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN'
        ); // Sunday：every 24 hrs divide to half hr is a segment , use P or N to indicate if the alarm is active - [P] means active , [N] means inactive
        $this->RegisterAttributeBoolean('rt_week3_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeString(
            'rt_week4', 'NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN'
        ); // Sunday：every 24 hrs divide to half hr is a segment , use P or N to indicate if the alarm is active - [P] means active , [N] means inactive
        $this->RegisterAttributeBoolean('rt_week4_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeString(
            'rt_week5', 'NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN'
        ); // Sunday：every 24 hrs divide to half hr is a segment , use P or N to indicate if the alarm is active - [P] means active , [N] means inactive
        $this->RegisterAttributeBoolean('rt_week5_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeString(
            'rt_week6', 'NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN'
        ); // Sunday：every 24 hrs divide to half hr is a segment , use P or N to indicate if the alarm is active - [P] means active , [N] means inactive
        $this->RegisterAttributeBoolean('rt_week6_enabled', false); // show Attribute in Webfront
        //  Video Tasks
        $this->RegisterAttributeInteger('planrec_enable', 1); // Dis/Enable Recording to SD card： [0, 1]
        $this->RegisterAttributeBoolean('planrec_enable_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeInteger('planrec_chn', 11); // Record Kamera Channel [11, 12, 13]
        $this->RegisterAttributeBoolean('planrec_chn_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeInteger('planrec_time', 1); // Recoding File Length (15-900seconds)
        $this->RegisterAttributeBoolean('planrec_time_enabled', false); // show Attribute in Webfront
        // System
        $this->RegisterAttributeString('lanmac', ''); // MAC Address of the LAN Interface
        $this->RegisterAttributeBoolean('lanmac_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeString('wifimac', ''); // MAC Address of the WLAN Interface
        $this->RegisterAttributeBoolean('wifimac_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeInteger('wifitype', 0); //
        $this->RegisterAttributeBoolean('wifitype_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeString('internetip', ''); // Get Wide Area Network Address
        $this->RegisterAttributeBoolean('internetip_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeString('at_username0', ''); // Username for User 1
        $this->RegisterAttributeBoolean('at_username0_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeString('at_password0', ''); // Password for User 1
        $this->RegisterAttributeBoolean('at_password0_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeInteger('at_authlevel0', 3); // User Authorisation: admin/user/guest [15, 3, 1]
        $this->RegisterAttributeBoolean('at_authlevel0_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeInteger('at_enable0', 1); // De/Activate [0, 1]
        $this->RegisterAttributeBoolean('at_enable0_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeString('at_username1', ''); // Username for User 2
        $this->RegisterAttributeBoolean('at_username1_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeString('at_password1', ''); // Password for User 2
        $this->RegisterAttributeBoolean('at_password1_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeInteger('at_authlevel1', 3); // User Authorisation: admin/user/guest [15, 3, 1]
        $this->RegisterAttributeBoolean('at_authlevel1_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeInteger('at_enable1', 1); // De/Activate [0, 1]
        $this->RegisterAttributeBoolean('at_enable1_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeString('at_username2', ''); // Username for User 3
        $this->RegisterAttributeBoolean('at_username2_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeString('at_password2', ''); // Password for User 3
        $this->RegisterAttributeBoolean('at_password2_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeInteger('at_authlevel2', 3); // User Authorisation: admin/user/guest [15, 3, 1]
        $this->RegisterAttributeBoolean('at_authlevel2_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeInteger('at_enable2', 1); // De/Activate [0, 1]
        $this->RegisterAttributeBoolean('at_enable2_enabled', false); // show Attribute in Webfront

        $this->RegisterAttributeInteger('time_time', 0); // Camera Time
        $this->RegisterAttributeBoolean('time_time_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeString('timeZone_time', ''); // Cameras Time Zone e.g.[Europe%2FAmsterdam]
        $this->RegisterAttributeBoolean('timeZone_time_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeString('dstmode_time', 'on'); // De/Activate Daylight Saving Time [off, on]
        $this->RegisterAttributeBoolean('dstmode_time_enabled', false); // show Attribute in Webfront

        $this->RegisterAttributeInteger('ntpenable_network', 1); // De/Activate NTP Time Adjustment [0, 1]
        $this->RegisterAttributeBoolean('ntpenable_network_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeString('ntpserver_network', ''); // NTP Server Address
        $this->RegisterAttributeBoolean('ntpserver_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeInteger('ntpinterval_network', 1); // NTP Sync Interval in Hours [1 - 12]
        $this->RegisterAttributeBoolean('ntpinterval_network_enabled', false); // show Attribute in Webfront
        $this->RegisterAttributeString('guest_value11', 'de'); // UI Language Selector [de, en, fr, cn]
        $this->RegisterAttributeBoolean('guest_value11_enabled', false); // show Attribute in Webfront

        $this->RegisterAttributeBoolean('1080p_API', false);
        $this->RegisterAttributeBoolean('720p_API', false);
        $this->RegisterAttributeBoolean('VGA_API', true);
        $this->RegisterAttributeBoolean('MQTT_Support', false);
        $this->RegisterAttributeBoolean('MQTT', false);

        //we will wait until the kernel is ready
        $this->RegisterMessage(0, IPS_KERNELMESSAGE);
    }

    public function ApplyChanges()
    {
        //Never delete this line!
        parent::ApplyChanges();

        if (IPS_GetKernelRunlevel() !== KR_READY) {
            return;
        }

        // register Webhook
        $this->RegisterWebhook('/hook/INSTAR' . $this->InstanceID);

        $this->ValidateConfiguration();
        $this->SetCyclicTimerInterval();
        $this->SetCyclicRebootTimerInterval();
    }

    /**
     * Die folgenden Funktionen stehen automatisch zur Verfügung, wenn das Modul über die "Module Control" eingefügt wurden.
     * Die Funktionen werden, mit dem selbst eingerichteten Prefix, in PHP und JSON-RPC wiefolgt zur Verfügung gestellt:.
     */


    protected function SetCyclicTimerInterval()
    {
        $Now    = new DateTime();
        $Target = new DateTime();
        $Target->modify('+1 day');
        $Target->setTime(0, 5, 15);
        $Diff     = $Target->getTimestamp() - $Now->getTimestamp();
        $Interval = $Diff * 1000;
        $this->SetTimerInterval("SystemLogTimerUpdate", $Interval);
    }

    protected function SetCyclicRebootTimerInterval()
    {
        $Now    = new DateTime();
        $Target = new DateTime();
        $Target->modify('+1 day');
        $Target->setTime(0, 5, 45);
        $Diff     = $Target->getTimestamp() - $Now->getTimestamp();
        $Interval = $Diff * 1000;
        $this->SetTimerInterval("RebootTimerUpdate", $Interval);
    }

    private function ValidateConfiguration()
    {
        $host             = $this->ReadPropertyString('Host');
        $port             = $this->ReadPropertyInteger('Port');
        $user             = $this->ReadPropertyString('User');
        $password         = $this->ReadPropertyString('Password');
        $model            = $this->ReadPropertyInteger('model_type');
        $webhook_username = $this->ReadAttributeString('as_username_2');
        $webhook_password = $this->ReadAttributeString('as_password_2');

        $model            = $this->ReadPropertyInteger('model_type');
        if($model == 0)
        {
            $this->ShowStartPopup();
        }

        if ($webhook_username == '' || $webhook_password == '') {
            $this->UpdateParameter('instar_settings_menu', 'expanded', true);
            $this->SetStatus(self::ERROR_USER_PASSWORD);
        }
        if ($model == 0) {
            $this->SetStatus(self::ERROR_CAMERA_MODEL); // Please select a camera model
        } else {
            $this->SetAPI($model);
        }

        // check IP adress
        if (!filter_var($host, FILTER_VALIDATE_IP) === false) {
            //IP ok
            $ipcheck = true;
        } else {
            $ipcheck = false;
        }

        //Domain INSTAR prüfen
        if (!$this->is_valid_localdomain($host) === false) {
            //Domain ok
            $domaincheck = true;
        } else {
            $domaincheck = false;
        }

        if ($domaincheck === true || $ipcheck === true) {
            $hostcheck = true;
        } else {
            $hostcheck = false;
            $this->SetStatus(self::ERROR_IP_NOT_VALID); //IP Adresse oder Host ist ungültig
        }

        // Kategorie prüfen
        $category_snapshot = $this->ReadPropertyInteger('categorysnapshot');
        if ($category_snapshot > 0) {
            $this->SendDebug('INSTAR', 'Kategorie mit ObjektID ' . $category_snapshot . ' gefunden', 0);
        } else {
            $this->SetStatus(self::ERROR_SNAPSHOT_CATEGORY); //category INSTAR snapshot not set
        }

        //User und Passwort prüfen
        if ($user == '' || $password == '') {
            $this->SetStatus(self::ERROR_FIELD_EMPTY); //Felder dürfen nicht leer sein
        } elseif ($user !== '' && $password !== '' && $hostcheck === true) {
            $MediaID = @$this->GetIDForIdent('INSTARVideo');
            if ($MediaID === false) {
                $MediaID = IPS_CreateMedia(3);                  // Stream im MedienPool anlegen
                IPS_SetParent($MediaID, $this->InstanceID); // Medienobjekt einsortieren unter der Instanz
                IPS_SetIdent($MediaID, 'INSTARVideo');
                IPS_SetPosition($MediaID, -1);
                IPS_SetName($MediaID, $this->Translate('INSTAR live video')); // Medienobjekt benennen
            }
            $channel = $this->ReadPropertyInteger('MJPEG_Stream');
            $url     = 'http://' . $host . ':' . $port . '/mjpegstream.cgi?-chn=' . $channel . '&usr=' . $user . '&pwd=' . $password;
            IPS_SetMediaFile($MediaID, $url, false);    // Image im MedienPool mit Image-Datei verbinden

            $ipsversion = $this->GetIPSVersion();
            $this->RegisterProfileAssociation(
                'INSTAR.notification_alarm', 'Warning', '', '', 0, 10, 0, 0, VARIABLETYPE_INTEGER, [
                                               [0, $this->Translate('alarm area 1 triggered'), '', -1],
                                               [1, $this->Translate('alarm area 1 triggered'), '', -1],
                                               [2, $this->Translate('alarm area 2 triggered'), '', -1],
                                               [3, $this->Translate('alarm area 3 triggered'), '', -1],
                                               [4, $this->Translate('alarm area 4 triggered'), '', -1],
                                               [5, $this->Translate('alarm input / pir triggered'), '', -1],
                                               [6, $this->Translate('audio alarm triggered'), '', -1],
                                               [7, $this->Translate('motion detection & PIR triggered (area 1)'), '', -1],
                                               [8, $this->Translate('motion detection & PIR triggered (area 2)'), '', -1],
                                               [9, $this->Translate('motion detection & PIR triggered (area 3)'), '', -1],
                                               [10, $this->Translate('motion detection & PIR triggered (area 4)'), '', -1],
                                               [11, $this->Translate('no alarm'), '', -1]]
            );
            $this->SetupVariable(
                'LastAlarmtype', $this->Translate('Last alarm type'), 'INSTAR.notification_alarm', $this->_getPosition(), VARIABLETYPE_INTEGER, false, true
            );
            $this->RegisterProfile('INSTAR.Movement', 'Motion', '', '', 0, 0, 0, 0, VARIABLETYPE_STRING);
            $this->SetupVariable(
                'LastMovement', $this->Translate('Last motion detection'), 'INSTAR.Movement', $this->_getPosition(), VARIABLETYPE_STRING, false, true
            );

            if ($ipsversion == 0) {
                //Skript bei Bewegung
                $IDSnapshot = @($this->GetIDForIdent('GetINSTARSnapshot'));
                if ($IDSnapshot === false) {
                    $IDSnapshot =
                        $this->RegisterScript('GetINSTARSnapshot', 'Get INSTAR Snapshot', $this->CreateSnapshotScript(), $this->_getPosition());
                    IPS_SetHidden($IDSnapshot, true);
                    $this->SetSnapshotEvent($IDSnapshot);
                } else {
                    $this->SendDebug('INSTAR', 'INSTAR Snapshot Script mit ' . $IDSnapshot . ' gefunden', 0);
                }
            } else {
                if ($this->GetIDForIdent('LastMovement') > 0) {
                    $this->RegisterMessage($this->GetIDForIdent('LastMovement'), VM_UPDATE);
                    $this->SendDebug('INSTAR', 'Register Message LastMovement', 0);
                }
            }

            //Email
            $emailalert   = $this->ReadPropertyBoolean('activeemail');
            $emailalert2  = $this->ReadPropertyBoolean('activeemail2');
            $emailalert3  = $this->ReadPropertyBoolean('activeemail3');
            $emailalert4  = $this->ReadPropertyBoolean('activeemail4');
            $emailalert5  = $this->ReadPropertyBoolean('activeemail5');
            $emailalert6  = $this->ReadPropertyBoolean('activeemail6');
            $emailalert7  = $this->ReadPropertyBoolean('activeemail7');
            $emailalert8  = $this->ReadPropertyBoolean('activeemail8');
            $emailalert9  = $this->ReadPropertyBoolean('activeemail9');
            $emailalert10 = $this->ReadPropertyBoolean('activeemail10');
            $emailalert11 = $this->ReadPropertyBoolean('activeemail11');
            if ($emailalert) {
                $email = $this->ReadPropertyString('email');
                $this->CheckEmail($email);
            } elseif ($emailalert2) {
                $email = $this->ReadPropertyString('email2');
                $this->CheckEmail($email);
            } elseif ($emailalert3) {
                $email = $this->ReadPropertyString('email3');
                $this->CheckEmail($email);
            } elseif ($emailalert4) {
                $email = $this->ReadPropertyString('email4');
                $this->CheckEmail($email);
            } elseif ($emailalert5) {
                $email = $this->ReadPropertyString('email5');
                $this->CheckEmail($email);
            } elseif ($emailalert6) {
                $email = $this->ReadPropertyString('email6');
                $this->CheckEmail($email);
            } elseif ($emailalert7) {
                $email = $this->ReadPropertyString('email7');
                $this->CheckEmail($email);
            } elseif ($emailalert8) {
                $email = $this->ReadPropertyString('email8');
                $this->CheckEmail($email);
            } elseif ($emailalert9) {
                $email = $this->ReadPropertyString('email9');
                $this->CheckEmail($email);
            } elseif ($emailalert10) {
                $email = $this->ReadPropertyString('email10');
                $this->CheckEmail($email);
            } elseif ($emailalert11) {
                $email = $this->ReadPropertyString('email11');
                $this->CheckEmail($email);
            } else {
                $IDEmail = @($this->GetIDForIdent('SendEmailAlert'));
                if ($ipsversion == 0) {
                    if ($IDEmail > 0) {
                        $this->SetEmailEvent($IDEmail, false);
                    }
                }

            }
            $this->SetupVariables();
            $this->UpdateSettings();
            // Status Aktiv
            $this->SetStatus(IS_ACTIVE);
        }
    }

    protected function SetupVariables()
    {
        $this->RegisterProfileAssociation(
            'INSTAR.Control.Continuous', 'Move', '', '', 0, 4, 0, 0, VARIABLETYPE_INTEGER, [
                                           [0, $this->Translate('Left'), '', -1],
                                           [1, $this->Translate('Up'), '', -1],
                                           [2, $this->Translate('Down'), '', -1],
                                           [3, $this->Translate('Right'), '', -1],
                                           [4, $this->Translate('Stop'), '', -1]]
        );
        $this->SetupVariable(
            'Control_Continuous', $this->Translate('Continuous movement'), 'INSTAR.Control.Continuous', $this->_getPosition(), VARIABLETYPE_INTEGER,
            true, true
        );
        $this->RegisterProfileAssociation(
            'INSTAR.Control.Step', 'Move', '', '', 0, 3, 0, 0, VARIABLETYPE_INTEGER, [
                                     [0, $this->Translate('Step left'), '', -1],
                                     [1, $this->Translate('Step up'), '', -1],
                                     [2, $this->Translate('Step down'), '', -1],
                                     [3, $this->Translate('Step right'), '', -1]]
        );
        $this->SetupVariable(
            'Control_Step', $this->Translate('Stepped movement'), 'INSTAR.Control.Step', $this->_getPosition(), VARIABLETYPE_INTEGER, true, true
        );
        $model            = $this->ReadPropertyInteger('model_type');

        if($model == self::IN_9020_Full_HD || $model == self::IN_9010_Full_HD || $model == self::IN_9008_Full_HD)
        {
            $this->SendParameter('preset&-act=set&-status=1&-number=91');
            $this->SendParameter('preset&-act=set&-status=1&-number=92');

            $this->RegisterProfileAssociation(
                'INSTAR.Control.Scan_9x', 'Move', '', '', 0, 2, 0, 0, VARIABLETYPE_INTEGER, [
                                         [0, $this->Translate('Center'), '', -1],
                                         [1, $this->Translate('Scan Horizontal'), '', -1]]
            );
            $this->SetupVariable(
                'Control_Scan', $this->Translate('Control Scan'), 'INSTAR.Control.Scan_9x', $this->_getPosition(), VARIABLETYPE_INTEGER, true, true
            );
        }
        else
        {
            $this->RegisterProfileAssociation(
                'INSTAR.Control.Scan', 'Move', '', '', 0, 2, 0, 0, VARIABLETYPE_INTEGER, [
                                         [0, $this->Translate('Center'), '', -1],
                                         [1, $this->Translate('Scan Horizontal'), '', -1],
                                         [2, $this->Translate('Scan Vertical'), '', -1]]
            );
            $this->SetupVariable(
                'Control_Scan', $this->Translate('Control Scan'), 'INSTAR.Control.Scan', $this->_getPosition(), VARIABLETYPE_INTEGER, true, true
            );
        }
        $this->RegisterProfileAssociation(
            'INSTAR.Snapshot', 'Camera', '', '', 0, 0, 0, 0, VARIABLETYPE_INTEGER, [
                                 [0, $this->Translate('Save snapshot'), '', -1]]
        );

        $this->RegisterProfile('INSTAR.Hue', 'Light', '', '', 0, 127, 1, 0, VARIABLETYPE_INTEGER);
        $this->SetupVariable('hue', $this->Translate('Hue'), 'INSTAR.Hue', $this->_getPosition(), VARIABLETYPE_INTEGER, true);
        $this->SetupVariable(
            'saturation', $this->Translate('Saturation'), '~Intensity.255', $this->_getPosition(), VARIABLETYPE_INTEGER, true
        ); // Saturation (0-255)
        $this->SetupVariable(
            'brightness', $this->Translate('Brightness'), '~Intensity.255', $this->_getPosition(), VARIABLETYPE_INTEGER, true
        ); // Brightness (0-255)
        $this->SetupVariable(
            'contrast', $this->Translate('Contrast'), '~Intensity.255', $this->_getPosition(), VARIABLETYPE_INTEGER, true
        ); // Contrast (0-255)
        $this->SetupVariable(
            'sharpness', $this->Translate('Sharpness'), '~Intensity.100', $this->_getPosition(), VARIABLETYPE_INTEGER, true
        ); // sharpness [0-100]
        $this->SetupVariable(
            'targety', $this->Translate('Equalize image'), '~Intensity.255', $this->_getPosition(), VARIABLETYPE_INTEGER, true
        ); //  Exposure [0-255]
        $this->SetupVariable(
            'noise', $this->Translate('Low light denoising intensity'), '~Intensity.100', $this->_getPosition(), VARIABLETYPE_INTEGER, true
        ); //  Low light denoising intensity (0-100)
        $this->RegisterProfile('INSTAR.gamma', 'Light', '', '', 0, 3, 1, 0, VARIABLETYPE_INTEGER);
        $this->SetupVariable(
            'gamma', $this->Translate('Gamma'), 'INSTAR.gamma', $this->_getPosition(), VARIABLETYPE_INTEGER, true
        ); //  Gamma 0-3
        $this->SetupVariable(
            'INSTARButtonSnapshot', $this->Translate('Get snapshot from camera'), 'INSTAR.Snapshot', $this->_getPosition(), VARIABLETYPE_INTEGER, true
        );

        $this->SetupVariable('flip', $this->Translate('Flip'), '~Switch', $this->_getPosition(), VARIABLETYPE_BOOLEAN, true);
        $this->SetupVariable('mirror', $this->Translate('Mirror'), '~Switch', $this->_getPosition(), VARIABLETYPE_BOOLEAN, true);
        $this->SetupVariable('alarm_detection', $this->Translate('alarm detection'), '~Switch', $this->_getPosition(), VARIABLETYPE_BOOLEAN, true, true);

        if($model == self::IN_3011)
        {
            $this->RegisterProfileAssociation(
                'INSTAR.Scene', 'Image', '', '', 0, 2, 0, 0, VARIABLETYPE_INTEGER, [
                                  [0, $this->Translate('Auto'), '', -1],
                                  [1, $this->Translate('Indoor'), '', -1],
                                  [2, $this->Translate('Outdoor'), '', -1]]
            );
            $this->SetupVariable('scene', $this->Translate('Scene'), 'INSTAR.Scene', $this->_getPosition(), VARIABLETYPE_INTEGER, true);
        }
        $this->RegisterProfileAssociation(
            'INSTAR.infraredstat', 'Camera', '', '', 0, 2, 0, 0, VARIABLETYPE_INTEGER, [
                                     [0, $this->Translate('auto'), '', -1],
                                     // [1, $this->Translate('open'), '', -1],
                                     [2, $this->Translate('close'), '', -1]]
        );
        $this->SetupVariable(
            'infraredstat', $this->Translate('IR Mode'), 'INSTAR.infraredstat', $this->_getPosition(), VARIABLETYPE_INTEGER, true
        ); // IR LED Status - auto, close (deactivated)
        $this->RegisterProfileAssociation(
            'INSTAR.Position', 'Camera', '', '', 1, 8, 0, 0, VARIABLETYPE_INTEGER, [
                                 [1, $this->Translate('Position 1'), '', -1],
                                 [2, $this->Translate('Position 2'), '', -1],
                                 [3, $this->Translate('Position 3'), '', -1],
                                 [4, $this->Translate('Position 4'), '', -1],
                                 [5, $this->Translate('Position 5'), '', -1],
                                 [6, $this->Translate('Position 6'), '', -1],
                                 [7, $this->Translate('Position 7'), '', -1],
                                 [8, $this->Translate('Position 8'), '', -1]]
        );
        $this->SetupVariable(
            'SetPosition', $this->Translate('Set preset position'), 'INSTAR.Position', $this->_getPosition(), VARIABLETYPE_INTEGER, true, true
        ); // (1 - 8), integer
        $this->SetValue('SetPosition', 1);
        $this->SetupVariable(
            'UnsetPosition', $this->Translate('Unset preset position'), 'INSTAR.Position', $this->_getPosition(), VARIABLETYPE_INTEGER, true, true
        ); // (1 - 8), integer
        $this->SetValue('UnsetPosition', 1);
        $this->SetupVariable(
            'GotoPosition', $this->Translate('Go to preset position'), 'INSTAR.Position', $this->_getPosition(), VARIABLETYPE_INTEGER, true, true
        ); // (1 - 8), integer
        $this->SetValue('GotoPosition', 1);
        $this->SetupVariable(
            'notification_alarm', $this->Translate('Alarm notification'), 'INSTAR.notification_alarm', $this->_getPosition(), VARIABLETYPE_INTEGER,
            false, true
        );

        if (@$this->GetIDForIdent('weekplan_position')) {
            $this->SendDebug('INSTAR Weeplan Position', 'Weekplan exists with id ' . $this->GetIDForIdent('weekplan_position'), 0);
        } else {
            $this->CreateWeekplan();
        }


        // Selected Variables
        $this->RegisterProfile('INSTAR.model', 'Camera', '', '', 0, 0, 0, 0, VARIABLETYPE_STRING);
        $this->SetupVariable('model', $this->Translate('Camera Model Identifier'), 'INSTAR.model', $this->_getPosition(), VARIABLETYPE_STRING, false);
        $this->RegisterProfile('INSTAR.hardVersion', 'Robot', '', '', 0, 0, 0, 0, VARIABLETYPE_STRING);
        $this->SetupVariable(
            'hardVersion', $this->Translate('Hardware Version'), 'INSTAR.hardVersion', $this->_getPosition(), VARIABLETYPE_STRING, false
        );
        $this->RegisterProfile('INSTAR.softVersion', 'Robot', '', '', 0, 0, 0, 0, VARIABLETYPE_STRING);
        $this->SetupVariable(
            'softVersion', $this->Translate('Firmware Version'), 'INSTAR.softVersion', $this->_getPosition(), VARIABLETYPE_STRING, false
        );
        $this->RegisterProfile('INSTAR.webVersion', 'Notebook', '', '', 0, 0, 0, 0, VARIABLETYPE_STRING);
        $this->SetupVariable('webVersion', $this->Translate('WebUI Version'), 'INSTAR.webVersion', $this->_getPosition(), VARIABLETYPE_STRING, false);
        $this->RegisterProfile('INSTAR.name', 'Camera', '', '', 0, 0, 0, 0, VARIABLETYPE_STRING);
        $this->SetupVariable('name', $this->Translate('Name'), 'INSTAR.name', $this->_getPosition(), VARIABLETYPE_STRING, false);
        $this->RegisterProfile('INSTAR.SD_Space_KB', 'Notebook', '', ' KB', 0, 0, 0, 0, VARIABLETYPE_INTEGER);
        $this->SetupVariable(
            'sdfreespace', $this->Translate('SD free storage'), 'INSTAR.SD_Space_KB', $this->_getPosition(), VARIABLETYPE_INTEGER, false
        ); // SD free space，KB
        $this->SetupVariable(
            'sdtotalspace', $this->Translate('SD capacity'), 'INSTAR.SD_Space_KB', $this->_getPosition(), VARIABLETYPE_INTEGER, false
        ); // SD total space，KB

        $this->SetupVariable('platformstatus', $this->Translate('Platform Status'), '~Switch', $this->_getPosition(), VARIABLETYPE_BOOLEAN, false);
        $this->SetupVariable(
            'dhcpflag', $this->Translate('DHCP'), '~Switch', $this->_getPosition(), VARIABLETYPE_BOOLEAN, true
        ); // on: (DHCP enabled), off: (DHCP disabled)
        $this->RegisterProfile('INSTAR.ip', 'Network', '', '', 0, 0, 0, 0, VARIABLETYPE_STRING);
        $this->SetupVariable(
            'ip', $this->Translate('IP address'), 'INSTAR.ip', $this->_getPosition(), VARIABLETYPE_STRING, false
        ); // LAN IPv4 Address
        $this->RegisterProfile('INSTAR.netmask', 'Network', '', '', 0, 0, 0, 0, VARIABLETYPE_STRING);
        $this->SetupVariable(
            'netmask', $this->Translate('Subnetmask'), 'INSTAR.netmask', $this->_getPosition(), VARIABLETYPE_STRING, false
        ); // LAN Subnet Mask
        $this->RegisterProfile('INSTAR.gateway', 'Network', '', '', 0, 0, 0, 0, VARIABLETYPE_STRING);
        $this->SetupVariable(
            'gateway', $this->Translate('Gateway'), 'INSTAR.gateway', $this->_getPosition(), VARIABLETYPE_STRING, false
        ); // LAN Gateway
        $this->RegisterProfileAssociation(
            'INSTAR.DNS_State', '', '', '', 0, 1, 0, 0, VARIABLETYPE_BOOLEAN, [
                                  [false, $this->Translate('manually'), '', -1],
                                  [true, $this->Translate('from DHCP Server'), '', -1]]
        );
        $this->SetupVariable(
            'dnsstat', $this->Translate('Platform Status'), 'INSTAR.DNS_State', $this->_getPosition(), VARIABLETYPE_BOOLEAN, true
        ); // DNS Status: 0 (manually), 1 (from DHCP Server)
        $this->RegisterProfile('INSTAR.fdnsip', 'Network', '', '', 0, 0, 0, 0, VARIABLETYPE_STRING);
        $this->SetupVariable(
            'fdnsip', $this->Translate('DNS Server'), 'INSTAR.fdnsip', $this->_getPosition(), VARIABLETYPE_STRING, false
        ); // Primary DNS
        $this->RegisterProfile('INSTAR.sdnsip', 'Network', '', '', 0, 0, 0, 0, VARIABLETYPE_STRING);
        $this->SetupVariable(
            'sdnsip', $this->Translate('Secondary DNS'), 'INSTAR.sdnsip', $this->_getPosition(), VARIABLETYPE_STRING, false
        ); // Secondary DNS
        $this->SetupVariable(
            'macaddress', $this->Translate('LAN MAC Address'), '', $this->_getPosition(), VARIABLETYPE_STRING, false
        );  // LAN MAC Address
        $this->RegisterProfile('INSTAR.networktype', 'Network', '', '', 0, 0, 0, 0, VARIABLETYPE_STRING);
        $this->SetupVariable(
            'networktype', $this->Translate('Network Type'), 'INSTAR.networktype', $this->_getPosition(), VARIABLETYPE_STRING, false
        ); // LAN or WLAN
        $this->RegisterProfileAssociation(
            'INSTAR.DDNS_State', '', '', '', 0, 2, 0, 0, VARIABLETYPE_INTEGER, [
                                   [0, $this->Translate('ok'), '', -1],
                                   [1, $this->Translate('off'), '', -1],
                                   [2, $this->Translate('failed'), '', -1]]
        );
        $this->SetupVariable(
            'th3ddnsstatus', $this->Translate('INSTAR 3rd Party DDNS Status'), 'INSTAR.DDNS_State', $this->_getPosition(), VARIABLETYPE_INTEGER, true
        ); // INSTAR 3rd Party DDNS Status ok, off, failed
        $this->RegisterProfileAssociation(
            'INSTAR.upnpstatus', '', '', '', 0, 2, 0, 0, VARIABLETYPE_INTEGER, [
                                          [0, $this->Translate('ok'), '', -1],
                                          [1, $this->Translate('off'), '', -1],
                                          [2, $this->Translate('failed'), '', -1]]
        );
        $this->SetupVariable(
            'upnpstatus', $this->Translate('INSTAR UPNP Status'), 'INSTAR.upnpstatus', $this->_getPosition(), VARIABLETYPE_INTEGER, true
        ); // INSTAR UPNP Status ok, off, failed
        $this->RegisterProfile('INSTAR.startdate', 'Clock', '', '', 0, 0, 0, 0, VARIABLETYPE_STRING);
        $this->SetupVariable(
            'startdate', $this->Translate('Uptime:'), 'INSTAR.startdate', $this->_getPosition(), VARIABLETYPE_STRING, false
        ); // Camera Uptime
        $this->RegisterProfileAssociation(
            'INSTAR.INSTAR_DDNS_State', '', '', '', 0, 2, 0, 0, VARIABLETYPE_INTEGER, [
                                          [0, $this->Translate('ok'), '', -1],
                                          [1, $this->Translate('off'), '', -1],
                                          [2, $this->Translate('failed'), '', -1]]
        );
        $this->SetupVariable(
            'facddnsstatus', $this->Translate('INSTAR DDNS Status'), 'INSTAR.INSTAR_DDNS_State', $this->_getPosition(), VARIABLETYPE_INTEGER, true
        ); // INSTAR DDNS Status ok, off, failed
        $this->RegisterProfileAssociation(
            'INSTAR.SD_Card_State', '', '', '', 0, 2, 0, 0, VARIABLETYPE_INTEGER, [
                                      [0, $this->Translate('out'), '', -1],
                                      [1, $this->Translate('Ready'), '', -1],
                                      [2, $this->Translate('Read only'), '', -1]]
        );
        $this->SetupVariable(
            'sdstatus', $this->Translate('SD Card Status'), 'INSTAR.SD_Card_State', $this->_getPosition(), VARIABLETYPE_INTEGER, true
        );  // SD Card Status out, Ready, Read only
        $this->RegisterProfile('INSTAR.port', 'Network', '', '', 0, 0, 0, 0, VARIABLETYPE_INTEGER);
        $this->SetupVariable('httpport', $this->Translate('HTTP port'), 'INSTAR.port', $this->_getPosition(), VARIABLETYPE_INTEGER, true);
        $this->SetupVariable('httpsport', $this->Translate('HTTPS port'), 'INSTAR.port', $this->_getPosition(), VARIABLETYPE_INTEGER, true);
        $this->SetupVariable('rtspport', $this->Translate('RTSP port'), 'INSTAR.port', $this->_getPosition(), VARIABLETYPE_INTEGER, true);
        $this->SetupVariable('rtsp_aenable', $this->Translate('RTSP Enabled'), '~Switch', $this->_getPosition(), VARIABLETYPE_BOOLEAN, true);
        $this->SetupVariable(
            'rtmpport', $this->Translate('RTMP Port for Flash Plugin'), 'INSTAR.port', $this->_getPosition(), VARIABLETYPE_INTEGER, true
        );
        $this->SetupVariable('wf_enable', $this->Translate('WLAN Enabled'), '~Switch', $this->_getPosition(), VARIABLETYPE_BOOLEAN, true);
        $this->RegisterProfile('INSTAR.wf_ssid', 'Network', '', '', 0, 0, 0, 0, VARIABLETYPE_STRING);
        $this->SetupVariable(
            'wf_ssid', $this->Translate('SSID'), 'INSTAR.wf_ssid', $this->_getPosition(), VARIABLETYPE_STRING, false
        ); // SSID (max. 32 Characters)
        $this->RegisterProfileAssociation(
            'INSTAR.wf_auth', 'Network', '', '', 0, 2, 0, 0, VARIABLETYPE_INTEGER, [
                                [0, $this->Translate('no encryption'), '', -1],
                                [1, $this->Translate('WEP'), '', -1],
                                [2, $this->Translate('WPA-PSK'), '', -1],
                                [3, $this->Translate('WPA2-PSK'), '', -1]]
        );
        $this->SetupVariable(
            'wf_auth', $this->Translate('Encryption'), 'INSTAR.wf_auth', $this->_getPosition(), VARIABLETYPE_INTEGER, true
        ); // 0 (no encryption), 1 (WEP), 2 (WPA-PSK), 3 (WPA2-PSK)

        $this->SetupVariable(
            'm1_enable', $this->Translate('Zone 1'), '~Switch', $this->_getPosition(), VARIABLETYPE_BOOLEAN, true
        ); // Dis/Enable Alarm Detection Area 1 - 4: [0, 1]
        $this->SetupVariable(
            'm1_x', $this->Translate('X-Axis Offset'), '', $this->_getPosition(), VARIABLETYPE_INTEGER, true
        ); // X-Axis Offset of Alarm Area Origin [0-(1920-w)]
        $this->SetupVariable(
            'm1_y', $this->Translate('Y-Axis Offset'), '', $this->_getPosition(), VARIABLETYPE_INTEGER, true
        ); // Y-Axis Offset of Alarm Area Origin [0-(1080-h)]
        $this->SetupVariable(
            'm1_w', $this->Translate('Alarm Area Width'), '', $this->_getPosition(), VARIABLETYPE_INTEGER, true
        ); // Alarm Area Width [1-1920] Pixel
        $this->SetupVariable(
            'm1_h', $this->Translate('Alarm Area Height'), '', $this->_getPosition(), VARIABLETYPE_INTEGER, true
        ); // Alarm Area Height [1-1080] Pixel
        $this->SetupVariable(
            'm1_sensitivity', $this->Translate('Detection Sensitivity'), '~Intensity.100', $this->_getPosition(), VARIABLETYPE_INTEGER, true
        ); // Detection Sensitivity [1 - 100]
        $this->SetupVariable(
            'm2_enable', $this->Translate('Zone 2'), '~Switch', $this->_getPosition(), VARIABLETYPE_BOOLEAN, true
        ); // Dis/Enable Alarm Detection Area 1 - 4: [0, 1]
        $this->SetupVariable(
            'm2_x', $this->Translate('X-Axis Offset'), '', $this->_getPosition(), VARIABLETYPE_INTEGER, true
        ); // X-Axis Offset of Alarm Area Origin [0-(1920-w)]
        $this->SetupVariable(
            'm2_y', $this->Translate('Y-Axis Offset'), '', $this->_getPosition(), VARIABLETYPE_INTEGER, true
        ); // Y-Axis Offset of Alarm Area Origin [0-(1080-h)]
        $this->SetupVariable(
            'm2_w', $this->Translate('Alarm Area Width'), '', $this->_getPosition(), VARIABLETYPE_INTEGER, true
        ); // Alarm Area Width [1-1920] Pixel
        $this->SetupVariable(
            'm2_h', $this->Translate('Alarm Area Height'), '', $this->_getPosition(), VARIABLETYPE_INTEGER, true
        ); // Alarm Area Height [1-1080] Pixel
        $this->SetupVariable(
            'm2_sensitivity', $this->Translate('Detection Sensitivity'), '~Intensity.100', $this->_getPosition(), VARIABLETYPE_INTEGER, true
        ); // Detection Sensitivity [1 - 100]
        $this->SetupVariable(
            'm3_enable', $this->Translate('Zone 3'), '~Switch', $this->_getPosition(), VARIABLETYPE_BOOLEAN, true
        ); // Dis/Enable Alarm Detection Area 1 - 4: [0, 1]
        $this->SetupVariable(
            'm3_x', $this->Translate('X-Axis Offset'), '', $this->_getPosition(), VARIABLETYPE_INTEGER, true
        ); // X-Axis Offset of Alarm Area Origin [0-(1920-w)]
        $this->SetupVariable(
            'm3_y', $this->Translate('Y-Axis Offset'), '', $this->_getPosition(), VARIABLETYPE_INTEGER, true
        ); // Y-Axis Offset of Alarm Area Origin [0-(1080-h)]
        $this->SetupVariable(
            'm3_w', $this->Translate('Alarm Area Width'), '', $this->_getPosition(), VARIABLETYPE_INTEGER, true
        ); // Alarm Area Width [1-1920] Pixel
        $this->SetupVariable(
            'm3_h', $this->Translate('Alarm Area Height'), '', $this->_getPosition(), VARIABLETYPE_INTEGER, true
        ); // Alarm Area Height [1-1080] Pixel
        $this->SetupVariable(
            'm3_sensitivity', $this->Translate('Detection Sensitivity'), '~Intensity.100', $this->_getPosition(), VARIABLETYPE_INTEGER, true
        ); // Detection Sensitivity [1 - 100]
        $this->SetupVariable(
            'm4_enable', $this->Translate('Zone 4'), '~Switch', $this->_getPosition(), VARIABLETYPE_BOOLEAN, true
        ); // Dis/Enable Alarm Detection Area 1 - 4: [0, 1]
        $this->SetupVariable(
            'm4_x', $this->Translate('X-Axis Offset'), '', $this->_getPosition(), VARIABLETYPE_INTEGER, true
        ); // X-Axis Offset of Alarm Area Origin [0-(1920-w)]
        $this->SetupVariable(
            'm4_y', $this->Translate('Y-Axis Offset'), '', $this->_getPosition(), VARIABLETYPE_INTEGER, true
        ); // Y-Axis Offset of Alarm Area Origin [0-(1080-h)]
        $this->SetupVariable(
            'm4_w', $this->Translate('Alarm Area Width'), '', $this->_getPosition(), VARIABLETYPE_INTEGER, true
        ); // Alarm Area Width [1-1920] Pixel
        $this->SetupVariable(
            'm4_h', $this->Translate('Alarm Area Height'), '', $this->_getPosition(), VARIABLETYPE_INTEGER, true
        ); // Alarm Area Height [1-1080] Pixel
        $this->SetupVariable(
            'm4_sensitivity', $this->Translate('Detection Sensitivity'), '~Intensity.100', $this->_getPosition(), VARIABLETYPE_INTEGER, true
        ); // Detection Sensitivity [1 - 100]
        $this->RegisterProfile('INSTAR.wf_key', 'Network', '', '', 0, 0, 0, 0, VARIABLETYPE_STRING);
        $this->SetupVariable(
            'wf_key', $this->Translate('Key'), 'INSTAR.wf_key', $this->_getPosition(), VARIABLETYPE_STRING, true
        );  // Key max. 63 Characters (Allowed special characters: &='`)

        $this->SetupVariable(
            'show_1', $this->Translate('Privacy Zone 1'), '~Switch', $this->_getPosition(), VARIABLETYPE_BOOLEAN, true
        ); // Dis/Enable Area 1 - 4: [0, 1]
        $this->SetupVariable(
            'show_2', $this->Translate('Privacy Zone 2'), '~Switch', $this->_getPosition(), VARIABLETYPE_BOOLEAN, true
        ); // Dis/Enable Area 1 - 4: [0, 1]
        $this->SetupVariable(
            'show_3', $this->Translate('Privacy Zone 3'), '~Switch', $this->_getPosition(), VARIABLETYPE_BOOLEAN, true
        ); // Dis/Enable Area 1 - 4: [0, 1]
        $this->SetupVariable(
            'show_4', $this->Translate('Privacy Zone 4'), '~Switch', $this->_getPosition(), VARIABLETYPE_BOOLEAN, true
        ); // Dis/Enable Area 1 - 4: [0, 1]
        $this->SetupVariable(
            'color_1', $this->Translate('Color 1'), '~HexColor', $this->_getPosition(), VARIABLETYPE_INTEGER, true
        );
        $this->SetupVariable(
            'color_2', $this->Translate('Color 2'), '~HexColor', $this->_getPosition(), VARIABLETYPE_INTEGER, true
        );
        $this->SetupVariable(
            'color_3', $this->Translate('Color 3'), '~HexColor', $this->_getPosition(), VARIABLETYPE_INTEGER, true
        );
        $this->SetupVariable(
            'color_4', $this->Translate('Color 4'), '~HexColor', $this->_getPosition(), VARIABLETYPE_INTEGER, true
        );
        $this->SetupVariable(
            'x_1', $this->Translate('X Zone 1'), '', $this->_getPosition(), VARIABLETYPE_INTEGER, true
        );
        $this->SetupVariable(
            'x_2', $this->Translate('X Zone 2'), '', $this->_getPosition(), VARIABLETYPE_INTEGER, true
        );
        $this->SetupVariable(
            'x_3', $this->Translate('X Zone 3'), '', $this->_getPosition(), VARIABLETYPE_INTEGER, true
        );
        $this->SetupVariable(
            'x_4', $this->Translate('X Zone 4'), '', $this->_getPosition(), VARIABLETYPE_INTEGER, true
        );
        $this->SetupVariable(
            'y_1', $this->Translate('y Zone 1'), '', $this->_getPosition(), VARIABLETYPE_INTEGER, true
        );
        $this->SetupVariable(
            'y_2', $this->Translate('y Zone 2'), '', $this->_getPosition(), VARIABLETYPE_INTEGER, true
        );
        $this->SetupVariable(
            'y_3', $this->Translate('y Zone 3'), '', $this->_getPosition(), VARIABLETYPE_INTEGER, true
        );
        $this->SetupVariable(
            'y_4', $this->Translate('y Zone 4'), '', $this->_getPosition(), VARIABLETYPE_INTEGER, true
        );
        $this->SetupVariable(
            'w_1', $this->Translate('w Zone 1'), '', $this->_getPosition(), VARIABLETYPE_INTEGER, true
        );
        $this->SetupVariable(
            'w_2', $this->Translate('w Zone 2'), '', $this->_getPosition(), VARIABLETYPE_INTEGER, true
        );
        $this->SetupVariable(
            'w_3', $this->Translate('w Zone 3'), '', $this->_getPosition(), VARIABLETYPE_INTEGER, true
        );
        $this->SetupVariable(
            'w_4', $this->Translate('w Zone 4'), '', $this->_getPosition(), VARIABLETYPE_INTEGER, true
        );
        $this->SetupVariable(
            'h_1', $this->Translate('h Zone 1'), '', $this->_getPosition(), VARIABLETYPE_INTEGER, true
        );
        $this->SetupVariable(
            'h_2', $this->Translate('h Zone 2'), '', $this->_getPosition(), VARIABLETYPE_INTEGER, true
        );
        $this->SetupVariable(
            'h_3', $this->Translate('h Zone 3'), '', $this->_getPosition(), VARIABLETYPE_INTEGER, true
        );
        $this->SetupVariable(
            'h_4', $this->Translate('h Zone 4'), '', $this->_getPosition(), VARIABLETYPE_INTEGER, true
        );

        $this->RegisterProfileAssociation(
            'INSTAR.wf_enc', 'Network', '', '', 0, 1, 0, 0, VARIABLETYPE_INTEGER, [
                               [0, $this->Translate('TKIP'), '', -1],
                               [1, $this->Translate('AES'), '', -1]]
        );
        $this->SetupVariable(
            'wf_enc', $this->Translate('Type'), 'INSTAR.wf_enc', $this->_getPosition(), VARIABLETYPE_INTEGER, true
        ); // Key type 0 (TKIP), 1 (AES)
        $this->RegisterProfileAssociation(
            'INSTAR.wf_mode', 'Network', '', '', 0, 1, 0, 0, VARIABLETYPE_INTEGER, [
                                [0, $this->Translate('infrastructure'), '', -1],
                                [1, $this->Translate('ad-hoc'), '', -1]]
        );
        $this->SetupVariable(
            'wf_mode', $this->Translate('Network Type'), 'INSTAR.wf_mode', $this->_getPosition(), VARIABLETYPE_INTEGER, true
        ); // 0 (infra), 1 (ad-hoc)
        $this->SetupVariable(
            'our_enable', $this->Translate('INSTAR DDNS'), '~Switch', $this->_getPosition(), VARIABLETYPE_BOOLEAN, true
        ); // 1: INSTAR DDNS enabled, 0: INSTAR DDNS disabled
        $this->SetupVariable(
            'our_server', $this->Translate('INSTAR DDNS Server Domain'), '', $this->_getPosition(), VARIABLETYPE_STRING, false
        ); // INSTAR DDNS Server Domain
        $this->SetupVariable(
            'our_port', $this->Translate('INSTAR DDNS Server Port'), '', $this->_getPosition(), VARIABLETYPE_INTEGER, false
        );
        $this->SetupVariable(
            'our_uname', $this->Translate('INSTAR DDNS ID'), '', $this->_getPosition(), VARIABLETYPE_STRING, false
        ); // Your INSTAR DDNS ID
        $this->SetupVariable(
            'our_passwd', $this->Translate('INSTAR DDNS ID'), '', $this->_getPosition(), VARIABLETYPE_STRING, false
        ); // Your INSTAR DDNS Password
        $this->RegisterProfile('INSTAR.our_domain', 'Network', '', '', 0, 0, 0, 0, VARIABLETYPE_STRING);
        $this->SetupVariable(
            'our_domain', $this->Translate('Your INSTAR DDNS Address'), 'INSTAR.our_domain', $this->_getPosition(), VARIABLETYPE_STRING, false
        ); // Your INSTAR DDNS Address
        $this->SetupVariable(
            'our_interval', $this->Translate('Interval'), '', $this->_getPosition(), VARIABLETYPE_INTEGER, false
        );
        $this->SetupVariable(
            'd3th_enable', $this->Translate('DDNS'), '~Switch', $this->_getPosition(), VARIABLETYPE_BOOLEAN, true
        ); // 1: 3rd Party DDNS activated / INSTAR DDNS disabled, 0: 3rd Party DDNS deactivated / INSTAR DDNS enabled
        $this->RegisterProfileAssociation(
            'INSTAR.d3th_service', '', '', '', 0, 1, 0, 0, VARIABLETYPE_INTEGER, [
                                     [0, $this->Translate('DynDNS'), '', -1],
                                     [1, $this->Translate('NoIP'), '', -1]]
        );
        $this->SetupVariable(
            'd3th_service', $this->Translate('WiFi Key Type'), 'INSTAR.d3th_service', $this->_getPosition(), VARIABLETYPE_INTEGER, true
        ); // 0: DynDNS, 1: NoIP
        $this->SetupVariable(
            'd3th_uname', $this->Translate('DDNS Username'), '', $this->_getPosition(), VARIABLETYPE_STRING, false
        ); // Your DDNS Username
        $this->SetupVariable(
            'd3th_passwd', $this->Translate('DDNS Password'), '', $this->_getPosition(), VARIABLETYPE_STRING, false
        ); // Your DDNS Password
        $this->SetupVariable(
            'd3th_domain', $this->Translate('3rd Party DDNS Address'), '', $this->_getPosition(), VARIABLETYPE_STRING, false
        ); // Your 3rd Party DDNS Address
        $this->SetupVariable(
            'upm_enable', $this->Translate('UPNP'), '~Switch', $this->_getPosition(), VARIABLETYPE_BOOLEAN, true
        ); // 1: UPnP activated, 0: UPnP deactivated
        $this->SetupVariable(
            'ov_enable', $this->Translate('ONVIF'), '~Switch', $this->_getPosition(), VARIABLETYPE_BOOLEAN, true
        ); // 1: UPnP activated, 0: UPnP deactivated
        $this->RegisterProfile('INSTAR.ov_port', 'Network', '', '', 0, 0, 0, 0, VARIABLETYPE_INTEGER);
        $this->SetupVariable(
            'ov_port', $this->Translate('ONVIF Port'), 'INSTAR.ov_port', $this->_getPosition(), VARIABLETYPE_INTEGER, false
        ); // ONVIF Port
        $this->RegisterProfileAssociation(
            'INSTAR.ov_authflag', 'Camera', '', '', 0, 1, 0, 0, VARIABLETYPE_INTEGER, [
                                    [0, $this->Translate('ONVIF Login Required'), '', -1],
                                    [1, $this->Translate('ONVIF Authentication deactivated'), '', -1]]
        );
        $this->SetupVariable(
            'ov_authflag', $this->Translate('Authentication'), 'INSTAR.ov_authflag', $this->_getPosition(), VARIABLETYPE_INTEGER, true
        );  // 1 ONVIF Login Required, 0: ONVIF Authentication deactivated
        $this->RegisterProfileAssociation(
            'INSTAR.ov_forbitset', '', '', '', 0, 3, 0, 0, VARIABLETYPE_INTEGER, [
                                     [0, $this->Translate('Time zone setting enabled, image parameter settings enabled'), '', -1],
                                     [1, $this->Translate('Time zone setting disabled, the image parameter settings enabled'), '', -1],
                                     [2, $this->Translate('Time zone setting enabled, image parameter settings prohibited'), '', -1],
                                     [3, $this->Translate('Time zone setting prohibited, image parameter settings prohibited'), '', -1]]
        );
        $this->SetupVariable(
            'ov_forbitset', $this->Translate('Forbitset'), 'INSTAR.ov_forbitset', $this->_getPosition(), VARIABLETYPE_INTEGER, true
        );  // 0: Time zone setting enabled, image parameter settings enabled, 1: Time zone setting disabled, the image parameter settings enabled, 2: Time zone setting enabled, image parameter settings prohibited, 3: Time zone setting prohibited, image parameter settings prohibited
        $this->RegisterProfileAssociation(
            'INSTAR.ov_subchn', 'Camera', '', '', 11, 13, 0, 0, VARIABLETYPE_INTEGER, [
                                  [11, $this->Translate('Channel 11'), '', -1],
                                  [12, $this->Translate('Channel 12'), '', -1],
                                  [13, $this->Translate('Channel 13'), '', -1]]
        );
        $this->SetupVariable(
            'ov_subchn', $this->Translate('Video Subchannel'), 'INSTAR.ov_subchn', $this->_getPosition(), VARIABLETYPE_INTEGER, true
        );
        $this->RegisterProfileAssociation(
            'INSTAR.ov_snapchn', 'Camera', '', '', 11, 13, 0, 0, VARIABLETYPE_INTEGER, [
                                   [11, $this->Translate('Channel 11'), '', -1],
                                   [12, $this->Translate('Channel 12'), '', -1],
                                   [13, $this->Translate('Channel 13'), '', -1]]
        );
        $this->SetupVariable(
            'ov_snapchn', $this->Translate('Video Subchannel Snapshot'), 'INSTAR.ov_snapchn', $this->_getPosition(), VARIABLETYPE_INTEGER, true
        );
        $this->SetupVariable(
            'volume', $this->Translate('Input Sensitivity'), '~Intensity.100', $this->_getPosition(), VARIABLETYPE_INTEGER, true
        ); // Audio input volume: 1 - 100
        $this->RegisterProfileAssociation(
            'INSTAR.volin_type', 'Melody', '', '', 0, 1, 0, 0, VARIABLETYPE_INTEGER, [
                                   [0, $this->Translate('linear input'), '', -1],
                                   [1, $this->Translate('microphone input'), '', -1]]
        );
        $this->SetupVariable(
            'volin_type', $this->Translate('input type'), 'INSTAR.volin_type', $this->_getPosition(), VARIABLETYPE_INTEGER, true
        );
        $this->SetupVariable(
            'ao_volume', $this->Translate('Speaker / Output Volume'), '~Intensity.100', $this->_getPosition(), VARIABLETYPE_INTEGER, true
        ); // Audio output volume: 1 - 100
        $this->SetupVariable(
            'aec', $this->Translate('Audio Encoder'), '~Switch', $this->_getPosition(), VARIABLETYPE_BOOLEAN, true
        ); // audio encoder: 0, 1
        $this->SetupVariable(
            'denoise', $this->Translate('Noise suppression'), '~Switch', $this->_getPosition(), VARIABLETYPE_BOOLEAN, true
        ); // Noise suppression: 0, 1

        $this->SetupVariable(
            'aeswitch_1', $this->Translate('Audio encode switch 1'), '~Switch', $this->_getPosition(), VARIABLETYPE_BOOLEAN, true
        );
        $this->SetupVariable(
            'aeswitch_2', $this->Translate('Audio encode switch 2'), '~Switch', $this->_getPosition(), VARIABLETYPE_BOOLEAN, true
        );
        $this->SetupVariable(
            'aeswitch_3', $this->Translate('Audio encode switch 3'), '~Switch', $this->_getPosition(), VARIABLETYPE_BOOLEAN, true
        );
        $this->RegisterProfileAssociation(
            'INSTAR.chn', '', '', '', 0, 2, 0, 0, VARIABLETYPE_INTEGER, [
                            [0, $this->Translate('Audio Channel 1'), '', -1],
                            [1, $this->Translate('Audio Channel 2'), '', -1],
                            [2, $this->Translate('Audio Channel 3'), '', -1]]
        );
        $this->SetupVariable(
            'chn', $this->Translate('Audio Channel'), 'INSTAR.chn', $this->_getPosition(), VARIABLETYPE_INTEGER, true
        );
        $this->RegisterProfileAssociation(
            'INSTAR.aeformat', '', '', '', 0, 1, 0, 0, VARIABLETYPE_INTEGER, [
                                 [0, $this->Translate('G711A 64Kbps'), '', -1],
                                 [1, $this->Translate('G726 16Kbps'), '', -1]]
        );
        // $this->RegisterProfile('INSTAR.volume', 'Speaker', '', '', 0, 0, 0, 0, VARIABLETYPE_INTEGER);
        $this->SetupVariable(
            'aeformat_1', $this->Translate('Audio encode format channel 1'), 'INSTAR.aeformat', $this->_getPosition(), VARIABLETYPE_INTEGER, true
        );
        $this->SetupVariable(
            'aeformat_2', $this->Translate('Audio encode format channel 2'), 'INSTAR.aeformat', $this->_getPosition(), VARIABLETYPE_INTEGER, true
        );
        $this->SetupVariable(
            'aeformat_3', $this->Translate('Audio encode format channel 3'), 'INSTAR.aeformat', $this->_getPosition(), VARIABLETYPE_INTEGER, true
        );
        $this->RegisterProfile('INSTAR.ft_server', 'Network', '', '', 0, 0, 0, 0, VARIABLETYPE_STRING);
        $this->SetupVariable(
            'ft_server', $this->Translate('FTP Server'), 'INSTAR.ft_server', $this->_getPosition(), VARIABLETYPE_STRING, false
        ); // FTP Server Address
        $this->RegisterProfile('INSTAR.ft_port', 'Network', '', '', 0, 0, 0, 0, VARIABLETYPE_INTEGER);
        $this->SetupVariable(
            'ft_port', $this->Translate('FTP port'), 'INSTAR.ft_port', $this->_getPosition(), VARIABLETYPE_INTEGER, true
        ); // FTP Server Port
        $this->RegisterProfile('INSTAR.ft_username', 'Network', '', '', 0, 0, 0, 0, VARIABLETYPE_STRING);
        $this->SetupVariable(
            'ft_username', $this->Translate('FTP Username'), 'INSTAR.ft_username', $this->_getPosition(), VARIABLETYPE_STRING, false
        ); // FTP Username
        $this->RegisterProfile('INSTAR.ft_password', 'Network', '', '', 0, 0, 0, 0, VARIABLETYPE_STRING);
        $this->SetupVariable(
            'ft_password', $this->Translate('FTP Password'), 'INSTAR.ft_password', $this->_getPosition(), VARIABLETYPE_STRING, false
        ); // FTP Password
        $this->RegisterProfileAssociation(
            'INSTAR.ft_mode', 'Network', '', '', 0, 1, 0, 0, VARIABLETYPE_INTEGER, [
                                [0, $this->Translate('FTP Mode Port'), '', -1],
                                [1, $this->Translate('Passive'), '', -1]]
        );
        $this->SetupVariable(
            'ft_mode', $this->Translate('FTP Mode'), 'INSTAR.ft_mode', $this->_getPosition(), VARIABLETYPE_INTEGER, true
        );
        $this->RegisterProfile('INSTAR.ft_dirname', 'Network', '', '', 0, 0, 0, 0, VARIABLETYPE_STRING);
        $this->SetupVariable(
            'ft_dirname', $this->Translate('FTP Directory'), 'INSTAR.ft_dirname', $this->_getPosition(), VARIABLETYPE_STRING, false
        ); // FTP Directory
        $this->RegisterProfileAssociation(
            'INSTAR.ft_autocreatedir', '', '', '', 0, 1, 0, 0, VARIABLETYPE_INTEGER, [
                                         [0, $this->Translate('no'), '', -1],
                                         [1, $this->Translate('yes'), '', -1]]
        );
        $this->SetupVariable(
            'ft_autocreatedir', $this->Translate('Auto Create Directory'), 'INSTAR.ft_autocreatedir', $this->_getPosition(), VARIABLETYPE_INTEGER,
            true
        ); // Automatically create the directory 0 (no), 1 (yes)
        $this->RegisterProfileAssociation(
            'INSTAR.ft_dirmode', 'Network', '', '', 0, 1, 0, 0, VARIABLETYPE_INTEGER, [
                                   [0, $this->Translate('sort by day'), '', -1],
                                   [1, $this->Translate('one folder'), '', -1]]
        );
        $this->SetupVariable(
            'ft_dirmode', $this->Translate('FTP Directory Mode'), 'INSTAR.ft_dirmode', $this->_getPosition(), VARIABLETYPE_INTEGER, true
        );  // 0 (Create a new Folder every Day), 1 (All Files in One Directory)
        $this->RegisterProfileAssociation(
            'INSTAR.ft_ssl', '', '', '', 0, 2, 0, 0, VARIABLETYPE_INTEGER, [
                               [0, $this->Translate('no encryption'), '', -1],
                               [1, $this->Translate('SSL'), '', -1],
                               [2, $this->Translate('TLS'), '', -1]]
        );
        $this->SetupVariable(
            'ft_ssl', $this->Translate('FTP SSL'), 'INSTAR.ft_ssl', $this->_getPosition(), VARIABLETYPE_INTEGER, true
        ); // FTPS Encryption - 0：None, 1：SSL, 2: TLS
        $this->RegisterProfileAssociation(
            'INSTAR.videomode', 'Camera', '', '', 11, 41, 0, 0, VARIABLETYPE_INTEGER, [
                                  [11, $this->Translate('CH11=1080p'), '', -1],
                                  [12, $this->Translate('CH12=320p'), '', -1],
                                  [13, $this->Translate('CH13=160p'), '', -1],
                                  [41, $this->Translate('Videomode'), '', -1]]
        );
        $this->SetupVariable(
            'videomode', $this->Translate('Videomode'), 'INSTAR.videomode', $this->_getPosition(), VARIABLETYPE_INTEGER, true
        ); //  Resolution CH11=1080p, CH12=320p, CH13=160p
        $this->RegisterProfile('INSTAR.vinorm', 'Camera', '', '', 0, 0, 0, 0, VARIABLETYPE_STRING);
        $this->SetupVariable(
            'vinorm', $this->Translate('Videonorm'), 'INSTAR.vinorm', $this->_getPosition(), VARIABLETYPE_STRING, false
        ); //  50Hz(PAL)

        $this->SetupVariable(
            'wdrmode', $this->Translate('Hardware Wide Dynamic Range'), '~Switch', $this->_getPosition(), VARIABLETYPE_BOOLEAN, true
        );
        $this->SetupVariable(
            'profile', $this->Translate('h.264 encoder'), '~Switch', $this->_getPosition(), VARIABLETYPE_BOOLEAN, true
        ); //  h.264 encoder 0: baseline, 1: mainprofile
        $this->SetupVariable(
            'maxchn', $this->Translate('Maximum active video channels'), '', $this->_getPosition(), VARIABLETYPE_INTEGER, true
        );
        $this->SetupVariable(
            'lanmac', $this->Translate('MAC Address of the LAN Interface'), '', $this->_getPosition(), VARIABLETYPE_STRING, false
        ); // MAC Address of the LAN Interface
        $this->SetupVariable(
            'wifimac', $this->Translate('MAC Address of the WLAN Interface'), '', $this->_getPosition(), VARIABLETYPE_STRING, false
        ); // MAC Address of the WLAN Interface
        /*
        $this->RegisterProfileAssociation(
            'INSTAR.bps', '', '', '', 11, 41, 0, 0, VARIABLETYPE_INTEGER, [
                                  [11, $this->Translate('CH11=1080p'), '', -1],
                                  [12, $this->Translate('CH12=320p'), '', -1],
                                  [13, $this->Translate('CH13=160p'), '', -1],
                                  [41, $this->Translate('Videomode'), '', -1]]
        );
        */
        $this->SetupVariable(
            'bps_1', $this->Translate('Bitrate'), '', $this->_getPosition(), VARIABLETYPE_INTEGER, true
        ); //  Bitrate CH11 1080p = 512kbps - 4096kbps, Bitrate CH11 320p = 512kbps - 2048kbps, Bitrate CH11 160p = 90kbps - 512kbps
        $this->SetupVariable(
            'bps_2', $this->Translate('Bitrate'), '', $this->_getPosition(), VARIABLETYPE_INTEGER, true
        ); //  Bitrate CH11 1080p = 512kbps - 4096kbps, Bitrate CH11 320p = 512kbps - 2048kbps, Bitrate CH11 160p = 90kbps - 512kbps
        $this->SetupVariable(
            'bps_3', $this->Translate('Bitrate'), '', $this->_getPosition(), VARIABLETYPE_INTEGER, true
        ); //  Bitrate CH11 1080p = 512kbps - 4096kbps, Bitrate CH11 320p = 512kbps - 2048kbps, Bitrate CH11 160p = 90kbps - 512kbps
        $this->RegisterProfile('INSTAR.fps_pal', '', '', '', 0, 25, 1, 0, VARIABLETYPE_INTEGER);
        $this->RegisterProfile('INSTAR.fps_ntsc', '', '', '', 0, 30, 1, 0, VARIABLETYPE_INTEGER);
        $this->SetupVariable(
            'fps_1', $this->Translate('Bitrate'), 'INSTAR.fps_pal', $this->_getPosition(), VARIABLETYPE_INTEGER, true
        ); //  Framerate: PAL：Range [1 ~ 25], NTSC：Range [1 ~ 30]
        $this->SetupVariable(
            'fps_2', $this->Translate('Bitrate'), 'INSTAR.fps_pal', $this->_getPosition(), VARIABLETYPE_INTEGER, true
        ); //  Framerate: PAL：Range [1 ~ 25], NTSC：Range [1 ~ 30]
        $this->SetupVariable(
            'fps_3', $this->Translate('Bitrate'), 'INSTAR.fps_pal', $this->_getPosition(), VARIABLETYPE_INTEGER, true
        ); //  Framerate: PAL：Range [1 ~ 25], NTSC：Range [1 ~ 30]
        $this->RegisterProfile('INSTAR.gop', '', '', '', 10, 150, 1, 0, VARIABLETYPE_INTEGER);
        $this->SetupVariable(
            'gop_1', $this->Translate('gop'), 'INSTAR.gop', $this->_getPosition(), VARIABLETYPE_INTEGER, true
        ); //  Keyframe Interval: gop Range [10 ~ 150]
        $this->SetupVariable(
            'gop_2', $this->Translate('gop'), 'INSTAR.gop', $this->_getPosition(), VARIABLETYPE_INTEGER, true
        ); //  Keyframe Interval: gop Range [10 ~ 150]
        $this->SetupVariable(
            'gop_3', $this->Translate('gop'), 'INSTAR.gop', $this->_getPosition(), VARIABLETYPE_INTEGER, true
        ); //  Keyframe Interval: gop Range [10 ~ 150]

        $this->RegisterProfileAssociation(
            'INSTAR.brmode', '', '', '', 11, 41, 0, 0, VARIABLETYPE_INTEGER, [
                               [0, $this->Translate('fixed bit rate'), '', -1],
                               [1, $this->Translate('changeable bit rate'), '', -1]]
        );

        $this->SetupVariable(
            'brmode_1', $this->Translate('Video encode control'), 'INSTAR.brmode', $this->_getPosition(), VARIABLETYPE_INTEGER, true
        ); //  Video encode control: 0: fixed bit rate, 1: changeable bit rate
        $this->SetupVariable(
            'brmode_2', $this->Translate('Video encode control'), 'INSTAR.brmode', $this->_getPosition(), VARIABLETYPE_INTEGER, true
        ); //  Video encode control: 0: fixed bit rate, 1: changeable bit rate
        $this->SetupVariable(
            'brmode_3', $this->Translate('Video encode control'), 'INSTAR.brmode', $this->_getPosition(), VARIABLETYPE_INTEGER, true
        ); //  Video encode control: 0: fixed bit rate, 1: changeable bit rate
        $this->RegisterProfile('INSTAR.imagegrade', '', '', '', 1, 6, 1, 0, VARIABLETYPE_INTEGER);
        $this->SetupVariable(
            'imagegrade_1', $this->Translate('gop'), 'INSTAR.imagegrade', $this->_getPosition(), VARIABLETYPE_INTEGER, true
        );  //  1 (low compression) -6 (high compression)

        $this->SetupVariable(
            'imagegrade_2', $this->Translate('gop'), 'INSTAR.imagegrade', $this->_getPosition(), VARIABLETYPE_INTEGER, true
        ); //  1 (low compression) -6 (high compression)
        $this->SetupVariable(
            'imagegrade_3', $this->Translate('gop'), 'INSTAR.imagegrade', $this->_getPosition(), VARIABLETYPE_INTEGER, true
        ); //  1 (low compression) -6 (high compression)
        $this->SetupVariable(
            'wdrauto', $this->Translate('Auto WDR'), '~Switch', $this->_getPosition(), VARIABLETYPE_BOOLEAN, true
        );  //  Hardware Wide Dynamic Range 0 (Auto), 1 (Manual)

        $this->RegisterProfile('INSTAR.wdrautval', '', '', '', 0, 2, 1, 0, VARIABLETYPE_INTEGER);
        $this->SetupVariable(
            'wdrautval', $this->Translate('Dynamic WDR Level'), 'INSTAR.wdrautval', $this->_getPosition(), VARIABLETYPE_INTEGER, true
        );  //  Auto WDR Strength [0-2]
        $this->RegisterProfile('INSTAR.wdrmanval', '', '', '', 0, 255, 1, 0, VARIABLETYPE_INTEGER);
        $this->SetupVariable(
            'wdrmanval', $this->Translate('Fix WDR Level'), 'INSTAR.wdrmanval', $this->_getPosition(), VARIABLETYPE_INTEGER, true
        ); //  Manual WDR Strength [0-255]
        $this->SetupVariable(
            'd3noauto', $this->Translate('Noise Reduction Mode'), '~Switch', $this->_getPosition(), VARIABLETYPE_BOOLEAN, true
        ); //  3D Noise Reduction Mode: 0 (auto), 1 (manual)
        $this->RegisterProfile('INSTAR.d3noval', '', '', '', 0, 255, 1, 0, VARIABLETYPE_INTEGER);
        $this->SetupVariable(
            'd3noval', $this->Translate('Noise Reduction Strength'), 'INSTAR.d3noval', $this->_getPosition(), VARIABLETYPE_INTEGER, true
        ); //  3D Noise Reduction Strength: [0-255]
        $this->SetupVariable(
            'wdr', $this->Translate('Software Wide Dynamic Range'), '~Switch', $this->_getPosition(), VARIABLETYPE_BOOLEAN, true
        ); //  Software Wide Dynamic Range Mode: [on, off]
        $this->RegisterProfile('INSTAR.name_0_osd', 'Clock', '', '', 0, 0, 0, 0, VARIABLETYPE_STRING);
        $this->SetupVariable(
            'name_0_osd', $this->Translate('OSD Time'), 'INSTAR.name_0_osd', $this->_getPosition(), VARIABLETYPE_STRING, true
        );
        $this->RegisterProfile('INSTAR.name_1_osd', 'Menu', '', '', 0, 0, 0, 0, VARIABLETYPE_STRING);
        $this->SetupVariable(
            'name_1_osd', $this->Translate('OSD Name'), 'INSTAR.name_1_osd', $this->_getPosition(), VARIABLETYPE_STRING, true
        );
        $this->SetupVariable(
            'show_0_osd', $this->Translate('Display Time Stamp'), '~Switch', $this->_getPosition(), VARIABLETYPE_BOOLEAN, true
        );
        $this->SetupVariable(
            'show_1_osd', $this->Translate('Display Camera Name'), '~Switch', $this->_getPosition(), VARIABLETYPE_BOOLEAN, true
        );
        $this->SetupVariable(
            'start_position_activate_action', $this->Translate('Start position / activate action'), '~Switch', $this->_getPosition(),
            VARIABLETYPE_BOOLEAN, true
        );
        $this->SetupVariable(
            'start_position_select_action', $this->Translate('Start position / select action'), 'INSTAR.Position', $this->_getPosition(),
            VARIABLETYPE_INTEGER, true
        ); // (0-7), integer
        $this->SetupVariable(
            'md_preset_switch', $this->Translate('Activate alarm position'), '~Switch', $this->_getPosition(), VARIABLETYPE_BOOLEAN, true
        ); // Go to [alarmpresetindex] (Alarm Position) at Alarm Event - [on, off]
        $this->SetupVariable(
            'md_preset_switch_position', $this->Translate('Select alarm position'), 'INSTAR.Position', $this->_getPosition(), VARIABLETYPE_INTEGER,
            true
        ); // (0-7), integer
        $this->SetupVariable(
            'timerpreset_enable', $this->Translate('Park function (active after 120 sec)'), '~Switch', $this->_getPosition(), VARIABLETYPE_BOOLEAN,
            true
        );  // De/Activate Park Position - [0, 1]
        $this->SetupVariable(
            'timerpreset_index', $this->Translate('Select park position'), 'INSTAR.Position', $this->_getPosition(), VARIABLETYPE_INTEGER, true
        ); // (0-7), integer
        $this->SetupVariable(
            'tour_parkposition', $this->Translate('Use tour as parking position'), '~Switch', $this->_getPosition(), VARIABLETYPE_BOOLEAN, true
        );  // De/Activate Park Position - [0, 1]
        $this->SetupVariable(
            'admin_value46', $this->Translate('Activate step by step control'), '~Switch', $this->_getPosition(), VARIABLETYPE_BOOLEAN, true
        );  // De/Activate One-Step Pan&Tilt Control - [0, 1]
        $this->RegisterProfile('INSTAR.ptz_tour_time', 'Clock', '', '', 0, 120, 1, 0, VARIABLETYPE_INTEGER);
        $this->SetupVariable(
            'ptz_tour_time', $this->Translate('Dwell time in seconds'), 'INSTAR.ptz_tour_time', $this->_getPosition(), VARIABLETYPE_INTEGER, true
        );
        $this->RegisterProfile('INSTAR.admin_value44', 'Clock', '', '', 0, 120, 1, 0, VARIABLETYPE_INTEGER);
        $this->SetupVariable(
            'admin_value44', $this->Translate('duration of manual recordings'), 'INSTAR.admin_value44', $this->_getPosition(), VARIABLETYPE_INTEGER,
            true
        );  // Recording Length in Seconds [60 - 3600] / Set [0] to Deactivate File Splitting

        $this->SetupVariable(
            'pir_enable', $this->Translate('PIR Sensor'), '~Switch', $this->_getPosition(), VARIABLETYPE_BOOLEAN, true
        ); // De/Activate PIR Sensor [0, 1]
        /*
         *

        $this->SetupVariable('m1_threshold', 0); // Detection Threshold (not active)
        $this->SetupVariable('m2_threshold', 0); // Detection Threshold (not active)
        $this->SetupVariable('m3_threshold', 0); // Detection Threshold (not active)
        $this->SetupVariable('m4_threshold', 0); // Detection Threshold (not active)
        $this->SetupVariable('tour_enable', 0); // De/Activate PTZ Tour [0, 1]

        $this->SetupVariable('width_1', 1920); //  Video width

        $this->SetupVariable('width_2', 1920); //  Video width

        $this->SetupVariable('width_3', 1920); //  Video width

        $this->SetupVariable('height_1', 1080); //  Video height

        $this->SetupVariable('height_2', 1080); //  Video height

        $this->SetupVariable('height_3', 1080); //  Video height

        $this->SetupVariable('display_mode', 0); //  Current 0: black and white mode 1: color mode

        $this->SetupVariable('night', 'off'); //  Night mode 0 (inactive) off, 1 (active) on

        $this->SetupVariable('shutter', 0); //  Shutter Speed [0 - 65535]

        $this->SetupVariable('gc', 0); //  Night illumination, value Range 0=auto, [1-255]=manual

        $this->SetupVariable('ae', 0); //  Minimum exposure, range 0-65535

        $this->SetupVariable('aemode', 0); //  Auto-Exposure mode, the range: 0 Automatic, 1 Indoor, 2 Outdoor

        $this->SetupVariable('imgmode', 0); //  Image priority mode: 0: Frame rate priority, 1: Illumination priority


        $this->SetupVariable('gcauto', 0); //  Signal Gain: 0 (auto), 1 (manual)

        $this->SetupVariable('gcval', 0); //  Gain Multiplier: [0-255]

        $this->SetupVariable('aemodeex', 'Highlight'); // Exposure Mode: Highlight (Exposure) priority, Lowlight (Framerate) priority

        $this->SetupVariable('aelowval', 0); //  Lowlight Intensity [0-255]

        $this->SetupVariable('aehighval', 0); //  Highlight Intensity [0-255]

        $this->SetupVariable('aeratio', 0); //  Length Exposure Ratio [0-100]

        $this->SetupVariable('ldc_enable', 0); //  Image Distortion Correction: 0 (disabled), 1 (enabled)

        $this->SetupVariable('ldc_xoffset', 0); //  Horizontal Image Offset

        $this->SetupVariable('ldc_yoffset', 0); //  Vertical Image Offset

        $this->SetupVariable('ldc_ratio', 0); //  Distortion Correction [0-511]


        $this->SetupVariable('region', 1); //  OSD time zone, 1: OSD Name region

        $this->SetupVariable('show', 0); //  0 (hidden), 1 (displayed)

        $this->SetupVariable('place', 0); //  0: top, 1: bottom

        $this->SetupVariable('x_region', 0); //  OSD region x coordinate

        $this->SetupVariable('y_region', 0); // OSD region y coordinate

        $this->SetupVariable('name_region', ''); //  Region 0="YYYY-MM-DD hh:mm:ss", region="Camera Name"


        $this->SetupVariable('privacy_region', 1); // Privacy Mask [1-4]

        $this->SetupVariable('ma_server', ''); // SMTP Server Address e.g. smtp.strato.de

        $this->SetupVariable('ma_port', 25); // SMTP Server Port e.g. 25, 587 (TLS) or 465 (SSL)

        $this->SetupVariable('ma_ssl', 25); // SSL Encryption 0 (Disabled), 1 (SSL), 2 (TLS) or 3 (STARTTLS)

        $this->SetupVariable('ma_logintype', 1); // Enable (1) or Disable (3) Authentication

        $this->SetupVariable('ma_username', ''); // SMTP Server Username

        $this->SetupVariable('ma_password', ''); // SMTP Server Password

        $this->SetupVariable('ma_from', ''); // Sender Email Address

        $this->SetupVariable('ma_to', ''); // Receiver Email Address

        $this->SetupVariable('ma_subject', ''); // Mail Subject Line

        $this->SetupVariable('ma_text', ''); // Mail Content




        $this->SetupVariable('panspeed', 0); // fast (0) - slow (2)

        $this->SetupVariable('tiltspeed', 0); // fast (0) - slow (2)

        $this->SetupVariable('panscan', 1); // [1-50] - Number of hscans

        $this->SetupVariable('tiltscan', 1); // [1-50] - Number of vscans

        $this->SetupVariable('movehome', 'on'); // [on, off] - Go to Center or Postion [initpresetindex] after Restart

        $this->SetupVariable('ptzalarmmask', 'on'); // [on, off] - Deactivate Motion Detection during Pan&Tilt

        $this->SetupVariable('selfdet', ''); // De/Activate Calibration (Required for Preset Postions and PTZ Tour)

        $this->SetupVariable('alarmpresetindex', 0); // [1-8]; - Alarmposition

        $this->SetupVariable('initpresetindex', 0); // [1-8]; - Position Camera goes to after Restart





        $this->SetupVariable('timerpreset_index', 1); // Select Park Position - [1 - 8]

        $this->SetupVariable('timerpreset_interval', 30); // Time before going back to Park Position in seconds - [30 - 900]



        $this->SetupVariable('tour_times', 1); // Number of Rounds [1 - 50]

        $this->SetupVariable('tour_index', 1); // Set Tour Positions to Preset Position [1-8] / [-1] to deactivate Tour Position

        $this->SetupVariable('tour_interval', 60); // Set Pause when Tour Position is reached in seconds [60-43200]

        $this->SetupVariable('light1_enable', 'on'); // WiFi Status LED - [on, off]

        $this->SetupVariable('light2_enable', 'on'); // Power LED - [on, off]



        $this->SetupVariable('emailsnap', 'on'); // E-mail Alarm / Send Snapshot

        $this->SetupVariable('snap', 'on'); // Save Snapshot to SD

        $this->SetupVariable('record', 'on'); // Save Video to SD

        $this->SetupVariable('ftprec', 'on'); // Send Video to FTP Server

        $this->SetupVariable('relay', 'on'); // Alarm Out Relay

        $this->SetupVariable('ftpsnap', 'on'); // Send Snapshot to FTP Server

        $this->SetupVariable('sound', 'on'); // Audio Alarm Signal

        $this->SetupVariable('type', 'on'); // Link Alarm Areas and Alarm-Input

        $this->SetupVariable('aa_enable', 0); // De/Activate Audio Detection [0, 1]

        $this->SetupVariable('aa_value', 10); // Sensitivity [10 - 100]

        $this->SetupVariable('aa_time', 0); // Minimum Audio Signal Length Threshold [0 - 10]

        $this->SetupVariable('io_enable', 0); // De/Activate Alarm Input [0, 1]

        $this->SetupVariable('io_flag', 0); // Circuit Nomally Closed N.C. [0] or Normally Open N.O. [1]



        $this->SetupVariable('pir_flag', 0); // Circuit Nomally Closed N.C. [0] or Normally Open N.O. [1]

        $this->SetupVariable('snap_chn', 11); // Set Snapshot Resolution to Video Channel [11, 12, 13]

        $this->SetupVariable('snap_name', ''); // Fixed File Name for All Alarm Snapshots (leave empty for auto-name by time stamp)

        $this->SetupVariable(
            'snap_timer_name', ''
        ); // Fixed File Name for All Photoseries Snapshots (leave empty for auto-name by time stamp)

        $this->SetupVariable(
            'snap_name_mode', 0
        ); // Set Filename to [0] time stamp, or [1] fixed file name set snapname and snaptimer_name

        $this->SetupVariable('snap_count', 1); // Number of Snapshot saved to SD Card per Alarm Event [1-15]

        $this->SetupVariable('ftp_snap_count', 1); // Number of Snapshot send to FTP Server per Alarm Event [1-15]

        $this->SetupVariable('email_snap_count', 1); // Number of Snapshot send by Email per Alarm Event [1-15]

        $this->SetupVariable('admin17', 17); // admin17



        $this->SetupVariable(
            'as_week0', 'NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN'
        ); // Sunday：every 24 hrs divide to half hr is a segment , use P or N to indicate if the alarm is active - [P] means active , [N] means inactive

        $this->SetupVariable(
            'as_week1', 'NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN'
        ); // Sunday：every 24 hrs divide to half hr is a segment , use P or N to indicate if the alarm is active - [P] means active , [N] means inactive

        $this->SetupVariable(
            'as_week2', 'NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN'
        ); // Sunday：every 24 hrs divide to half hr is a segment , use P or N to indicate if the alarm is active - [P] means active , [N] means inactive

        $this->SetupVariable(
            'as_week3', 'NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN'
        ); // Sunday：every 24 hrs divide to half hr is a segment , use P or N to indicate if the alarm is active - [P] means active , [N] means inactive

        $this->SetupVariable(
            'as_week4', 'NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN'
        ); // Sunday：every 24 hrs divide to half hr is a segment , use P or N to indicate if the alarm is active - [P] means active , [N] means inactive

        $this->SetupVariable(
            'as_week5', 'NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN'
        ); // Sunday：every 24 hrs divide to half hr is a segment , use P or N to indicate if the alarm is active - [P] means active , [N] means inactive

        $this->SetupVariable(
            'as_week6', 'NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN'
        ); // Sunday：every 24 hrs divide to half hr is a segment , use P or N to indicate if the alarm is active - [P] means active , [N] means inactive

        $this->SetupVariable(
            'plancgi_enable_0', 0
        ); // De/Activate Switch Event at Time - [0 - 86399] in seconds = 0:00:00 - 23:59:59 o´clock

        $this->SetupVariable(
            'plancgi_enable_1', 0
        ); // De/Activate Switch Event at Time - [0 - 86399] in seconds = 0:00:00 - 23:59:59 o´clock

        $this->SetupVariable(
            'plancgi_enable_2', 0
        ); // De/Activate Switch Event at Time - [0 - 86399] in seconds = 0:00:00 - 23:59:59 o´clock

        $this->SetupVariable(
            'plancgi_enable_3', 0
        ); // De/Activate Switch Event at Time - [0 - 86399] in seconds = 0:00:00 - 23:59:59 o´clock

        $this->SetupVariable(
            'plancgi_enable_4', 0
        ); // De/Activate Switch Event at Time - [0 - 86399] in seconds = 0:00:00 - 23:59:59 o´clock

        $this->SetupVariable(
            'plancgi_enable_5', 0
        ); // De/Activate Switch Event at Time - [0 - 86399] in seconds = 0:00:00 - 23:59:59 o´clock

        $this->SetupVariable(
            'plancgi_enable_6', 0
        ); // De/Activate Switch Event at Time - [0 - 86399] in seconds = 0:00:00 - 23:59:59 o´clock

        $this->SetupVariable(
            'plancgi_enable_7', 0
        ); // De/Activate Switch Event at Time - [0 - 86399] in seconds = 0:00:00 - 23:59:59 o´clock

        $this->SetupVariable(
            'plancgi_enable_8', 0
        ); // De/Activate Switch Event at Time - [0 - 86399] in seconds = 0:00:00 - 23:59:59 o´clock

        $this->SetupVariable(
            'plancgi_enable_9', 0
        ); // De/Activate Switch Event at Time - [0 - 86399] in seconds = 0:00:00 - 23:59:59 o´clock

        $this->SetupVariable(
            'plancgi_enable_10', 0
        ); // De/Activate Switch Event at Time - [0 - 86399] in seconds = 0:00:00 - 23:59:59 o´clock

        $this->SetupVariable(
            'plancgi_enable_11', 0
        ); // De/Activate Switch Event at Time - [0 - 86399] in seconds = 0:00:00 - 23:59:59 o´clock

        $this->SetupVariable(
            'plancgi_enable_12', 0
        ); // De/Activate Switch Event at Time - [0 - 86399] in seconds = 0:00:00 - 23:59:59 o´clock

        $this->SetupVariable(
            'plancgi_enable_13', 0
        ); // De/Activate Switch Event at Time - [0 - 86399] in seconds = 0:00:00 - 23:59:59 o´clock

        $this->SetupVariable(
            'plancgi_enable_14', 0
        ); // De/Activate Switch Event at Time - [0 - 86399] in seconds = 0:00:00 - 23:59:59 o´clock

        $this->SetupVariable(
            'plancgi_enable_15', 0
        ); // De/Activate Switch Event at Time - [0 - 86399] in seconds = 0:00:00 - 23:59:59 o´clock

        $this->SetupVariable(
            'plancgi_enable_16', 0
        ); // De/Activate Switch Event at Time - [0 - 86399] in seconds = 0:00:00 - 23:59:59 o´clock

        $this->SetupVariable(
            'plancgi_enable_17', 0
        ); // De/Activate Switch Event at Time - [0 - 86399] in seconds = 0:00:00 - 23:59:59 o´clock

        $this->SetupVariable(
            'plancgi_enable_18', 0
        ); // De/Activate Switch Event at Time - [0 - 86399] in seconds = 0:00:00 - 23:59:59 o´clock

        $this->SetupVariable(
            'plancgi_enable_19', 0
        ); // De/Activate Switch Event at Time - [0 - 86399] in seconds = 0:00:00 - 23:59:59 o´clock

        $this->SetupVariable('as_server', ''); // Address of the receiving Server (e.g. Home Automation Server) [IPv4 Address]

        $this->SetupVariable('as_port', 0); // Port of the receiving Server [1-65536]

        $this->SetupVariable('as_auth', 0); // Authentication required [0, 1]

        $this->SetupVariable('as_username', ''); // Alarmserver Username

        $this->SetupVariable('as_password', ''); // Alarmserver Password

        $this->SetupVariable('as_path', ''); // URL Path

        $this->SetupVariable('as_area', ''); // Send Query when Motion is Detected

        $this->SetupVariable('as_io', ''); // Send Query when Alarm Input is Triggered

        $this->SetupVariable('as_audio', ''); // Send Query when Audio Alarm is Triggered

        $this->SetupVariable('as_areaio', ''); // Send Query when Motion is Detected and Input is Triggered

        $this->SetupVariable('as_activequery', ''); // Append Alarm Trigger to Query

        $this->SetupVariable('as_query1', ''); // Activate Sending optional Parameter 1

        $this->SetupVariable('as_queryattr1', ''); // Command 1 Attribute

        $this->SetupVariable('as_queryval1', ''); // Command 1 Value

        $this->SetupVariable('as_query2', ''); // Activate Sending optional Parameter 2

        $this->SetupVariable('as_queryattr2', ''); // Command 2 Attribute

        $this->SetupVariable('as_queryval2', ''); // Command 2 Value

        $this->SetupVariable('as_query3', ''); // Activate Sending optional Parameter 3

        $this->SetupVariable('as_queryattr3', ''); // Command 3 Attribute

        $this->SetupVariable('as_queryval3', ''); // Command 3 Value

        $this->SetupVariable('md_server2_switch', 'on'); // De/Activate Alarm Server2 [off, on]

        $this->SetupVariable('as_server_2', ''); // Address of the receiving Server (e.g. Home Automation Server) [IPv4 Address]

        $this->SetupVariable('as_port_2', 0); // Port of the receiving Server [1-65536]

        $this->SetupVariable('as_auth_2', 0); // Authentication required [0, 1]

        $this->SetupVariable('as_username_2', ''); // Alarmserver Username

        $this->SetupVariable('as_password_2', ''); // Alarmserver Password

        $this->SetupVariable('as_path_2', ''); // URL Path

        $this->SetupVariable('as_area_2', ''); // Send Query when Motion is Detected

        $this->SetupVariable('as_io_2', ''); // Send Query when Alarm Input is Triggered

        $this->SetupVariable('as_audio_2', ''); // Send Query when Audio Alarm is Triggered

        $this->SetupVariable('as_areaio_2', ''); // Send Query when Motion is Detected and Input is Triggered

        $this->SetupVariable('as_activequery_2', ''); // Append Alarm Trigger to Query

        $this->SetupVariable('as_query1_2', ''); // Activate Sending optional Parameter 1

        $this->SetupVariable('as_queryattr1_2', ''); // Command 1 Attribute

        $this->SetupVariable('as_queryval1_2', ''); // Command 1 Value

        $this->SetupVariable('as_query2_2', ''); // Activate Sending optional Parameter 2

        $this->SetupVariable('as_queryattr2_2', ''); // Command 2 Attribute

        $this->SetupVariable('as_queryval2_2', ''); // Command 2 Value

        $this->SetupVariable('as_query3_2', ''); // Activate Sending optional Parameter 3

        $this->SetupVariable('as_queryattr3_2', ''); // Command 3 Attribute

        $this->SetupVariable('as_queryval3_2', ''); // Command 3 Value

        $this->SetupVariable('as_snap_enable', 0); // Dis/Enable snapshot to SD card： [0, 1]

        $this->SetupVariable('as_snap_interval', 1); // Time interval between shots in seconds [1-86400]

        $this->SetupVariable('as_email_enable', 0); // DDis/Enable snapshot to Email： [0, 1]

        $this->SetupVariable('as_email_interval', 1); // Time interval between shots in seconds [1-86400]

        $this->SetupVariable('as_ftp_enable', 0); // Dis/Enable snapshot to FTP Server： [0, 1]

        $this->SetupVariable('as_ftp_interval', 1); // Time interval between shots in seconds [1-86400]

        $this->SetupVariable('as_cloud_enable', 0); // Dis/Enable snapshot to INSTAR Cloud Server： [0, 1]

        $this->SetupVariable('as_cloud_interval', 1); // Time interval between shots in seconds [1-86400]
        $this->SetupVariable(
            'rt_week0', 'NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN'
        ); // Sunday：every 24 hrs divide to half hr is a segment , use P or N to indicate if the alarm is active - [P] means active , [N] means inactive

        $this->SetupVariable(
            'rt_week1', 'NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN'
        ); // Sunday：every 24 hrs divide to half hr is a segment , use P or N to indicate if the alarm is active - [P] means active , [N] means inactive

        $this->SetupVariable(
            'rt_week2', 'NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN'
        ); // Sunday：every 24 hrs divide to half hr is a segment , use P or N to indicate if the alarm is active - [P] means active , [N] means inactive

        $this->SetupVariable(
            'rt_week3', 'NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN'
        ); // Sunday：every 24 hrs divide to half hr is a segment , use P or N to indicate if the alarm is active - [P] means active , [N] means inactive

        $this->SetupVariable(
            'rt_week4', 'NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN'
        ); // Sunday：every 24 hrs divide to half hr is a segment , use P or N to indicate if the alarm is active - [P] means active , [N] means inactive

        $this->SetupVariable(
            'rt_week5', 'NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN'
        ); // Sunday：every 24 hrs divide to half hr is a segment , use P or N to indicate if the alarm is active - [P] means active , [N] means inactive

        $this->SetupVariable(
            'rt_week6', 'NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN'
        ); // Sunday：every 24 hrs divide to half hr is a segment , use P or N to indicate if the alarm is active - [P] means active , [N] means inactive

        //  Video Tasks
        $this->SetupVariable('planrec_enable', 1); // Dis/Enable Recording to SD card： [0, 1]

        $this->SetupVariable('planrec_chn', 11); // Record Kamera Channel [11, 12, 13]

        $this->SetupVariable('planrec_time', 1); // Recoding File Length (15-900seconds)

        $this->SetupVariable('internetip', ''); // Get Wide Area Network Address

        $this->SetupVariable('at_username0', ''); // Username for User 1

        $this->SetupVariable('at_password0', ''); // Password for User 1

        $this->SetupVariable('at_authlevel0', 3); // User Authorisation: admin/user/guest [15, 3, 1]

        $this->SetupVariable('at_enable0', 1); // De/Activate [0, 1]

        $this->SetupVariable('at_username1', ''); // Username for User 2

        $this->SetupVariable('at_password1', ''); // Password for User 2

        $this->SetupVariable('at_authlevel1', 3); // User Authorisation: admin/user/guest [15, 3, 1]

        $this->SetupVariable('at_enable1', 1); // De/Activate [0, 1]

        $this->SetupVariable('at_username2', ''); // Username for User 3

        $this->SetupVariable('at_password2', ''); // Password for User 3

        $this->SetupVariable('at_authlevel2', 3); // User Authorisation: admin/user/guest [15, 3, 1]

        $this->SetupVariable('at_enable2', 1); // De/Activate [0, 1]

        $this->SetupVariable('time', ''); // Camera Time

        $this->SetupVariable('timeZone', ''); // Cameras Time Zone e.g.[Europe%2FAmsterdam]

        $this->SetupVariable('dstmode', 'on'); // De/Activate Daylight Saving Time [off, on]

        $this->SetupVariable('ntpenable', 1); // De/Activate NTP Time Adjustment [0, 1]
        $this->SetupVariable('ntpserver', ''); // NTP Server Addres
        $this->SetupVariable('ntpinterval', 1); // NTP Sync Interval in Hours [1 - 12]
        $this->SetupVariable('guest_value11', 'de'); // UI Language Selector [de, en, fr, cn]

         */
    }

    /** Variable anlegen / löschen
     *
     * @param $ident
     * @param $name
     * @param $profile
     * @param $position
     * @param $vartype
     * @param $visible
     *
     * @return bool|int
     */
    protected function SetupVariable($ident, $name, $profile, $position, $vartype, $enableaction, $visible = false)
    {
        $objid = false;
        if ($visible) {
            $this->SendDebug('INSTAR Varibale:', 'Variable with Ident ' . $ident . ' is visible', 0);
        } else {
            $visible = $this->ReadAttributeBoolean($ident . '_enabled');
            $this->SendDebug('INSTAR Varibale:', 'Variable with Ident ' . $ident . ' is shown' . print_r($visible, true), 0);
        }
        if ($visible == true) {
            switch ($vartype) {
                case VARIABLETYPE_BOOLEAN:
                    $objid = $this->RegisterVariableBoolean($ident, $name, $profile, $position);
                    $key   = array_search($ident, $this->NoAttributes);
                    if ($key > 0) {
                        // Fix Variable without Attribute
                    } else {
                        if ($ident == 'flip' || $ident == 'mirror' || $ident == 'md_preset_switch') {
                            $value = $this->ReadAttributeString($ident);
                            if ($value == 'on') {
                                $value = true;
                            } else {
                                $value = false;
                            }
                        } else {
                            $key = array_search($ident, $this->BooleanAttributes);
                            if ($key > 0) {
                                $value = boolval($this->ReadAttributeInteger($ident));
                            } else {
                                $value = $this->ReadAttributeBoolean($ident);
                            }
                        }
                        $this->SetValue($ident, $value);
                    }
                    break;
                case VARIABLETYPE_INTEGER:
                    $objid = $this->RegisterVariableInteger($ident, $name, $profile, $position);
                    $key   = array_search($ident, $this->NoAttributes);
                    if ($key > 0) {
                        // Fix Variable without Attribute
                    } elseif ($ident == 'scene') {
                        $value = $this->ReadAttributeString($ident);
                        if ($value == 'Auto') {
                            $value = 0;
                        } elseif ($value == 'On') {
                            $value = 1;
                        } else {
                            $value = 2;
                        }
                        $this->SetValue($ident, $value);
                    } elseif ($ident == 'th3ddnsstatus') {
                        $value = $this->ReadAttributeString($ident);
                        if ($value == 'ok') {
                            $value = 0;
                        } elseif ($value == 'off') {
                            $value = 1;
                        } else {
                            $value = 2;
                        }
                        $this->SetValue($ident, $value);
                    } elseif ($ident == 'sdstatus') {
                        $value = $this->ReadAttributeString($ident);
                        if ($value == 'Out') {
                            $value = 0;
                        } elseif ($value == 'Ready') {
                            $value = 1;
                        } else {
                            $value = 2;
                        }
                        $this->SetValue($ident, $value);
                    } elseif ($ident == 'infraredstat') {
                        $value = $this->ReadAttributeString($ident);
                        if ($value == 'auto') {
                            $value = 0;
                        } elseif ($value == 'open') {
                            $value = 1;
                        } else {
                            $value = 2;
                        }
                        $this->SetValue($ident, $value);
                    }
                    elseif ($ident == 'upnpstatus') {
                        $value = $this->ReadAttributeString($ident);
                        if ($value == 'ok') {
                            $value = 0;
                        } elseif ($value == 'off') {
                            $value = 1;
                        } else {
                            $value = 2;
                        }
                        $this->SetValue($ident, $value);
                    }
                    elseif ($ident == 'facddnsstatus') {
                        $value = $this->ReadAttributeString($ident);
                        if ($value == 'ok') {
                            $value = 0;
                        } elseif ($value == 'off') {
                            $value = 1;
                        } else {
                            $value = 2;
                        }
                        $this->SetValue($ident, $value);
                    }
                    else {
                        $value = $this->ReadAttributeInteger($ident);
                        $this->SetValue($ident, $value);
                    }
                    break;
                case VARIABLETYPE_FLOAT:
                    $objid = $this->RegisterVariableFloat($ident, $name, $profile, $position);
                    break;
                case VARIABLETYPE_STRING:
                    $objid = $this->RegisterVariableString($ident, $name, $profile, $position);
                    $key   = array_search($ident, $this->NoAttributes);
                    if ($key > 0) {
                        // Fix Variable without Attribute
                    } else {
                        $value = $this->ReadAttributeString($ident);
                        $this->SetValue($ident, $value);
                    }
                    break;
            }
            if ($enableaction) {
                $this->EnableAction($ident);
            }
        } else {
            $objid = @$this->GetIDForIdent($ident);
            if ($objid > 0) {
                $this->UnregisterVariable($ident);
            }
        }
        return $objid;
    }

    public function SetWebFrontVariable($ident, $value)
    {
        $this->WriteAttributeBoolean($ident, $value);
        $this->SetupVariables();
    }

    protected function GetAPIParameters($cameratype)
    {
        $API_Cameras = [];

        $API_Cameras[self::IN_9020_Full_HD] = [
            'model'                => true,
            'hardVersion'          => true,
            'softVersion'          => true,
            'webVersion'           => true,
            'name'                 => true,
            'sdfreespace'          => true,
            'sdtotalspace'         => true,
            'platformstatus'       => true,
            'dhcpflag'             => true,
            'ip'                   => true,
            'netmask'              => true,
            'gateway'              => true,
            'dnsstat'              => true,
            'fdnsip'               => true,
            'sdnsip'               => true,
            'macaddress'           => true,
            'networktype'          => true,
            'th3ddnsstatus'        => true,
            'startdate'            => true,
            'facddnsstatus'        => true,
            'sdstatus'             => true,
            'httpport'             => true,
            'httpsport'            => true,
            'rtspport'             => true,
            'rtsp_aenable'         => true,
            'rtmpport'             => true,
            'wf_enable'            => true,
            'wf_ssid'              => true,
            'wf_auth'              => true,
            'wf_key'               => true,
            'wf_enc'               => true,
            'wf_mode'              => true,
            'our_enable'           => true,
            'our_server'           => true,
            'our_port'             => true,
            'our_uname'            => true,
            'our_passwd'           => true,
            'our_domain'           => true,
            'our_interval'         => true,
            'd3th_enable'          => true,
            'd3th_service'         => true,
            'd3th_uname'           => true,
            'd3th_passwd'          => true,
            'd3th_domain'          => true,
            'upm_enable'           => true,
            'ov_enable'            => true,
            'ov_port'              => true,
            'ov_authflag'          => true,
            'ov_forbitset'         => true,
            'ov_subchn'            => true,
            'ov_snapchn'           => true,
            'volume'               => true,
            'volin_type'           => true,
            'aec'                  => true,
            'denoise'              => true,
            'ao_volume'            => true,
            'chn'                  => true,
            'aeswitch_1'           => true,
            'aeswitch_2'           => true,
            'aeformat'             => true,
            'videomode'            => true,
            'vinorm'               => true,
            'wdrmode'              => true,
            'profile'              => true,
            'maxchn'               => true,
            'bps_1'                => true,
            'bps_2'                => true,
            'bps_3'                => true,
            'fps_1'                => true,
            'fps_2'                => true,
            'fps_3'                => true,
            'gop_1'                => true,
            'gop_2'                => true,
            'gop_3'                => true,
            'brmode_1'             => true,
            'brmode_2'             => true,
            'brmode_3'             => true,
            'imagegrade_1'         => true,
            'imagegrade_2'         => true,
            'imagegrade_3'         => true,
            'width_1'              => true,
            'width_2'              => true,
            'width_3'              => true,
            'height_1'             => true,
            'height_2'             => true,
            'height_3'             => true,
            'display_mode'         => true,
            'brightness'           => true,
            'saturation'           => true,
            'sharpness'            => true,
            'contrast'             => true,
            'hue'                  => true,
            'wdr'                  => true,
            'night'                => true,
            'shutter'              => true,
            'flip'                 => true,
            'mirror'               => true,
            'scene'                => true,
            'gc'                   => true,
            'ae'                   => true,
            'targety'              => true,
            'noise'                => true,
            'gamma'                => true,
            'aemode'               => true,
            'imgmode'              => true,
            'wdrauto'              => true,
            'wdrautval'            => true,
            'wdrmanval'            => true,
            'd3noauto'             => true,
            'd3noval'              => true,
            'gcauto'               => true,
            'gcval'                => true,
            'aemodeex'             => true,
            'aelowval'             => true,
            'aehighval'            => true,
            'aeratio'              => true,
            'ldc_enable'           => true,
            'ldc_xoffset'          => true,
            'ldc_yoffset'          => true,
            'ldc_ratio'            => true,
            'region'               => true,
            'show'                 => true,
            'place'                => true,
            'x_region'             => true,
            'y_region'             => true,
            'name_region'          => true,
            'privacy_region'       => true,
            'show_1'               => true,
            'show_2'               => true,
            'show_3'               => true,
            'show_4'               => true,
            'color_1'              => true,
            'color_2'              => true,
            'color_3'              => true,
            'color_4'              => true,
            'x_1'                  => true,
            'x_2'                  => true,
            'x_3'                  => true,
            'x_4'                  => true,
            'y_1'                  => true,
            'y_2'                  => true,
            'y_3'                  => true,
            'y_4'                  => true,
            'w_1'                  => true,
            'w_2'                  => true,
            'w_3'                  => true,
            'w_4'                  => true,
            'h_1'                  => true,
            'h_2'                  => true,
            'h_3'                  => true,
            'h_4'                  => true,
            'ma_server'            => true,
            'ma_port'              => true,
            'ma_ssl'               => true,
            'ma_logintype'         => true,
            'ma_username'          => true,
            'ma_password'          => true,
            'ma_from'              => true,
            'ma_to'                => true,
            'ma_subject'           => true,
            'ma_text'              => true,
            'ft_server'            => true,
            'ft_port'              => true,
            'ft_username'          => true,
            'ft_password'          => true,
            'ft_mode'              => true,
            'ft_dirname'           => true,
            'ft_autocreatedir'     => true,
            'ft_dirmode'           => true,
            'ft_ssl'               => true,
            'infraredstat'         => true,
            'panspeed'             => true,
            'tiltspeed'            => true,
            'panscan'              => true,
            'tiltscan'             => true,
            'movehome'             => true,
            'ptzalarmmask'         => true,
            'selfdet'              => true,
            'alarmpresetindex'     => true,
            'initpresetindex'      => true,
            'md_preset_switch'     => true,
            'timerpreset_enable'   => true,
            'timerpreset_index'    => true,
            'timerpreset_interval' => true,
            'admin_value46'        => true,
            'tour_enable'          => true,
            'tour_times'           => true,
            'tour_index'           => true,
            'tour_interval'        => true,
            'light1_enable'        => true,
            'light2_enable'        => true,
            'admin_value44'        => true,
            'emailsnap'            => true,
            'snap'                 => true,
            'record'               => true,
            'ftprec'               => true,
            'relay'                => true,
            'ftpsnap'              => true,
            'sound'                => true,
            'type'                 => true,
            'aa_enable'            => true,
            'aa_value'             => true,
            'aa_time'              => true,
            'io_enable'            => true,
            'io_flag'              => true,
            'pir_enable'           => true,
            'pir_flag'             => true,
            'snap_chn'             => true,
            'snap_name'            => true,
            'snap_timer_name'      => true,
            'snap_name_mode'       => true,
            'snap_count'           => true,
            'ftp_snap_count'       => true,
            'email_snap_count'     => true,
            'admin17'              => true,
            'm1_enable'            => true,
            'm2_enable'            => true,
            'm3_enable'            => true,
            'm4_enable'            => true,
            'm1_x'                 => true,
            'm2_x'                 => true,
            'm3_x'                 => true,
            'm4_x'                 => true,
            'm1_y'                 => true,
            'm2_y'                 => true,
            'm3_y'                 => true,
            'm4_y'                 => true,
            'm1_w'                 => true,
            'm2_w'                 => true,
            'm3_w'                 => true,
            'm4_w'                 => true,
            'm1_h'                 => true,
            'm2_h'                 => true,
            'm3_h'                 => true,
            'm4_h'                 => true,
            'm1_sensitivity'       => true,
            'm2_sensitivity'       => true,
            'm3_sensitivity'       => true,
            'm4_sensitivity'       => true,
            'm1_threshold'         => true,
            'm2_threshold'         => true,
            'm3_threshold'         => true,
            'm4_threshold'         => true,
            'as_week0'             => true,
            'as_week1'             => true,
            'as_week2'             => true,
            'as_week3'             => true,
            'as_week4'             => true,
            'as_week5'             => true,
            'as_week6'             => true,
            'plancgi_enable_0'     => true,
            'plancgi_enable_1'     => true,
            'plancgi_enable_2'     => true,
            'plancgi_enable_3'     => true,
            'plancgi_enable_4'     => true,
            'plancgi_enable_5'     => true,
            'plancgi_enable_6'     => true,
            'plancgi_enable_7'     => true,
            'plancgi_enable_8'     => true,
            'plancgi_enable_9'     => true,
            'plancgi_enable_10'    => true,
            'plancgi_enable_11'    => true,
            'plancgi_enable_12'    => true,
            'plancgi_enable_13'    => true,
            'plancgi_enable_14'    => true,
            'plancgi_enable_15'    => true,
            'plancgi_enable_16'    => true,
            'plancgi_enable_17'    => true,
            'plancgi_enable_18'    => true,
            'plancgi_enable_19'    => true,
            'as_server'            => true,
            'as_port'              => true,
            'as_auth'              => true,
            'as_username'          => true,
            'as_password'          => true,
            'as_path'              => true,
            'as_area'              => true,
            'as_io'                => true,
            'as_audio'             => true,
            'as_areaio'            => true,
            'as_activequery'       => true,
            'as_query1'            => true,
            'as_queryattr1'        => true,
            'as_queryval1'         => true,
            'as_query2'            => true,
            'as_queryattr2'        => true,
            'as_queryval2'         => true,
            'as_query3'            => true,
            'as_queryattr3'        => true,
            'as_queryval3'         => true,
            'md_server2_switch'    => true,
            'as_server_2'          => true,
            'as_port_2'            => true,
            'as_auth_2'            => true,
            'as_username_2'        => true,
            'as_password_2'        => true,
            'as_path_2'            => true,
            'as_area_2'            => true,
            'as_io_2'              => true,
            'as_audio_2'           => true,
            'as_areaio_2'          => true,
            'as_activequery_2'     => true,
            'as_query1_2'          => true,
            'as_queryattr1_2'      => true,
            'as_queryval1_2'       => true,
            'as_query2_2'          => true,
            'as_queryattr2_2'      => true,
            'as_queryval2_2'       => true,
            'as_query3_2'          => true,
            'as_queryattr3_2'      => true,
            'as_queryval3_2'       => true,
            'as_snap_enable'       => true,
            'as_snap_interval'     => true,
            'as_email_enable'      => true,
            'as_email_interval'    => true,
            'as_ftp_enable'        => true,
            'as_ftp_interval'      => true,
            'as_cloud_enable'      => true,
            'as_cloud_interval'    => true,
            'rt_week0'             => true,
            'rt_week1'             => true,
            'rt_week2'             => true,
            'rt_week3'             => true,
            'rt_week4'             => true,
            'rt_week5'             => true,
            'rt_week6'             => true,
            'planrec_enable'       => true,
            'planrec_chn'          => true,
            'planrec_time'         => true,
            'lanmac'               => true,
            'wifimac'              => true,
            'internetip'           => true,
            'at_username0'         => true,
            'at_password0'         => true,
            'at_authlevel0'        => true,
            'at_enable0'           => true,
            'at_username1'         => true,
            'at_password1'         => true,
            'at_authlevel1'        => true,
            'at_enable1'           => true,
            'at_username2'         => true,
            'at_password2'         => true,
            'at_authlevel2'        => true,
            'at_enable2'           => true,
            'time'                 => true,
            'timeZone'             => true,
            'dstmode'              => true,
            'ntpenable'            => true,
            'ntpserver'            => true,
            'ntpinterval'          => true,
            'guest_value11'        => true,];


        $API_Cameras[self::IN_9010_Full_HD] = [];
        $API_Cameras[self::IN_9008_Full_HD] = [];
        $API_Cameras[self::IN_7011_HD]      = [];
        $API_Cameras[self::IN_5907_HD]      = [];
        $API_Cameras[self::IN_5905_HD]      = [];
        $API_Cameras[self::IN_3011]         = [];
        $API_Cameras[self::IN_6001_HD]      = [];
        $API_Cameras[self::IN_6012_HD]      = [];
        $API_Cameras[self::IN_6014_HD]      = [];
        $API_Cameras[self::IN_8003_Full_HD] = [];
        $API_Cameras[self::IN_8015_Full_HD] = [];

        $API_Parameters = [];
        foreach ($API_Cameras as $key => $API_Camera) {
            if ($key == $cameratype) {
                $API_Parameters = $API_Camera;
            }
        }

        return $API_Parameters;
    }

    public function UpdateSettings()
    {
        $this->GetCameraModel();
        $this->GetServerInfo();
        $this->GetNetInfo();
        $this->GetCameraNetworkConfiguration();
        $this->GetCameraPorts();
        $this->GetRTSPAuthenticationState();
        $this->GetCameraWIFIConfiguration();
        $this->GetCameraWiFiAccessPoint();
        $this->GetDDNSConfiguration();
        $this->Get3rdPartyDDNSConfiguration();
        $this->GetUPNPConfiguration();
        $this->GetONVIFConfiguration();
        $this->GetVolumeAudioInput();
        $this->GetVolumeAudioOutput();
        $this->GetAudioEncoderParameterChannel1();
        $this->GetAudioEncoderParameterChannel2();
        $this->GetAudioEncoderParameterChannel3();
        $this->GetVideoAttributes();
        $this->GetVideoEncoderAttributes();
        $this->GetImageParameter();
        $this->GetExtendedImageAttributes();
        $this->GetLensDistortionCorrection();
        $this->GetOSDParameter();
        $this->GetPrivacyMaskAttributes();
        $this->GetEmailNotificationParameter();
        $this->GetINSTARCloudServerParameter();
        $this->GetFTPServerParameter();
        $this->GetTimeWindowSwitchIR();
        $this->GetPan_TiltSettings();
        $this->GetStateAlarmPosition();
        $this->GetParkPositionParameter();
        $this->GetOneStepPanTiltControl();
        $this->GetPanTiltTourSettings();
        $this->GetStatusLED();
        $this->GetFileLengthManualRecordings();
        $this->GetAlarmActionParameterEmailsnap();
        $this->GetAlarmActionParameterSnap();
        $this->GetAlarmActionParameterRecord();
        $this->GetAlarmActionParameterFTPRecord();
        $this->GetAlarmActionParameterRelay();
        $this->GetAlarmActionParameterFTPSnap();
        $this->GetAlarmActionParameterSound();
        $this->GetAlarmActionParameterType();
        $this->GetAudioDetectionParameter();
        $this->GetAlarmInputParameter();
        $this->GetPassiveInfraredMotionDetectionSensorParameter();
        $this->GetNumberAlarmSnapshots();
        $this->GetAlarmAreasParameter();
        $this->GetMotionDetectionTimeScheduleParameter();
        $this->GetTimerParameter();
        $this->GetConfigurationPushService();
        $this->GetAlarmServer1Parameter();
        $this->GetAlarmserver2Configuration();
        $this->GetIntervalSnapshotSeriesTask();
        $this->GetScheduleIntervalSnapshotSeries();
        $this->GetPlannedVideoRecordingAttribute();
        $this->GetScheduleManualRecordingTask();
        $this->GetLAN_MACAddress();
        $this->GetWIFI_MACAddress();
        $this->GetWAN_IPAddress();
        $this->GetNetworkConfiguration();
        $this->GetCameraTimeConfiguration();
        $this->GetCamerasNetworkConfiguration();
        $this->GetCameraUI_LanguageConfiguration();
        $this->GetCameraSystemLog();
        $this->GetCameraRebootAutomatically();
        $this->GetIRMode();
    }

    public function SendPushNotificationTest(int $state_id, bool $force_send)
    {
        $this->SendDebug('Notification Test Message', 'state id ' . $state_id, 0);
        $this->SendPushNotification($state_id, $force_send);
    }

    /**
     * Send push notifications.
     *
     * @param string $state_id
     * @param bool   $force_send
     *
     * @return bool
     */
    protected function SendPushNotification($state_id, $force_send = false)
    {
        // get codes by state_id
        $codes  = $this->state_codes;
        $prefix = 'Event: ';

        $notification_ident = 'notification_alarm';

        // check notification
        $last_notification = GetValueInteger($this->GetIDForIdent($notification_ident));
        // TODO check time since last event

        // return false, when last notification is the same as current notification or id is 0
        /*
        if (($last_notification == $state_id && !$force_send) || $state_id == 0) {
            return false;
        }
        */
        // get picture
        $targetid = 0;
        $this->SendDebug('Notification Message', 'state id ' . $state_id, 0);
        // check notification instance (webfront)
        $instance_id = $this->ReadPropertyInteger('notification_instance');
        $this->SendDebug('Notification Message', 'Webfront configurator id ' . $instance_id, 0);
        if ($instance_id > 0) {
            // get notification settings
            if ($notifications = @json_decode($this->ReadPropertyString('notifications'), true)) {
                // loop notifications and search for current state
                foreach ($notifications as $notification) {
                    if ($notification['state_id'] == $state_id) {
                        // check if notification is enabled
                        if ($notification['enabled'] || $force_send) {
                            // send notification
                            if ($state_id > 0 && isset($codes[$state_id])) {
                                // build message
                                $title   = IPS_GetName($this->InstanceID); // instance name
                                $message = $prefix . $this->Translate($codes[$state_id]);
                                $this->SendDebug('Push Message', $title . ' / ' . $message . ' / sound ' . $notification['sound'], 0);
                                // send notification
                                WFC_PushNotification($instance_id, $title, $message, $notification['sound'], $targetid);
                            }
                        }

                        // break loop
                        return true;
                    }
                }
            }
        } else {
            $this->SendDebug('Notification Message', 'No webfront configurator selected, no push message send', 0);
        }

        return false;
    }

    /**
     * Get push notifications.
     *
     * @return string json encoded settings
     */
    protected function GetPushNotifications()
    {
        // translate default notifications
        $notifications = $this->push_notifications;
        foreach ($notifications as &$notification) {
            $notification['name'] = $this->Translate($notification['name']);
        }

        // merge with current settings
        if ($current_notifications = @$this->ReadPropertyString('notifications')) {
            $current_notifications = json_decode($current_notifications, true);
            foreach ($current_notifications as $current) {
                // loop and replace settings
                foreach ($notifications as &$n) {
                    if ($n['state_id'] == $current['state_id']) {
                        $n['sound']   = $current['sound'];
                        $n['enabled'] = $current['enabled'];

                        break;
                    }
                }
            }
        }

        return json_encode($notifications);
    }

    protected function GetHostIP()
    {
        $ip_hosts = [];
        if (IPS_GetKernelVersion() >= 5.2) {
            $network = Sys_GetNetworkInfo();
            foreach ($network as $key => $device) {
                $ip_hosts[] = $device['IP'];
            }
        } else {
            $ip = exec("sudo ifconfig eth0 | grep 'inet Adresse:' | cut -d: -f2 | awk '{ print $1}'");
            if ($ip == '') {
                $network = Sys_GetNetworkInfo();
                foreach ($network as $key => $device) {
                    $ip_hosts[] = $device['IP'];
                }
            }
        }
        $this->SendDebug('IP Symcon', json_encode($ip_hosts), 0);
        return $ip_hosts;
    }

    protected function CheckEmail($email)
    {
        $ipsversion = $this->GetIPSVersion();
        if ($email == '') {
            $this->SetStatus(205); //Felder dürfen nicht leer sein
        }
        if (filter_var($email, FILTER_VALIDATE_EMAIL)) {
            //email valid
            if ($ipsversion == 0) {
                //Skript beim EmailAlert
                $IDEmail = @($this->GetIDForIdent('SendEmailAlert'));
                if ($IDEmail === false) {
                    $IDEmail = $this->RegisterScript('SendEmailAlert', 'Email Alert', $this->CreateEmailAlertScript($email), 19);
                    IPS_SetHidden($IDEmail, true);
                }
                $this->SetEmailEvent($IDEmail, true);
            }
        } else {
            $this->SetStatus(207); //email not valid
        }
    }

    protected function is_valid_domain($url)
    {

        $validation = false;
        /*Parse URL*/
        $urlparts = parse_url(filter_var($url, FILTER_SANITIZE_URL));
        /*Check host exist else path assign to host*/
        if (!isset($urlparts['host'])) {
            $urlparts['host'] = $urlparts['path'];
        }

        if ($urlparts['host'] != '') {
            /*Add scheme if not found*/
            if (!isset($urlparts['scheme'])) {
                $urlparts['scheme'] = 'http';
            }
            /*Validation*/
            if (checkdnsrr($urlparts['host'], 'A') && in_array($urlparts['scheme'], ['http', 'https']) && ip2long($urlparts['host']) === false) {
                $urlparts['host'] = preg_replace('/^www\./', '', $urlparts['host']);
                $url              = $urlparts['scheme'] . '://' . $urlparts['host'] . '/';

                if (filter_var($url, FILTER_VALIDATE_URL) !== false && @get_headers($url)) {
                    $validation = true;
                }
            }
        }

        if (!$validation) {
            //echo $url.' Its Invalid Domain Name.';
            $domaincheck = false;
            return $domaincheck;
        } else {
            //echo $url.' is a Valid Domain Name.';
            $domaincheck = true;
            return $domaincheck;
        }

    }

    protected function is_valid_localdomain($url)
    {

        $validation = false;
        /*Parse URL*/
        $urlparts = parse_url(filter_var($url, FILTER_SANITIZE_URL));
        /*Check host exist else path assign to host*/
        if (!isset($urlparts['host'])) {
            $urlparts['host'] = $urlparts['path'];
        }

        if ($urlparts['host'] != '') {
            /*Add scheme if not found*/
            if (!isset($urlparts['scheme'])) {
                $urlparts['scheme'] = 'http';
            }
            /*Validation*/
            if (checkdnsrr($urlparts['host'], 'A') && in_array($urlparts['scheme'], ['http', 'https']) && ip2long($urlparts['host']) === false) {
                $urlparts['host'] = preg_replace('/^www\./', '', $urlparts['host']);
                $url              = $urlparts['scheme'] . '://' . $urlparts['host'] . '/';

                if (filter_var($url, FILTER_VALIDATE_URL) !== false && @get_headers($url)) {
                    $validation = true;
                }
            }
        }

        if (!$validation) {
            //echo $url.' Its Invalid Domain Name.';
            $domaincheck = false;
            return $domaincheck;
        } else {
            //echo $url.' is a Valid Domain Name.';
            $domaincheck = true;
            return $domaincheck;
        }

    }

    protected function GetURLPrefix($url)
    {
        $prehttp  = strpos($url, 'http://');
        $prehttps = strpos($url, 'https://');
        if ($prehttp === 0) {
            $prefix = ''; //Prefix ist http
        } elseif ($prehttps === 0) {
            $prefix = ''; //Prefix ist https
        } else {
            $prefix = 'http://'; //Prefix ergänzen
        }
        return $prefix;
    }

    protected function GetConnectURL()
    {
        $instID = IPS_GetInstanceListByModuleID('{9486D575-BE8C-4ED8-B5B5-20930E26DE6F}')[0];
        if (IPS_GetKernelVersion() >= 5.2) {
            $url = CC_GetConnectURL($instID);
        } else {
            $url = CC_GetUrl($instID);
        }
        return $url;
    }

    public function MessageSink($TimeStamp, $SenderID, $Message, $Data)
    {
        $this->LogMessage('SenderID: ' . $SenderID . ', Message: ' . $Message . ', Data:' . json_encode($Data), KL_DEBUG);
        switch ($Message) {
            case IM_CHANGESTATUS:
                if ($Data[0] === IS_ACTIVE) {
                    $this->ApplyChanges();
                }
                break;

            case IPS_KERNELMESSAGE:
                if ($Data[0] === KR_READY) {
                    $this->ApplyChanges();
                }
                break;
        }

        if ($SenderID == $this->GetIDForIdent('LastMovement')) {
            $this->GetSnapshot();
            $email = $this->ReadPropertyString('email');
            $this->EmailAlert($email);
            $notification_alarm_type = GetValue($this->GetIDForIdent('notification_alarm'));
            $this->SendPushNotification($notification_alarm_type, false);
            $this->SendDebug('INSTAR recieved LastMovement at', date('H:i', time()), 0);
            $this->SendDebug('INSTAR', 'Message from SenderID ' . $SenderID . ' with Message ' . $Message . '\r\n Data: ' . print_r($Data, true), 0);
        }
    }

    private function GetHostURL()
    {
        $host     = $this->ReadPropertyString('Host');
        $port     = $this->ReadPropertyInteger('Port');
        $user     = $this->ReadPropertyString('User');
        $password = $this->ReadPropertyString('Password');
        $root     = $user . ':' . $password . '@' . $host . ':' . $port;
        return $root;
    }

    private function GetINSTARURL()
    {
        $host = $this->ReadPropertyString('Host');
        $port = $this->ReadPropertyInteger('Port');
        $root = $host . ':' . $port;
        return $root;
    }

    /** Set Language
     * 1 = german, 2 = english, 3 = french, 4 = chinese.
     *
     * @param string $language
     *
     * @return bool|string
     */
    public function SetLanguage(string $language)
    {

        if ($language == 'german') {
            $response = @file_get_contents('http://' . $this->GetHostURL() . '/cgi-bin/hi3510/param.cgi?cmd=set_instar_admin&-index=11&-value=1');
        } elseif ($language == 'english') {
            $response = @file_get_contents('http://' . $this->GetHostURL() . '/cgi-bin/hi3510/param.cgi?cmd=set_instar_admin&-index=11&-value=2');
        } elseif ($language == 'french') {
            $response = @file_get_contents('http://' . $this->GetHostURL() . '/cgi-bin/hi3510/param.cgi?cmd=set_instar_admin&-index=11&-value=3');
        } elseif ($language == 'chinese') {
            $response = @file_get_contents('http://' . $this->GetHostURL() . '/cgi-bin/hi3510/param.cgi?cmd=set_instar_admin&-index=11&-value=4');
        }
        return $response;
    }

    private function SetAPI($model)
    {
        //
        if ($model == self::IN_9008_Full_HD || $model == self::IN_9010_Full_HD || $model == self::IN_9020_Full_HD || $model == self::IN_8003_Full_HD
            || $model == self::IN_8015_Full_HD) {
            $this->WriteAttributeBoolean('1080p_API', true);
            $this->WriteAttributeBoolean('720p_API', false);
            $this->WriteAttributeBoolean('VGA_API', false);
        }
        // IN-5905 HD
        if ($model == self::IN_5905_HD || $model == self::IN_5907_HD || $model == self::IN_7011_HD || $model == self::IN_6001_HD
            || $model == self::IN_6012_HD
            || $model == self::IN_6014_HD) {
            $this->WriteAttributeBoolean('1080p_API', false);
            $this->WriteAttributeBoolean('720p_API', true);
            $this->WriteAttributeBoolean('VGA_API', false);
        }
        //
        if ($model == 0 || $model == self::IN_3011) {
            $this->WriteAttributeBoolean('1080p_API', false);
            $this->WriteAttributeBoolean('720p_API', false);
            $this->WriteAttributeBoolean('VGA_API', true);
        }
    }

    /**
     * Process Webhook Data.
     */
    protected function ProcessHookData()
    {
        $username = $this->ReadPropertyString('webhook_username');
        $password = $this->ReadPropertyString('webhook_password');
        if (!isset($_SERVER['PHP_AUTH_USER'])) {
            $_SERVER['PHP_AUTH_USER'] = '';
        }
        if (!isset($_SERVER['PHP_AUTH_PW'])) {
            $_SERVER['PHP_AUTH_PW'] = '';
        }

        if (($_SERVER['PHP_AUTH_USER'] != $username) || ($_SERVER['PHP_AUTH_PW'] != $password)) {
            header('WWW-Authenticate: Basic Realm="INSTAR WebHook"');
            header('HTTP/1.0 401 Unauthorized');
            echo 'Authorization required';
            return;
        }
        echo 'Webhook INSTAR IP-Symcon';

        //workaround for bug
        if (!isset($_IPS)) {
            global $_IPS;
        }
        if ($_IPS['SENDER'] == 'Execute') {
            echo 'This script cannot be used this way.';
            return;
        }
        $this->SendDebug('Instar I/O', 'GET: ' . json_encode($_GET), 0);
        // $this->SendDebug('Instar I/O', 'POST: ' . json_encode($_POST), 0);
        if (isset($_GET['active'])) {
            $this->SetLastMovement();
            $this->SetValue('notification_alarm', $_GET['active']);
            $this->SetValue('LastAlarmtype', $_GET['active']);
            IPS_Sleep(2000);
            $this->SetValue('notification_alarm', 11);

        } else {
            $this->SetLastMovement();
            $this->SetValue('notification_alarm', 0);
            $this->SetValue('LastAlarmtype', 0);
            IPS_Sleep(2000);
            $this->SetValue('notification_alarm', 11);
        }
    }

    /**
     * Register Webhook.
     *
     * @param string $webhook
     * @param bool   $delete
     */
    protected function RegisterWebhook($webhook, $delete = false)
    {
        $ids = IPS_GetInstanceListByModuleID('{015A6EB8-D6E5-4B93-B496-0D3F77AE9FE1}');

        if (count($ids) > 0) {
            $hooks = json_decode(IPS_GetProperty($ids[0], 'Hooks'), true);
            $found = false;
            foreach ($hooks as $index => $hook) {
                if ($hook['Hook'] == $webhook) {
                    if ($hook['TargetID'] == $this->InstanceID && !$delete) {
                        return;
                    } elseif ($delete && $hook['TargetID'] == $this->InstanceID) {
                        continue;
                    }

                    $hooks[$index]['TargetID'] = $this->InstanceID;
                    $found                     = true;
                }
            }
            if (!$found) {
                $hooks[] = ['Hook' => $webhook, 'TargetID' => $this->InstanceID];
            }

            IPS_SetProperty($ids[0], 'Hooks', json_encode($hooks));
            IPS_ApplyChanges($ids[0]);
        }
    }

    public function GetInfo()
    {
        $this->GetCameraModel();
        $this->GetServerInfo();
        $this->GetNetInfo();
    }

    protected function CheckAttributeType(&$var_name, &$var_content, $suffix)
    {
        if (is_numeric($var_content)) {
            $key = array_search($var_name, $this->StringAttributes);
            if ($key > 0) {
                // is string
                $var_content = strval($var_content);
                $this->WriteAttributeString($this->ConvertNameToAtrribute($var_name) . $suffix, $var_content);
                $this->UpdateParameter($this->ConvertNameToAtrribute($var_name), 'value', $var_content);
                $this->SendDebug(
                    'INSTAR Write Value', 'String ' . $this->ConvertNameToAtrribute($var_name) . ' = ' . print_r($var_content, true), 0
                );
                $this->WriteValue($this->ConvertNameToAtrribute($var_name) . $suffix, $var_content);
            } else {
                // is int
                $var_content = intval($var_content);
                $this->SendDebug(
                    'INSTAR Write Attribute', 'Integer ' . $this->ConvertNameToAtrribute($var_name) . $suffix . ' = ' . print_r($var_content, true), 0
                );
                $this->WriteAttributeInteger($this->ConvertNameToAtrribute($var_name) . $suffix, $var_content);
                $this->UpdateParameter($this->ConvertNameToAtrribute($var_name), 'value', $var_content);
                // search bool variable value
                $key = array_search($var_name, $this->BooleanAttributes);
                if ($key > 0) {
                    $bool_var_content = boolval($var_content);
                    if ($bool_var_content) {
                        $this->SendDebug('INSTAR Write Value', 'Boolean ' . $this->ConvertNameToAtrribute($var_name) . ' = true', 0);
                        $this->WriteValue($this->ConvertNameToAtrribute($var_name) . $suffix, true);
                    } else {
                        $this->SendDebug('INSTAR Write Value', 'Boolean ' . $this->ConvertNameToAtrribute($var_name) . ' = false', 0);
                        $this->WriteValue($this->ConvertNameToAtrribute($var_name) . $suffix, false);
                    }
                } else {
                    $this->SendDebug('INSTAR Write Value', 'Integer ' . $this->ConvertNameToAtrribute($var_name) . ' = ' . $var_content, 0);
                    $this->WriteValue($this->ConvertNameToAtrribute($var_name) . $suffix, $var_content);
                }
            }
        } else {
            if ($var_name == 'admin_value46') {
                $this->SendDebug('INSTAR Write Attribute', 'Integer ' . $this->ConvertNameToAtrribute($var_name) . $suffix . ' = 0', 0);
                $this->WriteAttributeInteger($this->ConvertNameToAtrribute($var_name) . $suffix, 0);
                $this->UpdateParameter($this->ConvertNameToAtrribute($var_name), 'value', 0);
                $this->WriteValue($this->ConvertNameToAtrribute($var_name) . $suffix, false); // Value empty
            } else {
                if ($var_name == 'dhcpflag' || $var_name == 'flip' || $var_name == 'mirror' || $var_name == 'md_preset_switch') {
                    if ($var_content == 'off') {
                        $bool_var_content = false;
                    } elseif ($var_content == 'on') {
                        $bool_var_content = true;
                    }
                    $this->WriteAttributeString($this->ConvertNameToAtrribute($var_name) . $suffix, $var_content);
                    $this->UpdateParameter($this->ConvertNameToAtrribute($var_name), 'value', $bool_var_content);
                    $this->WriteValue($this->ConvertNameToAtrribute($var_name) . $suffix, $bool_var_content);
                }
                elseif ($var_name == 'infraredstat') {
                    if ($var_content == 'auto') {
                        $int_var_content = 1;
                    } elseif ($var_content == 'close') {
                        $int_var_content = 2;
                    }
                    $this->WriteAttributeInteger($this->ConvertNameToAtrribute($var_name) . '_form', $int_var_content);
                    $this->WriteAttributeString($this->ConvertNameToAtrribute($var_name) . $suffix, $var_content);
                    $this->UpdateParameter($this->ConvertNameToAtrribute($var_name), 'value', $var_content); // Label
                    $this->WriteValue($this->ConvertNameToAtrribute($var_name) . $suffix, $int_var_content);
                }
                elseif ($var_name == 'sdstatus') {
                    if ($var_content == 'out') {
                        $int_var_content = 0;
                    } elseif ($var_content == 'Ready') {
                        $int_var_content = 1;
                    }
                    else
                    {
                        $int_var_content = 2;
                    }
                    $this->WriteAttributeString($this->ConvertNameToAtrribute($var_name) . $suffix, $var_content);
                    $this->UpdateParameter($this->ConvertNameToAtrribute($var_name), 'value', $var_content); // Label
                    $this->WriteValue($this->ConvertNameToAtrribute($var_name) . $suffix, $int_var_content);
                }
                else {
                    $this->WriteValue($this->ConvertNameToAtrribute($var_name) . $suffix, $var_content);
                }
                $this->SendDebug('INSTAR Write Attribute', 'String ' . $this->ConvertNameToAtrribute($var_name) . $suffix . ' = ' . $var_content, 0);
                $this->WriteAttributeString($this->ConvertNameToAtrribute($var_name) . $suffix, $var_content);

            }
        }
    }

    protected function WriteValue($var_name, $var_content)
    {
        if (@$this->GetIDForIdent($var_name) > 0) {
            $this->SetValue($var_name, $var_content);
        }
    }

    protected function SplitPayload(string $payload, $suffix = "")
    {
        $payload = str_replace(["\r", "\n"], '', $payload);
        $result  = [];
        $data    = explode('";', $payload);
        array_pop($data);
        // var_dump($data);
        foreach ($data as $info_device) {
            if ($info_device == 'admin_value31=') {
                $var_name    = 'admin_value31';
                $var_content = $data[1];
                $this->CheckAttributeType($var_name, $var_content, $suffix);
                $result[$var_name] = $var_content;
                break;
            } else {
                $thing       = explode('=', $info_device);
                $var_content = trim($thing[1], '"');
                $prefix      = substr(trim($thing[0], ' \n\r'), 0, 3);
                if ($prefix == 'var') {
                    $var_name = substr(trim($thing[0]), 4);
                } else {
                    $var_name = trim($thing[0]);
                }
            }
            $this->CheckAttributeType($var_name, $var_content, $suffix);
            $result[$var_name] = $var_content;
        }
        return $result;
    }

    protected function ConvertNameToAtrribute($var_name)
    {
        $attribute_name = str_replace('[', '_', $var_name);
        $attribute_name = trim(str_replace(']', '_', $attribute_name));
        $last_char      = substr($var_name, -1);
        if ($last_char == ']') {
            $attribute_name = substr($attribute_name, 0, -1);
        }
        $attribute_name = str_replace('__', '_', $attribute_name);
        return $attribute_name;
    }

    // Network Menu

    // IP Configuration

    /** Camera´s Network Configuration
     *
     * @return array
     */
    public function GetCameraNetworkConfiguration()
    {
        $payload = $this->SendParameter('getnetattr');
        $data    = $this->CheckPayload($payload);
        return $data;
    }

    public function SetNetworkParameters($ip, $netmask, $gateway, $fdnsip, $httpport, $httpsport, $rtmpport, $rtsp_aenable, $rtspport)
    {
        $this->WriteAttributeString('ip', $ip);
        $this->WriteAttributeString('netmask', $netmask);
        $this->WriteAttributeString('gateway', $gateway);
        $this->SetCameraNetworkConfiguration();
        $this->WriteAttributeString('fdnsip', $fdnsip);
        $this->SetCameraNetworkConfiguration();
        $this->SetCameraHTTP_Port($httpport);
        $this->SetCameraHTTPS_Port($httpsport);
        $this->SetCameraRTMP_Port($rtmpport);
        $this->SetCameraRTSP_Port($rtspport);
        $this->SetRTSPAuthenticationState($rtsp_aenable);
    }


    /** Set Camera´s Network Configuration
     *
     * @return array
     */
    public function SetCameraNetworkConfiguration()
    {
        $ip        = $this->ReadAttributeString('ip');
        $dhcpflag  = $this->ReadAttributeString('dhcpflag');
        $netmask   = $this->ReadAttributeString('netmask');
        $gateway   = $this->ReadAttributeString('gateway');
        $fdnsip    = $this->ReadAttributeString('fdnsip');
        $sdnsip    = $this->ReadAttributeString('sdnsip');
        $parameter =
            '&-dhcpflag=' . $dhcpflag . '&-ip=' . $ip . '&-netmask=' . $netmask . '&-gateway=' . $gateway . '&-fdnsip=' . $fdnsip . '&-sdnsip='
            . $sdnsip;
        $data      = $this->SendParameter('setnetattr' . $parameter);
        return $data;
    }

    public function GetCameraPorts()
    {
        $this->GetCameraHTTP_Port();
        $this->GetCameraHTTPS_Port();
        $this->GetCameraRTSP_Port();
        $this->GetRTSPAuthenticationState();
        $this->GetCameraRTMP_Port();
    }

    private function ExplodePort($string_port)
    {
        $data = explode('=', $string_port);
        $port = intval(trim($data[1], '"'));
        return $port;
    }

    /** Get your Camera´s HTTP port
     *
     * @return false|string
     */
    public function GetCameraHTTP_Port()
    {
        $port = $this->SendParameter('gethttpport');
        if($port != false)
        {
            $port = $this->ExplodePort($port);
            $this->WriteAttributeInteger('httpport', $port);
        }
        return $port;
    }

    /** Set your Camera´s HTTP port
     *
     * @param int $http_port
     *
     * @return false|string
     */
    public function SetCameraHTTP_Port(int $http_port)
    {
        $port = 'could not set port';
        if ($http_port != 0) {
            $parameter = '&-httpport=' . $http_port;
            $port      = $this->SendParameter('sethttpport' . $parameter);
        }
        return $port;
    }

    /** Get your Camera´s HTTPS port
     *
     * @return false|string
     */
    public function GetCameraHTTPS_Port()
    {
        $port = $this->SendParameter('gethttpsport');
        if($port != false)
        {
            $port = $this->ExplodePort($port);
            $this->WriteAttributeInteger('httpsport', $port);
        }
        return $port;
    }

    /** Set your Camera´s HTTPS port
     *
     * @param int $https_port
     *
     * @return false|string
     */
    public function SetCameraHTTPS_Port(int $https_port)
    {
        $port = 'could not set port';
        if ($https_port != 0) {
            $parameter = '&-httpsport=' . $https_port;
            $port      = $this->SendParameter('sethttpsport' . $parameter);
        }
        return $port;
    }

    /** Get your Camera´s RTSP port
     *
     * @return false|string
     */
    public function GetCameraRTSP_Port()
    {
        $port = $this->SendParameter('getrtspport');
        if($port != false)
        {
            $port = $this->ExplodePort($port);
            $this->WriteAttributeInteger('rtspport', $port);
        }
        return $port;
    }

    /** Set your Camera´s RTSP port
     *
     * @param int $rtsp_port
     *
     * @return false|string
     */
    public function SetCameraRTSP_Port(int $rtsp_port)
    {
        $parameter = '&rtspport=' . $rtsp_port;
        $port      = $this->SendParameter('setrtspport' . $parameter);
        return $port;
    }

    /** Get RTSP authentication State
     *
     * @return false|string
     */
    public function GetRTSPAuthenticationState()
    {
        $auth = $this->SendParameter('getrtspauth');
        if($auth != false)
        {
            $auth = $this->ExplodePort($auth);
            $this->WriteAttributeInteger('rtsp_aenable', $auth);
        }
        return $auth;
    }

    /** Set RTSP authentication State
     *
     * @return false|string
     */
    public function SetRTSPAuthenticationState(bool $state)
    {
        if ($state) {
            $enable = 1;
        } else {
            $enable = 0;
        }
        $parameter = '&-rtsp_aenable=' . $enable;
        $state     = $this->SendParameter('setrtspauth' . $parameter);
        return $state;
    }

    /** Get your Camera's RTMP port
     *
     * @return false|string
     */
    public function GetCameraRTMP_Port()
    {
        $port = $this->SendParameter('getrtmpattr');
        if($port != false)
        {
            $port = $this->ExplodePort($port);
            $this->WriteAttributeInteger('rtmpport', $port);
        }
        return $port;
    }

    /** Set your Camera's RTMP Port
     *
     * @param int $rtmp_port
     *
     * @return false|string
     */
    public function SetCameraRTMP_Port(int $rtmp_port)
    {
        $parameter = '&-rtmpport=' . $rtmp_port;
        $port      = $this->SendParameter('setrtmpattr' . $parameter);
        return $port;
    }

    /** Get Network Configuration
     *
     * @return array
     */
    public function GetNetInfo()
    {
        $payload = $this->SendParameter('getnetinfo');
        $data    = $this->CheckPayload($payload);
        return $data;
    }

    /** Get INSTAR Camera Model
     *
     * @return bool|string
     */
    public function GetCameraModel()
    {
        $payload = $this->SendParameter('getsysinfo');
        $model = false;
        if($payload != false)
        {
            $data    = explode('"', $payload);
            $model   = $data[1];
            $this->SendDebug('INSTAR', 'Model: ' . $model, 0);
            $this->WriteAttributeString('model', $model);
            $this->WriteValue('model', $model);
        }
        return $model;
    }



    // Wifi Settings

    /** Get your Camera´s WLAN Configuration
     *
     * @return array
     */
    public function GetCameraWIFIConfiguration()
    {
        $payload = $this->SendParameter('getwirelessattr');
        $data    = $this->CheckPayload($payload);
        return $data;
    }

    public function EnableWIFI(bool $wf_enable)
    {
        $this->WriteAttributeInteger('wf_enable', intval($wf_enable));
        $data = $this->SetCameraWIFIConfiguration();
        return $data;
    }

    public function SetWiFiAuth(int $wf_auth)
    {
        $this->WriteAttributeInteger('wf_auth', $wf_auth);
        $data = $this->SetCameraWIFIConfiguration();
        return $data;
    }

    public function SetWiFiSSID(string $wf_ssid)
    {
        $this->WriteAttributeString('wf_ssid', $wf_ssid);
        $data = $this->SetCameraWIFIConfiguration();
        return $data;
    }

    public function SetWiFiKey(string $wf_key)
    {
        $this->WriteAttributeString('wf_key', $wf_key);
        $data = $this->SetCameraWIFIConfiguration();
        return $data;
    }

    public function SetWiFiEncode(int $wf_enc)
    {
        $this->WriteAttributeInteger('wf_enc', $wf_enc);
        $data = $this->SetCameraWIFIConfiguration();
        return $data;
    }

    public function SetWiFiMode(int $wf_mode)
    {
        $this->WriteAttributeInteger('wf_mode', $wf_mode);
        $data = $this->SetCameraWIFIConfiguration();
        return $data;
    }

    public function SetWifiParameters(bool $wf_enable, string $wf_ssid, int $wf_auth, string $wf_key, int $wf_enc, int $wf_mode)
    {
        $this->WriteAttributeInteger('wf_enable', intval($wf_enable));
        $this->WriteAttributeString('wf_ssid', $wf_ssid);
        $this->WriteAttributeInteger('wf_auth', $wf_auth);
        $this->WriteAttributeString('wf_key', $wf_key);
        $this->WriteAttributeInteger('wf_enc', $wf_enc);
        $this->WriteAttributeInteger('wf_mode', $wf_mode);
        $data = $this->SetCameraWIFIConfiguration();
        return $data;
    }

    /** Set Camera´s WIFI Configuration
     *
     * @return array
     */
    public function SetCameraWIFIConfiguration()
    {
        $wf_enable = $this->ReadAttributeInteger('wf_enable'); // 1 (WiFi enabled), 0 (WiFi disabled)
        $wf_ssid   = $this->ReadAttributeString('wf_ssid'); // SSID (max. 32 Characters)
        $wf_auth   = $this->ReadAttributeInteger('wf_auth'); // 0 (no encryption), 1 (WEP), 2 (WPA-PSK), 3 (WPA2-PSK)
        $wf_key    = $this->ReadAttributeString('wf_key'); // Key max. 63 Characters (Allowed special characters: &='`)
        $wf_enc    = $this->RegisterAttributeInteger('wf_enc', 0); // Key type 0 (TKIP), 1 (AES)
        $wf_mode   = $this->RegisterAttributeInteger('wf_mode', 0); // 0 (infra), 1 (ad-hoc)
        $parameter = '&-wf_ssid=' . $wf_ssid . '&-wf_enable=' . $wf_enable . '&-wf_auth=' . $wf_auth . '&-wf_key=' . $wf_key . '&-wf_enc=' . $wf_enc
                     . '&-wf_mode=' . $wf_mode;
        $data      = $this->SendParameter('setwirelessattr' . $parameter);
        return $data;
    }

    /** Get your Camera´s Search for WiFi Access Points
     *
     * @return array
     */
    public function SearchWiFiAccessPoints()
    {
        $payload = $this->SendParameter('searchwireless');
        $data    = explode(';', $payload);
        array_pop($data);
        $search = [];
        foreach ($data as $info_device) {
            $info        = explode('=', $info_device);
            $var_name    = substr(trim($info[0]), 4);
            $var_content = trim($info[1], '"');
            $this->SendDebug('INSTAR Receive Variable', $var_name . ' = ' . $var_content, 0);
            $search[$var_name] = $var_content;
        }
        return $search;
    }

    /** Get your Camera´s Search for WiFi Access Points
     *
     * @return array
     */
    public function GetCameraWiFiAccessPoint()
    {
        $payload = $this->SendParameter('getchkwireless');
        $search = [];
        if($payload != false)
        {
            $data    = explode(';', $payload);
            array_pop($data);
            foreach ($data as $info_device) {
                $info        = explode('=', $info_device);
                $var_name    = substr(trim($info[0]), 4);
                $var_content = trim($info[1], '"');
                $this->SendDebug('INSTAR Receive Variable', $var_name . ' = ' . $var_content, 0);
                $search[$var_name] = $var_content;
            }
        }
        return $search;
    }

    /** Set your Camera´s WiFi Access Points
     *
     * @param string $wf_ssid SSID (max. 32 Characters)
     * @param int    $wauth   Encryption mode - 0: (no encryption), 1 (WEP), 2 (WPA-PSK), 3 (WPA2-PSK)
     * @param string $wf_key  WiFi Key
     * @param int    $wf_enc  Encryption 0 (TKIP), 1 (AES)
     * @param int    $wf_mode Connection Mode 0 (Infra), 1 (Ad-hoc)
     *
     * @return false|string
     */
    public function SetCameraWiFiAccessPoint(string $wf_ssid, int $wauth, string $wf_key, int $wf_enc, int $wf_mode)
    {
        $parameter = '&-wf_ssid=' . $wf_ssid . '&-wf_auth=' . $wauth . '&-wf_key=' . $wf_key . '&-wf_enc=' . $wf_enc . '&-wf_mode=' . $wf_mode;
        $data      = $this->SendParameter('setwirelessattr' . $parameter);
        return $data;
    }

    // Remote Access

    /** Get your Camera´s INSTAR DDNS Configuration
     *
     * @return array
     */
    public function GetDDNSConfiguration()
    {
        $payload = $this->SendParameter('getourddnsattr');
        $data    = $this->CheckPayload($payload);
        return $data;
    }

    /** Get your Camera´s 3rd Party DDNS Configuration
     *
     * @return array
     */
    public function Get3rdPartyDDNSConfiguration()
    {
        $payload = $this->SendParameter('get3thddnsattr');
        $data    = $this->CheckPayload($payload);
        return $data;
    }

    public function EnabeINSTAR_DNS(bool $our_enable)
    {
        $this->WriteAttributeInteger('our_enable', intval($our_enable));
        if ($our_enable) {
            $this->WriteAttributeInteger('d3th_enable', 0);
            $this->UpdateParameter('d3th_enable', 'value', false);
            $parameter = '&-d3th_enable=0';
        } else {
            $this->WriteAttributeInteger('d3th_enable', 1);
            $this->UpdateParameter('d3th_enable', 'value', true);
            $parameter = '&-d3th_enable=1';
        }


        $data = $this->SendParameter('set3thddnsattr' . $parameter);
        return $data;
    }

    public function Enabel3thDNS(bool $d3th_enable)
    {
        $this->WriteAttributeInteger('d3th_enable', intval($d3th_enable));
        if ($d3th_enable) {
            $this->WriteAttributeInteger('our_enable', 0);
            $this->UpdateParameter('our_enable', 'value', false);
        } else {
            $this->WriteAttributeInteger('our_enable', 1);
            $this->UpdateParameter('our_enable', 'value', true);
        }

        $parameter = '&-d3th_enable=' . $d3th_enable;
        $data      = $this->SendParameter('set3thddnsattr' . $parameter);
        return $data;
    }

    public function Set3rdPartyDDNSDomain(string $d3th_domain)
    {
        $this->WriteAttributeString('d3th_domain', $d3th_domain);
        $this->Set3rdPartyDDNSConfiguration();
    }

    public function Set3rdPartyDDNSService(int $d3th_service)
    {
        $this->WriteAttributeInteger('d3th_service', $d3th_service);
        $this->Set3rdPartyDDNSConfiguration();
    }

    public function Set3rdPartyDDNSUsername(string $d3th_uname)
    {
        $this->WriteAttributeString('d3th_uname', $d3th_uname);
        $this->Set3rdPartyDDNSConfiguration();
    }

    public function Set3rdPartyDDNSPassword(string $d3th_passwd)
    {
        $this->WriteAttributeString('d3th_passwd', $d3th_passwd);
        $this->Set3rdPartyDDNSConfiguration();
    }

    public function Set3rdPartyDDNSParameters(string $d3th_domain, int $d3th_service, string $d3th_uname, string $d3th_passwd)
    {
        $this->WriteAttributeString('d3th_domain', $d3th_domain);
        $this->WriteAttributeInteger('d3th_service', $d3th_service);
        $this->WriteAttributeString('d3th_uname', $d3th_uname);
        $this->WriteAttributeString('d3th_passwd', $d3th_passwd);
        $this->Set3rdPartyDDNSConfiguration();
    }

    public function Set3rdPartyDDNSConfiguration()
    {
        $d3th_enable  = $this->ReadAttributeInteger(
            'd3th_enable'
        ); // 1: 3rd Party DDNS activated / INSTAR DDNS disabled, 0: 3rd Party DDNS deactivated / INSTAR DDNS enabled
        $d3th_service = $this->ReadAttributeInteger('d3th_service'); // 0: DynDNS, 1: NoIP
        $d3th_uname   = $this->ReadAttributeString('d3th_uname'); // Your Username
        $d3th_passwd  = $this->ReadAttributeString('d3th_passwd'); // Your Password
        $d3th_domain  = $this->ReadAttributeString('d3th_domain'); // Your 3rd Party DDNS Address
        $parameter    =
            '&-d3th_enable=' . $d3th_enable . '&-d3th_service=' . $d3th_service . '&-d3th_uname=' . $d3th_uname . '&-d3th_passwd=' . $d3th_passwd
            . '&-d3th_domain=' . $d3th_domain;
        $data         = $this->SendParameter('set3thddnsattr' . $parameter);
        return $data;
    }

    protected function CheckPayload($payload, $suffix = "")
    {
        $data = [];
        if($payload != false)
        {
            $data    = $this->SplitPayload($payload, $suffix);
        }
        return $data;
    }

    /** Get Server Info
     *
     * @return array
     */
    public function GetServerInfo()
    {
        $payload = $this->SendParameter('getserverinfo');
        $data    = $this->CheckPayload($payload);
        return $data;
    }

    // UPnP Settings

    public function GetUPNPConfiguration()
    {
        $payload = $this->SendParameter('getupnpattr');
        $data    = $this->CheckPayload($payload);
        return $data;
    }

    public function SetUPNPConfiguration(bool $upnp)
    {
        if ($upnp) {
            $this->WriteAttributeInteger('upm_enable', 1);
            $upnp = 1;
        } else {
            $this->WriteAttributeInteger('upm_enable', 0);
            $upnp = 0;
        }
        $parameter = '&-upm_enable=' . $upnp;
        $data      = $this->SendParameter('setupnpattr' . $parameter);
        return $data;
    }

    // ONVIF Settings

    /**
     * @return array
     */
    public function GetONVIFConfiguration()
    {
        $payload = $this->SendParameter('getonvifattr');
        $data    = $this->CheckPayload($payload);
        return $data;
    }

    public function EnableONVIF(bool $ov_enable)
    {
        $this->WriteAttributeInteger('ov_enable', intval($ov_enable));
        $this->SetONVIFConfiguration();
    }

    public function ONVIFAuth(bool $ov_authflag)
    {
        $this->WriteAttributeInteger('ov_authflag', intval($ov_authflag));
        $this->SetONVIFConfiguration();
    }

    public function SetONVIFPort(int $ov_port)
    {
        $this->WriteAttributeInteger('ov_port', $ov_port);
        $this->SetONVIFConfiguration();
    }

    public function SetONVIFForbiset(int $ov_forbitset)
    {
        $this->WriteAttributeInteger('ov_forbitset', $ov_forbitset);
        $this->SetONVIFConfiguration();
    }

    public function SetONVIFSubchannel(int $ov_subchn)
    {
        $this->WriteAttributeInteger('ov_subchn', $ov_subchn);
        $this->SetONVIFConfiguration();
    }

    public function SetONVIFSubchannelSnapshot(int $ov_snapchn)
    {
        $this->WriteAttributeInteger('ov_snapchn', $ov_snapchn);
        $this->SetONVIFConfiguration();
    }

    public function SetONVIFConfigurationParameters($ov_enable, $ov_port, $ov_authflag, $ov_forbitset, $ov_subchn, $ov_snapchn, $ov_nvctype)
    {
        $this->WriteAttributeInteger('ov_enable', $ov_enable); // 1 ONVIF activated, 0 ONVIF deactivated
        $this->WriteAttributeInteger('ov_port', $ov_port); // ONVIF Port
        $this->WriteAttributeInteger('ov_authflag', $ov_authflag); // 1 ONVIF Login Required, 0: ONVIF Authentication deactivated
        $this->WriteAttributeInteger(
            'ov_forbitset', $ov_forbitset
        ); // 0: Time zone setting enabled, image parameter settings enabled, 1: Time zone setting disabled, the image parameter settings enabled, 2: Time zone setting enabled, image parameter settings prohibited, 3: Time zone setting prohibited, image parameter settings prohibited
        $this->WriteAttributeInteger('ov_subchn', $ov_subchn); // Use video channel 11, 12 or 13
        $this->WriteAttributeInteger('ov_snapchn, $ov_snapchn', 0); // Use video channel 11, 12 or 13 for snapshots
        $this->WriteAttributeInteger('ov_nvctype', $ov_nvctype);
        $data      = $this->SetONVIFConfiguration();
        return $data;
    }

    /**
     * @return false|string
     */
    public function SetONVIFConfiguration()
    {
        $ov_enable    = $this->ReadAttributeInteger('ov_enable'); // 1 ONVIF activated, 0 ONVIF deactivated
        $ov_port      = $this->ReadAttributeInteger('ov_port'); // ONVIF Port
        $ov_authflag  = $this->ReadAttributeInteger('ov_authflag'); // 1 ONVIF Login Required, 0: ONVIF Authentication deactivated
        $ov_forbitset = $this->ReadAttributeInteger(
            'ov_forbitset'
        ); // 0: Time zone setting enabled, image parameter settings enabled, 1: Time zone setting disabled, the image parameter settings enabled, 2: Time zone setting enabled, image parameter settings prohibited, 3: Time zone setting prohibited, image parameter settings prohibited
        $ov_subchn    = $this->ReadAttributeInteger('ov_subchn'); // Use video channel 11, 12 or 13
        $ov_snapchn   = $this->ReadAttributeInteger('ov_snapchn'); // Use video channel 11, 12 or 13 for snapshots
        $ov_nvctype   = $this->ReadAttributeInteger('ov_nvctype');

        $parameter = '&-ov_enable=' . $ov_enable . '&-ov_port=' . $ov_port . '&-ov_authflag=' . $ov_authflag . '&-ov_forbitset=' . $ov_forbitset
                     . '&-ov_subchn=' . $ov_subchn . '&-ov_snapchn=' . $ov_snapchn . '&-ov_nvctype=' . $ov_nvctype;
        $data      = $this->SendParameter('setonvifattr' . $parameter);
        return $data;
    }

    // Multimedia Menu

    // Audio Settings

    /** Get the Volume the Audio Input
     *
     * @return array
     */
    public function GetVolumeAudioInput()
    {
        $payload = $this->SendParameter('getaudioinvolume');
        $data    = $this->CheckPayload($payload);
        return $data;
    }

    public function SetVolume(int $volume)
    {
        $this->WriteAttributeInteger('volume', $volume);
        $this->SetVolumeAudioInput();
    }

    public function SetVolumeInputType(bool $volin_type)
    {
        $volin_type = intval($volin_type);
        $this->WriteAttributeInteger('volin_type', $volin_type);
        $this->SetVolumeAudioInput();
    }

    public function SetAudioEncoder(int $aec)
    {
        $aec = intval($aec);
        $this->WriteAttributeInteger('aec', $aec);
        $this->SetVolumeAudioInput();
    }

    public function SetNoiseSurpression(int $denoise)
    {
        $denoise = intval($denoise);
        $this->WriteAttributeInteger('denoise', $denoise);
        $this->SetVolumeAudioInput();
    }

    /** Set the Volume the Audio Input
     *
     * @return false|string
     */
    public function SetVolumeAudioInput()
    {
        $volume = $this->ReadAttributeInteger('volume');
        if ($volume < 1) {
            $volume = 1;
        }
        if ($volume > 100) {
            $volume = 100;
        }
        $volin_type = $this->ReadAttributeInteger('volin_type');
        $aec        = $this->ReadAttributeInteger('aec');
        $denoise    = $this->ReadAttributeInteger('denoise');
        $parameter  = '&-volume=' . $volume . '&-volin_type=' . $volin_type . '&-aec=' . $aec . '&-denoise=' . $denoise;
        $data       = $this->SendParameter('setaudioinvolume' . $parameter);
        return $data;
    }

    /** Get the Volume the Audio Output
     *
     * @return array
     */
    public function GetVolumeAudioOutput()
    {
        $payload = $this->SendParameter('getaudiooutvolume');
        $data    = $this->CheckPayload($payload);
        return $data;
    }

    public function SetOutputVolume(int $volume)
    {
        $this->WriteAttributeInteger('ao_volume', $volume);
        $this->SetVolumeAudioOutput();
    }

    /** Set the Volume the Audio Output
     *
     * @return false|string
     */
    public function SetVolumeAudioOutput()
    {
        $ao_volume = $this->ReadAttributeInteger('ao_volume');
        if ($ao_volume < 1) {
            $ao_volume = 1;
        }
        if ($ao_volume > 100) {
            $ao_volume = 100;
        }
        $parameter = '&-ao_volume=' . $ao_volume;
        $data      = $this->SendParameter('setaudioinvolume' . $parameter);
        return $data;
    }

    /** Get Audio Encoder Parameter Channel 1
     *
     * @return array
     */
    public function GetAudioEncoderParameterChannel1()
    {
        $data = $this->GetAudioEncoderParameter(1);
        return $data;
    }

    /** Get Audio Encoder Parameter Channel 2
     *
     * @return array
     */
    public function GetAudioEncoderParameterChannel2()
    {
        $data = $this->GetAudioEncoderParameter(2);
        return $data;
    }

    /** Get Audio Encoder Parameter Channel 3
     *
     * @return array
     */
    public function GetAudioEncoderParameterChannel3()
    {
        $data = $this->GetAudioEncoderParameter(3);
        return $data;
    }

    /** Get Audio Encoder Parameter
     *
     * @return array
     */
    private function GetAudioEncoderParameter($channel)
    {
        $payload = $this->SendParameter('getaencattr&-chn=' . $channel);
        $data    = $this->CheckPayload($payload);
        return $data;
    }

    /** Set Audio Encoder Parameter Channel 1
     *
     * @return false|string
     */
    public function SetAudioEncoderParameterChannel1()
    {
        $data = $this->SetAudioEncoderParameter(1);
        return $data;
    }

    /** Set Audio Encoder Parameter Channel 2
     *
     * @return false|string
     */
    public function SetAudioEncoderParameterChannel2()
    {
        $data = $this->SetAudioEncoderParameter(2);
        return $data;
    }

    /** Set Audio Encoder Paramete7r Channel 3
     *
     * @return false|string
     */
    public function SetAudioEncoderParameterChannel3()
    {
        $data = $this->SetAudioEncoderParameter(3);
        return $data;
    }

    /** Set Audio Encoder Parameter
     *
     * @return false|string
     */
    private function SetAudioEncoderParameter($channel)
    {
        $aeswitch = $this->ReadAttributeInteger('aeswitch_' . $channel);
        $aeformat = $this->ReadAttributeString('aeformat_' . $channel);

        $parameter = '&-chn=' . $channel . '&-aeswitch_' . $channel . '=' . $aeswitch . '&-aeformat_' . $channel . '=' . $aeformat;
        $data      = $this->SendParameter('setaudioinvolume' . $parameter);
        return $data;
    }


    // Video Settings

    /** Get the Video Attributes
     *
     * @return array
     */
    public function GetVideoAttributes()
    {
        $payload = $this->SendParameter('getvideoattr');
        $data    = $this->CheckPayload($payload);
        return $data;
    }

    public function SetVideoMode(int $videomode)
    {
        $this->WriteAttributeInteger('videomode', $videomode);
        $data = $this->SetVideoAttributes();
        return $data;
    }

    public function SetWDRMode(int $wdrmode)
    {
        $this->WriteAttributeInteger('wdrmode', $wdrmode);
        $data = $this->SetVideoAttributes();
        return $data;
    }

    public function SetVideoProfile(int $profile)
    {
        $this->WriteAttributeInteger('profile', $profile);
        $data = $this->SetVideoAttributes();
        return $data;
    }

    public function SetMaxChn(int $maxchn)
    {
        $this->WriteAttributeInteger('maxchn', $maxchn);
        $data = $this->SetVideoAttributes();
        return $data;
    }

    public function SetVideonorm(int $vinorm)
    {
        if ($vinorm == 0) {
            $this->WriteAttributeString('vinorm', 'P');
        }
        $data = $this->SetVideoAttributes();
        return $data;
    }

    /** Set the Video Attributes
     *
     * @return false|string
     */
    public function SetVideoAttributes()
    {
        $videomode = $this->ReadAttributeInteger('videomode');
        $maxchn    = $this->ReadAttributeInteger('maxchn');
        $wdrmode   = $this->ReadAttributeInteger('wdrmode');
        $profile   = $this->ReadAttributeInteger('profile');
        $vinorm    = $this->ReadAttributeString('vinorm');
        $parameter = '&-videomode=' . $videomode . '&-vinorm=' . $vinorm . '&-wdrmode=' . $wdrmode . '&-profile=' . $profile . '&-maxchn=' . $maxchn;
        $data      = $this->SendParameter('setvideoattr' . $parameter);
        return $data;
    }

    /** Get the Video Encoder Attributes for Video Streams 11, 12, 13
     *
     * @return array
     */
    public function GetVideoEncoderAttributes()
    {

        // TODO Error Parameter

        $payload = $this->SendParameter('getvencattr');
        $data    = $this->CheckPayload($payload);
        return $data;
    }

    /** Set the Video Encoder Attributes for Video Streams 11, 12, 13
     *
     * @return false|string
     */
    public function SetVideoEncoderAttributes()
    {
        $chn          = $this->ReadAttributeInteger('chn');
        $bps_1        = $this->ReadAttributeInteger('bps_1');
        $imagegrade_1 = $this->ReadAttributeInteger('imagegrade_1');
        $brmode_1     = $this->ReadAttributeInteger('brmode_1');
        $fps_1        = $this->ReadAttributeInteger('fps_1');
        $gop_1        = $this->ReadAttributeInteger('gop_1');
        $parameter    =
            '&-chn=' . $chn . '&-bps_1=' . $bps_1 . '&-imagegrade_1=' . $imagegrade_1 . '&-brmode_1=' . $brmode_1 . '&-fps_1=' . $fps_1 . '&-gop_1='
            . $gop_1;
        $data         = $this->SendParameter('setvencattr' . $parameter);
        return $data;
    }

    // Image Settings

    /** Get Image Parameter
     *
     * @return array
     */
    public function GetImageParameter()
    {
        $payload = $this->SendParameter('getimageattr');
        $data    = $this->CheckPayload($payload);
        return $data;
    }

    /** Set Image Parameter
     *
     * @return false|string
     */
    public function SetImageParameter()
    {
        $brightness = $this->ReadAttributeInteger('brightness'); // brightness [0-100]
        $saturation = $this->ReadAttributeInteger('saturation'); // saturation [0-255]
        $sharpness  = $this->ReadAttributeInteger('sharpness'); // sharpness [0-100]
        $contrast   = $this->ReadAttributeInteger('contrast'); // contrast [0-100]
        $hue        = $this->ReadAttributeInteger('hue'); // hue [0-255]
        $wdr        = $this->ReadAttributeString('wdr'); // Software Wide Dynamic Range Mode: [on, off]
        $night      = $this->ReadAttributeString('night'); // Night mode 0 (inactive) off, 1 (active) on
        $shutter    = $this->ReadAttributeInteger('shutter'); // Shutter Speed [0 - 65535]
        $flip       = $this->ReadAttributeString('flip'); //  Flip the Image [on, off]
        $mirror     = $this->ReadAttributeString('mirror'); //   Mirror the Image [on, off]
        $scene      = $this->ReadAttributeString('scene'); //  scene
        $parameter  =
            '&-brightness=' . $brightness . '&-saturation=' . $saturation . '-sharpness=' . $sharpness . '&-contrast=' . $contrast . '&-hue=' . $hue
            . '&-wdr=' . $wdr . '&-night=' . $night . '&-shutter=' . $shutter . '&-flip=' . $flip . '&-mirror=' . $mirror . '&-scene=' . $scene;
        $data       = $this->SendParameter('setimageattr' . $parameter);
        return $data;
    }

    /**
     * @param int $brightness [0 - 100] the bigger the value the brighter the image
     *
     * @return false|string
     */
    public function Brightness(int $brightness)
    {
        if ($brightness < 0) {
            $brightness = 0;
        }
        if ($brightness > 100) {
            $brightness = 100;
        }
        $this->WriteValue('brightness', $brightness);
        $this->WriteAttributeInteger('brightness', $brightness);
        $response = $this->SetImageParameter();
        return $response;
    }

    /**
     * @param int $saturation [0 - 255] the bigger the value the more saturation the image has
     *
     * @return false|string
     */
    public function Saturation(int $saturation)
    {
        if ($saturation < 0) {
            $saturation = 0;
        }
        if ($saturation > 255) {
            $saturation = 255;
        }
        $this->WriteValue('saturation', $saturation);
        $this->WriteAttributeInteger('saturation', $saturation);
        $response = $this->SetImageParameter();
        return $response;
    }

    public function Sharpness(int $sharpness)
    {
        if ($sharpness < 0) {
            $sharpness = 0;
        }
        if ($sharpness > 100) {
            $sharpness = 100;
        }
        $this->WriteValue('sharpness', $sharpness);
        $this->WriteAttributeInteger('sharpness', $sharpness);
        $response = $this->SetImageParameter();
        return $response;
    }

    public function Gamma(int $gamma)
    {
        if ($gamma < 0) {
            $gamma = 0;
        }
        if ($gamma > 100) {
            $gamma = 100;
        }
        $this->WriteValue('gamma', $gamma);
        $this->WriteAttributeInteger('gamma', $gamma);
        $response = $this->SetImageParameter();
        return $response;
    }

    /**
     * @param int $contrast [0 - 100] the bigger the value the more contrast the image has
     *
     * @return false|string
     */
    public function Contrast(int $contrast)
    {
        if ($contrast < 0) {
            $contrast = 0;
        }
        if ($contrast > 100) {
            $contrast = 100;
        }
        $this->WriteValue('contrast', $contrast);
        $this->WriteAttributeInteger('contrast', $contrast);
        $response = $this->SetImageParameter();
        return $response;
    }

    // todo Check hue values

    /**
     * @param int $hue [0 - 255] the bigger the value the more hue the image has
     *
     * @return false|string
     */
    public function Hue(int $hue)
    {
        if ($hue < 0) {
            $hue = 0;
        }
        if ($hue > 255) {
            $hue = 255;
        }
        $this->WriteValue('hue', $hue);
        $this->WriteAttributeInteger('hue', $hue);
        $response = $this->SetImageParameter();
        return $response;
    }

    /** Flip Picture
     *
     * @param bool $flip true / false (on , off) flips the image
     *
     * @return false|string
     */
    public function FlipPicture(bool $flip)
    {
        if ($flip) {
            $flip_value = 'on';
        } else {
            $flip_value = 'off';
        }
        $this->WriteValue('flip', $flip);
        $this->WriteAttributeString('flip', $flip_value);
        $parameter = '&-flip=' . $flip_value;
        $data      = $this->SendParameter('setimageattr' . $parameter);
        return $data;
    }

    /** Mirror Image
     *
     * @param bool $mirror true / false (on , off) mirror the image
     *
     * @return false|string
     */
    public function MirrorPicture(bool $mirror)
    {
        if ($mirror) {
            $mirror_value = 'on';
        } else {
            $mirror_value = 'off';
        }
        $this->WriteValue('mirror', $mirror);
        $this->WriteAttributeString('mirror', $mirror_value);
        $parameter = '&-mirror=' . $mirror_value;
        $data      = $this->SendParameter('setimageattr' . $parameter);
        return $data;
    }

    /** Equalize Image
     *
     * @param int $targety 0 -255
     *
     * @return false|string
     */
    public function EqualizeImage(int $targety)
    {
        if ($targety < 0) {
            $targety = 0;
        }
        if ($targety > 255) {
            $targety = 255;
        }
        $this->WriteValue('targety', $targety);
        $this->WriteAttributeInteger('targety', $targety);
        $response = $this->SetImageParameter();
        return $response;
    }

    /**
     * @param string $scene (auto , indoor , outdoor) sets the white balance mode
     *
     * @return false|string
     */
    public function Scene(string $scene)
    {
        $this->WriteValue('scene', $scene);
        $this->WriteAttributeString('scene', $scene);
        $response = $this->SetImageParameter();
        return $response;
    }

    /** Get Extended Image Attributes
     *
     * @return array
     */
    public function GetExtendedImageAttributes()
    {
        $payload = $this->SendParameter('getimageattrex');
        $data    = $this->CheckPayload($payload);
        return $data;
    }

    public function SetWDRAuto(int $wdrauto)
    {
        $this->WriteAttributeInteger('wdrauto', $wdrauto);
        $data = $this->SetVideoAttributes();
        return $data;
    }

    public function SetWDRAutval(int $wdrautval)
    {
        $this->WriteAttributeInteger('wdrautval', $wdrautval);
        $data = $this->SetVideoAttributes();
        return $data;
    }

    public function SetD3noauto(int $d3noauto)
    {
        $this->WriteAttributeInteger('d3noauto', $d3noauto);
        $data = $this->SetVideoAttributes();
        return $data;
    }

    public function SetD3noval(int $d3noval)
    {
        $this->WriteAttributeInteger('d3noval', $d3noval);
        $data = $this->SetVideoAttributes();
        return $data;
    }

    public function SetWDRmanval(int $wdrmanval)
    {
        $this->WriteAttributeInteger('wdrmanval', $wdrmanval);
        $data = $this->SetVideoAttributes();
        return $data;
    }

    /** Set Extended Image Attributes
     *
     * @return false|string
     */
    public function SetExtendedImageAttributes()
    {
        $wdrauto   = $this->ReadAttributeInteger('wdrauto');
        $wdrautval = $this->ReadAttributeInteger('wdrautval');
        $d3noauto  = $this->ReadAttributeInteger('d3noauto');
        $d3noval   = $this->ReadAttributeInteger('d3noval');
        $parameter = '&-wdrauto=' . $wdrauto . '&-wdrautval=' . $wdrautval . '&-d3noauto=' . $d3noauto . '&-d3noval=' . $d3noval;
        $data      = $this->SendParameter('setimageattrex' . $parameter);
        return $data;
    }

    /** Get Lens Distortion Correction
     *
     * @return array
     */
    public function GetLensDistortionCorrection()
    {
        $payload = $this->SendParameter('getldcattr');
        $data    = $this->CheckPayload($payload);
        return $data;
    }

    /** Set Lens Distortion Correction
     *
     * @return false|string
     */
    public function SetLensDistortionCorrection()
    {
        $ldc_enable  = $this->ReadAttributeInteger('ldc_enable');
        $ldc_xoffset = $this->ReadAttributeInteger('ldc_xoffset');
        $ldc_yoffset = $this->ReadAttributeInteger('ldc_yoffset');
        $ldc_ratio   = $this->ReadAttributeInteger('ldc_ratio');
        $parameter   =
            '&-ldc_enable=' . $ldc_enable . '&-ldc_xoffset=' . $ldc_xoffset . '&-ldc_yoffset=' . $ldc_yoffset . '&-ldc_ratio=' . $ldc_ratio;
        $data        = $this->SendParameter('setldcattr' . $parameter);
        return $data;
    }

    // Image Oberlays

    /** Get OSD Parameter
     *
     * @return array
     */
    public function GetOSDParameter()
    {
        $payload = $this->SendParameter('getoverlayattr&-region=0&cmd=getoverlayattr&-region=1');
        $data    = $this->CheckPayload($payload, '_osd');
        return $data;
    }

    public function EnableOSD_Name(bool $show_1)
    {
        $this->WriteAttributeInteger('show_1_osd', intval($show_1));
        $this->SetOSDParameter();
    }

    public function EnableOSD_Time(bool $show_2)
    {
        $this->WriteAttributeInteger('show_1_osd', intval($show_2));
        $this->SetOSDParameter();
    }

    public function SetOSDParameter1(string $name_0)
    {
        $this->WriteAttributeString('name_0_osd', $name_0);
        $this->SetOSDParameter();
    }

    public function SetOSDParameter2(string $name_1)
    {
        $this->WriteAttributeString('name_1_osd', $name_1);
        $this->SetOSDParameter();
    }

    public function SetOSDParameters(string $name_0, string $name_1)
    {
        $this->WriteAttributeString('name_0_osd', $name_0);
        $this->WriteAttributeString('name_1_osd', $name_1);
        $this->SetOSDParameter();
    }

    /** Set OSD Parameter
     *
     * @return false|string
     */
    public function SetOSDParameter()
    {
        $show_0      = $this->ReadAttributeInteger('show_0_osd');
        $show_1      = $this->ReadAttributeInteger('show_1_osd');
        $name_0      = $this->ReadAttributeString('name_0_osd');
        $name_1      = $this->ReadAttributeString('name_1_osd');
        $parameter_2 = '&cmd=setoverlayattr&-region=1&-show=' . $show_1 . '&-name=' . $name_1;
        $parameter   = '&-show=' . $show_0 . '&-name=' . $name_0;
        $data        = $this->SendParameter('setoverlayattr&-region=0' . $parameter . $parameter_2);
        return $data;
    }

    // Privacy Mask

    /** Get Privacy Mask Attributes
     *
     * @return array
     */
    public function GetPrivacyMaskAttributes()
    {
        $payload = $this->SendParameter('getcover');
        $data    = $this->CheckPayload($payload);
        return $data;
    }

    public function SetPrivacyZone1($show_1)
    {
        $this->WriteAttributeInteger('show_1', intval($show_1));
        $data = $this->SetPrivacyMaskAttributes();
        $this->WriteValue('show_1', $show_1);
        return $data;
    }

    public function SetPrivacyZone2($show_2)
    {
        $this->WriteAttributeInteger('show_2', intval($show_2));
        $data = $this->SetPrivacyMaskAttributes();
        $this->WriteValue('show_2', $show_2);
        return $data;
    }

    public function SetPrivacyZone3($show_3)
    {
        $this->WriteAttributeInteger('show_3', intval($show_3));
        $data = $this->SetPrivacyMaskAttributes();
        $this->WriteValue('show_3', $show_3);
        return $data;
    }

    public function SetPrivacyZone4($show_4)
    {
        $this->WriteAttributeInteger('show_4', intval($show_4));
        $data = $this->SetPrivacyMaskAttributes();
        $this->WriteValue('show_4', $show_4);
        return $data;
    }

    private function ConvertColorHEX($color)
    {
        $hexcolor = strtoupper(dechex($color));
        if ($hexcolor == "0") {
            $hexstring = "000000";

        } else {
            $hexstring = $hexcolor;
        }
        return $hexstring;
    }

    public function SetPrivacyZone1Color($color_1)
    {
        $this->WriteAttributeString('color_1', $this->ConvertColorHEX($color_1));
        $data = $this->SetPrivacyMaskAttributes();
        return $data;
    }

    public function SetSettingsPrivacyZone1X($x_1)
    {
        $this->WriteAttributeInteger('x_1', $x_1);
        $data = $this->SetPrivacyMaskAttributes();
        return $data;
    }

    public function SetSettingsPrivacyZone1Y($y_1)
    {
        $this->WriteAttributeInteger('y_1', $y_1);
        $data = $this->SetPrivacyMaskAttributes();
        return $data;
    }

    public function SetSettingsPrivacyZone1Weight($w_1)
    {
        $this->WriteAttributeInteger('w_1', $w_1);
        $data = $this->SetPrivacyMaskAttributes();
        return $data;
    }

    public function SetSettingsPrivacyZone1Height(int $h_1)
    {
        $this->WriteAttributeInteger('h_1', $h_1);
        $data = $this->SetPrivacyMaskAttributes();
        return $data;
    }

    public function SetSettingsPrivacyZone1(string $color_1, int $x_1, int $y_1, int $w_1, int $h_1)
    {
        $this->WriteAttributeString('color_1', $this->ConvertColorHEX($color_1));
        $this->WriteAttributeInteger('x_1', $x_1);
        $this->WriteAttributeInteger('y_1', $y_1);
        $this->WriteAttributeInteger('w_1', $w_1);
        $this->WriteAttributeInteger('h_1', $h_1);
        $data = $this->SetPrivacyMaskAttributes();
        return $data;
    }

    public function SetPrivacyZone2Color($color_2)
    {
        $this->WriteAttributeString('color_2', $this->ConvertColorHEX($color_2));
        $data = $this->SetPrivacyMaskAttributes();
        return $data;
    }

    public function SetSettingsPrivacyZone2X($x_2)
    {
        $this->WriteAttributeInteger('x_2', $x_2);
        $data = $this->SetPrivacyMaskAttributes();
        return $data;
    }

    public function SetSettingsPrivacyZone2Y($y_2)
    {
        $this->WriteAttributeInteger('y_2', $y_2);
        $data = $this->SetPrivacyMaskAttributes();
        return $data;
    }

    public function SetSettingsPrivacyZone2Weight($w_2)
    {
        $this->WriteAttributeInteger('w_2', $w_2);
        $data = $this->SetPrivacyMaskAttributes();
        return $data;
    }

    public function SetSettingsPrivacyZone2Height(int $h_2)
    {
        $this->WriteAttributeInteger('h_2', $h_2);
        $data = $this->SetPrivacyMaskAttributes();
        return $data;
    }

    public function SetSettingsPrivacyZone2($color_2, $x_2, $y_2, $w_2, $h_2)
    {
        $this->WriteAttributeString('color_2', $this->ConvertColorHEX($color_2));
        $this->WriteAttributeInteger('x_2', $x_2);
        $this->WriteAttributeInteger('y_2', $y_2);
        $this->WriteAttributeInteger('w_2', $w_2);
        $this->WriteAttributeInteger('h_2', $h_2);
        $data = $this->SetPrivacyMaskAttributes();
        return $data;
    }

    public function SetPrivacyZone3Color($color_3)
    {
        $this->WriteAttributeString('color_3', $this->ConvertColorHEX($color_3));
        $data = $this->SetPrivacyMaskAttributes();
        return $data;
    }

    public function SetSettingsPrivacyZone3X($x_3)
    {
        $this->WriteAttributeInteger('x_3', $x_3);
        $data = $this->SetPrivacyMaskAttributes();
        return $data;
    }

    public function SetSettingsPrivacyZone3Y($y_3)
    {
        $this->WriteAttributeInteger('y_3', $y_3);
        $data = $this->SetPrivacyMaskAttributes();
        return $data;
    }

    public function SetSettingsPrivacyZone3Weight($w_3)
    {
        $this->WriteAttributeInteger('w_3', $w_3);
        $data = $this->SetPrivacyMaskAttributes();
        return $data;
    }

    public function SetSettingsPrivacyZone3Height(int $h_3)
    {
        $this->WriteAttributeInteger('h_3', $h_3);
        $data = $this->SetPrivacyMaskAttributes();
        return $data;
    }

    public function SetSettingsPrivacyZone3($color_3, $x_3, $y_3, $w_3, $h_3)
    {
        $this->WriteAttributeString('color_1', $this->ConvertColorHEX($color_3));
        $this->WriteAttributeInteger('x_3', $x_3);
        $this->WriteAttributeInteger('y_3', $y_3);
        $this->WriteAttributeInteger('w_3', $w_3);
        $this->WriteAttributeInteger('h_3', $h_3);
        $data = $this->SetPrivacyMaskAttributes();
        return $data;
    }

    public function SetPrivacyZone4Color($color_4)
    {
        $this->WriteAttributeString('color_4', $this->ConvertColorHEX($color_4));
        $data = $this->SetPrivacyMaskAttributes();
        return $data;
    }

    public function SetSettingsPrivacyZone4X($x_4)
    {
        $this->WriteAttributeInteger('x_4', $x_4);
        $data = $this->SetPrivacyMaskAttributes();
        return $data;
    }

    public function SetSettingsPrivacyZone4Y($y_4)
    {
        $this->WriteAttributeInteger('y_4', $y_4);
        $data = $this->SetPrivacyMaskAttributes();
        return $data;
    }

    public function SetSettingsPrivacyZone4Weight($w_4)
    {
        $this->WriteAttributeInteger('w_4', $w_4);
        $data = $this->SetPrivacyMaskAttributes();
        return $data;
    }

    public function SetSettingsPrivacyZone4Height(int $h_4)
    {
        $this->WriteAttributeInteger('h_4', $h_4);
        $data = $this->SetPrivacyMaskAttributes();
        return $data;
    }

    public function SetSettingsPrivacyZone4($color_4, $x_4, $y_4, $w_4, $h_4)
    {
        $this->WriteAttributeString('color_1', $this->ConvertColorHEX($color_4));
        $this->WriteAttributeInteger('x_4', $x_4);
        $this->WriteAttributeInteger('y_4', $y_4);
        $this->WriteAttributeInteger('w_4', $w_4);
        $this->WriteAttributeInteger('h_4', $h_4);
        $data = $this->SetPrivacyMaskAttributes();
        return $data;
    }

    /** Set Privacy Mask Attributes
     *
     * @return false|string
     */
    public function SetPrivacyMaskAttributes()
    {
        $show_1  = $this->ReadAttributeInteger('show_1');
        $color_1 = $this->ReadAttributeString('color_1');
        $x_1     = $this->ReadAttributeInteger('x_1');
        $y_1     = $this->ReadAttributeInteger('y_1');
        $w_1     = $this->ReadAttributeInteger('w_1');
        $h_1     = $this->ReadAttributeInteger('h_1');
        $show_2  = $this->ReadAttributeInteger('show_2');
        $color_2 = $this->ReadAttributeString('color_2');
        $x_2     = $this->ReadAttributeInteger('x_2');
        $y_2     = $this->ReadAttributeInteger('y_2');
        $w_2     = $this->ReadAttributeInteger('w_2');
        $h_2     = $this->ReadAttributeInteger('h_2');
        $show_3  = $this->ReadAttributeInteger('show_3');
        $color_3 = $this->ReadAttributeString('color_3');
        $x_3     = $this->ReadAttributeInteger('x_3');
        $y_3     = $this->ReadAttributeInteger('y_3');
        $w_3     = $this->ReadAttributeInteger('w_3');
        $h_3     = $this->ReadAttributeInteger('h_3');
        $show_4  = $this->ReadAttributeInteger('show_4');
        $color_4 = $this->ReadAttributeString('color_4');
        $x_4     = $this->ReadAttributeInteger('x_4');
        $y_4     = $this->ReadAttributeInteger('y_4');
        $w_4     = $this->ReadAttributeInteger('w_4');
        $h_4     = $this->ReadAttributeInteger('h_4');

        $parameter_2 =
            '&cmd=setcover&-region=2&-show=' . $show_2 . '&-color=' . $color_2 . '&-x=' . $x_2 . '&-y=' . $y_2 . '&-w=' . $w_2 . '&-h=' . $h_2;
        $parameter_3 =
            '&cmd=setcover&-region=3&-show=' . $show_3 . '&-color=' . $color_3 . '&-x=' . $x_3 . '&-y=' . $y_3 . '&-w=' . $w_3 . '&-h=' . $h_3;
        $parameter_4 =
            '&cmd=setcover&-region=4&-show=' . $show_4 . '&-color=' . $color_4 . '&-x=' . $x_4 . '&-y=' . $y_4 . '&-w=' . $w_4 . '&-h=' . $h_4;

        $parameter =
            '&-show=' . $show_1 . '&-color=' . $color_1 . '&-x=' . $x_1 . '&-y=' . $y_1 . '&-w=' . $w_1 . '&-h=' . $h_1 . $parameter_2 . $parameter_3
            . $parameter_4;
        $data      = $this->SendParameter('setcover&-region=1' . $parameter);
        return $data;
    }

    // Features Menu

    // Email Settings

    /** Get Email Notification Parameter
     *
     * @return array
     */
    public function GetEmailNotificationParameter()
    {
        $payload = $this->SendParameter('getsmtpattr');
        $data    = $this->CheckPayload($payload);
        return $data;
    }

    /** Set Email Notification Parameter
     *
     * @return false|string
     */
    public function SetEmailNotificationParameter()
    {
        $ma_ssl       = $this->ReadPropertyInteger('ma_ssl');
        $ma_from      = $this->ReadPropertyString('ma_from');
        $ma_to        = $this->ReadPropertyString('ma_to');
        $ma_subject   = $this->ReadPropertyString('ma_subject');
        $ma_text      = $this->ReadPropertyString('ma_text');
        $ma_server    = $this->ReadPropertyString('ma_text');
        $ma_port      = $this->ReadPropertyInteger('ma_port');
        $ma_logintype = $this->ReadPropertyInteger('ma_logintype');
        $ma_username  = $this->ReadPropertyString('ma_username');
        $ma_password  = $this->ReadPropertyString('ma_password');
        $parameter    =
            '&-ma_ssl=' . $ma_ssl . '&-ma_from=' . $ma_from . '&-ma_to=' . $ma_to . '&-ma_subject=' . $ma_subject . '&-ma_text=' . $ma_text
            . '&-ma_server=' . $ma_server . '&-ma_port=' . $ma_port . '&-ma_logintype=' . $ma_logintype . '&-ma_username=' . $ma_username
            . '&-ma_password=' . $ma_password;
        $data         = $this->SendParameter('setsmtpattr' . $parameter);
        return $data;
    }

    // FTP Settings

    /** Get INSTAR Cloud Server Parameter
     *
     * @return array
     */
    public function GetINSTARCloudServerParameter()
    {
        $payload = $this->SendParameter('getftpattr');
        $data    = $this->CheckPayload($payload);
        return $data;
    }

    public function SetFTPServer($ft_server)
    {
        $this->WriteAttributeString('ft_server', $ft_server);
        $this->SetINSTARCloudServerParameter();
    }

    public function SetFTPPort($ft_port)
    {
        $this->WriteAttributeInteger('ft_port', $ft_port);
        $this->SetINSTARCloudServerParameter();
    }

    public function SetFTPUser($ft_username)
    {
        $this->WriteAttributeString('ft_username', $ft_username);
        $this->SetINSTARCloudServerParameter();
    }

    public function SetFTPPassword($ft_password)
    {
        $this->WriteAttributeString('ft_password', $ft_password);
        $this->SetINSTARCloudServerParameter();
    }

    public function SetFTPMode($ft_mode)
    {
        $this->WriteAttributeInteger('ft_mode', $ft_mode);
        $this->SetINSTARCloudServerParameter();
    }

    public function SetFTPDir($ft_dirname)
    {
        $this->WriteAttributeString('ft_dirname', $ft_dirname);
        $this->SetINSTARCloudServerParameter();
    }

    public function SetFTPDirmode($ft_dirmode)
    {
        $this->WriteAttributeInteger('ft_dirmode', $ft_dirmode);
        $this->SetINSTARCloudServerParameter();
    }

    public function SetFTPSSL($ft_ssl)
    {
        $this->WriteAttributeInteger('ft_ssl', $ft_ssl);
        $this->SetINSTARCloudServerParameter();
    }

    public function SetFTPParameter($ft_server, $ft_port, $ft_username, $ft_password, $ft_mode, $ft_dirname, $ft_dirmode, $ft_ssl)
    {
        $this->WriteAttributeString('ft_server', $ft_server);
        $this->WriteAttributeInteger('ft_port', $ft_port);
        $this->WriteAttributeString('ft_username', $ft_username);
        $this->WriteAttributeString('ft_password', $ft_password);
        $this->WriteAttributeInteger('ft_mode', $ft_mode);
        $this->WriteAttributeString('ft_dirname', $ft_dirname);
        $this->WriteAttributeInteger('ft_dirmode', $ft_dirmode);
        $this->WriteAttributeInteger('ft_ssl', $ft_ssl);
        $this->SetINSTARCloudServerParameter();
    }

    /** Set INSTAR Cloud Server Parameter
     *
     * @return false|string
     */
    public function SetINSTARCloudServerParameter()
    {
        $ft_server        = $this->ReadPropertyString('ft_server');
        $ft_port          = $this->ReadPropertyInteger('ft_port');
        $ft_username      = $this->ReadPropertyString('ft_username');
        $ft_password      = $this->ReadPropertyString('ft_password');
        $ft_mode          = $this->ReadPropertyInteger('ft_mode');
        $ft_dirname       = $this->ReadPropertyString('ft_dirname');
        $ft_autocreatedir = $this->ReadPropertyInteger('ft_autocreatedir');
        $ft_dirmode       = $this->ReadPropertyInteger('ft_dirmode');
        $ft_ssl           = $this->ReadPropertyInteger('ft_ssl');
        $parameter        =
            '&-ft_server=' . $ft_server . '&-ft_port=' . $ft_port . '&-ft_username=' . $ft_username . '&-ft_password=' . $ft_password . '&-ft_mode='
            . $ft_mode . '&-ft_dirname=' . $ft_dirname . '&-ft_autocreatedir=' . $ft_autocreatedir . '&-ft_dirmode=' . $ft_dirmode . '&-ft_ssl='
            . $ft_ssl;
        $data             = $this->SendParameter('setftpattr' . $parameter);
        return $data;
    }

    /** Get FTP Server Parameter
     *
     * @return array
     */
    public function GetFTPServerParameter()
    {
        $payload = $this->SendParameter('get_instar_admin&-index=31');
        $data    = $this->CheckPayload($payload);
        return $data;
    }

    /** Set FTP Server Parameter
     *
     * @return false|string
     */
    public function SetFTPServerParameter()
    {
        $admin_value31 = $this->ReadPropertyString('admin_value31');
        $url_code      = urlencode($admin_value31);
        $parameter     = '&-value=' . $url_code;
        $data          = $this->SendParameter('set_instar_admin&-index=31' . $parameter);
        return $data;
    }

    /** Test FTP Server Parameter
     *
     * @return array
     */
    public function TestFTPServerParameter()
    {
        $payload = $this->SendParameter('testftp');
        $data    = $this->SplitPayload($payload);
        return $data;
    }

    // Nightvision Settings


    /** Get IR Light Parameter
     *
     * @return bool|string
     */
    public function GetIRMode()
    {
        $payload = $this->SendParameter('getinfrared');
        $data    = $this->CheckPayload($payload);
        return $data;
    }

    public function SetIRLED($ir_state)
    {
        if($ir_state == 0)
        {
            $this->LED_Auto();
        }
        else
        {
            $this->LED_Inactive();
        }
    }

    /** IR LED Auto
     *
     * @return false|string
     */
    public function LED_Auto()
    {
        $this->WriteValue('infraredstat', 0);
        $parameter = '&-infraredstat=auto';
        $state     = $this->SendParameter('setinfrared' . $parameter);
        return $state;
    }

    /** IR LED Off
     *
     * @return false|string
     */
    public function LED_Inactive()
    {
        $this->WriteValue('infraredstat', 2);
        $parameter = '&-infraredstat=close';
        $state     = $this->SendParameter('setinfrared' . $parameter);
        return $state;
    }

    /** IR LED ON
     *
     * @return false|string
     */
    public function LED_On()
    {
        $this->WriteValue('infraredstat', 1);
        $parameter = '&-infraredstat=open';
        $state     = $this->SendParameter('setinfrared' . $parameter);
        return $state;
    }

    /** Set IR LED Parameter
     *
     * @return false|string
     */
    public function SetIR_LEDParameter()
    {
        $infraredstat = $this->ReadAttributeString('infraredstat');
        $parameter    = '&-infraredstat=' . $infraredstat;
        $data         = $this->SendParameter('setinfrared' . $parameter);
        return $data;
    }

    /** Get Time Window to Switch IR LEDs from off to auto
     *
     * @return array
     */
    public function GetTimeWindowSwitchIR()
    {
        $payload = $this->SendParameter('getplancgi');
        $data    = $this->CheckPayload($payload, '_ir');
        return $data;
    }

    /** Define a Time Window to Switch IR LEDs from off to auto
     *
     * @return false|string
     */
    public function SetTimeWindowSwitchIR()
    {
        $plancgi_enable_0 = $this->ReadAttributeInteger('plancgi_enable_0');
        $plancgi_enable_1 = $this->ReadAttributeInteger('plancgi_enable_1');
        $plancgi_time_0   = $this->ReadAttributeInteger('plancgi_time_0');
        $plancgi_time_1   = $this->ReadAttributeInteger('plancgi_time_1');
        // http://admin:instar@192.168.178.88/param.cgi?cmd=setplancgi&-plancgi_enable_0=1&-plancgi_enable_1=1&-plancgi_time_0=21600&-plancgi_time_1=64800
        $parameter = '&-plancgi_enable_0=' . $plancgi_enable_0 . '&-plancgi_enable_1=' . $plancgi_enable_1 . '&-plancgi_time_0=' . $plancgi_time_0
                     . '&-plancgi_time_1=' . $plancgi_time_1;
        $data      = $this->SendParameter('setplancgi' . $parameter);
        return $data;
    }

    // PTZ Settings

    /** Get Pan&Tilt Settings
     *
     * @return array
     */
    public function GetPan_TiltSettings()
    {
        $payload = $this->SendParameter('getmotorattr');
        $data    = $this->CheckPayload($payload);
        return $data;
    }

    /** Set Pan&Tilt Settings
     *
     * @return false|string
     */
    public function SetPan_TiltSettings()
    {
        $selfdet          = $this->ReadAttributeString('selfdet');
        $movehome         = $this->ReadAttributeString('movehome');
        $ptzalarmmask     = $this->ReadAttributeString('ptzalarmmask');
        $tiltspeed        = $this->ReadAttributeInteger('tiltspeed');
        $panspeed         = $this->ReadAttributeInteger('panspeed');
        $tiltscan         = $this->ReadAttributeInteger('tiltscan');
        $panscan          = $this->ReadAttributeInteger('panscan');
        $value            = 0;
        $alarmpresetindex = $this->ReadAttributeInteger('alarmpresetindex');
        $parameter        =
            '&-selfdet=' . $selfdet . '&-movehome=' . $movehome . '&-ptzalarmmask=' . $ptzalarmmask . '&-tiltspeed=' . $tiltspeed . '&-panspeed='
            . $panspeed . '&-tiltscan=' . $tiltscan . '&-panscan=' . $panscan . '&-value=' . $value . '&-alarmpresetindex=' . $alarmpresetindex;
        $data             = $this->SendParameter('setmotorattr' . $parameter);
        return $data;
    }

    /** Get State of Alarm Position
     *
     * @return array
     */
    public function GetStateAlarmPosition()
    {
        $payload = $this->SendParameter('getmdalarm&-aname=preset');
        $data    = $this->CheckPayload($payload);
        return $data;
    }

    /** Set State of Alarm Position
     *
     * @return false|string
     */
    protected function SetStateAlarmPosition()
    {
        $md_preset_switch = $this->ReadAttributeString('md_preset_switch');
        $parameter        = '&-switch=' . $md_preset_switch;
        $data             = $this->SendParameter('setmdalarm&-aname=preset' . $parameter);
        return $data;
    }

    /** Get Park Position Parameter
     *
     * @return array
     */
    public function GetParkPositionParameter()
    {
        $payload = $this->SendParameter('gettimerpreset');
        $data    = $this->CheckPayload($payload);
        return $data;
    }

    /** Set Park Position Parameter
     *
     * @return false|string
     */
    protected function SetParkPositionParameter()
    {
        $timerpreset_enable   = $this->ReadAttributeInteger('timerpreset_enable');
        $timerpreset_index    = $this->ReadAttributeInteger('timerpreset_index');
        $timerpreset_interval = $this->ReadAttributeInteger('timerpreset_interval');
        $parameter            =
            '&-timerpreset_enable=' . $timerpreset_enable . '&-timerpreset_index=' . $timerpreset_index . '&-timerpreset_interval='
            . $timerpreset_interval;
        $data                 = $this->SendParameter('settimerpreset' . $parameter);
        return $data;
    }

    /** Get One-Step Pan&Tilt Control
     *
     * @return array
     */
    public function GetOneStepPanTiltControl()
    {
        $payload = $this->SendParameter('get_instar_admin&-index=46');
        $data    = $this->CheckPayload($payload);
        return $data;
    }

    /** Set One-Step Pan&Tilt Control
     *
     * @return false|string
     */
    protected function SetOneStepPanTiltControl()
    {
        $admin_value46 = $this->ReadAttributeInteger('admin_value46');
        $parameter     = '&-value=' . $admin_value46;
        $data          = $this->SendParameter('set_instar_admin&-index=46' . $parameter);
        return $data;
    }

    // PTZ Tour Settings

    /** Get Pan&Tilt Tour Settings
     *
     * @return array
     */
    public function GetPanTiltTourSettings()
    {
        $payload = $this->SendParameter('getptztour');
        // TODO auswerten

        $data    = $this->CheckPayload($payload);
        return $data;
    }

    /** Set Pan&Tilt Tour Settings
     *
     * @return false|string
     */
    public function SetPanTiltTourSettings()
    {
        $tour_index    = $this->ReadAttributeString('tour_index');
        $tour_interval = $this->ReadAttributeString('tour_interval');
        $tour_times    = $this->ReadAttributeInteger('tour_times');
        // http://admin:instar@192.168.178.88/param.cgi?cmd=setptztour&-tour_index=0;1;2;-1;-1;-1;-1;-1&-tour_interval=300;300;300;300;300;300;300;300&-tour_times=1
        $parameter = '&-tour_index=' . $tour_index . '&-tour_interval=' . $tour_interval . '&-tour_times=' . $tour_times;
        $data      = $this->SendParameter('setptztour' . $parameter);
        return $data;
    }

    // Status LEDs

    /** Get Status from Status LEDs
     *
     * @return array
     */
    public function GetStatusLED()
    {
        $payload = $this->SendParameter('getlightattr');
        $data    = $this->CheckPayload($payload);
        return $data;
    }

    /** Activate / Deactivate Status LEDs
     *
     * @return false|string
     */
    public function SetStatusLED()
    {
        $light_index  = $this->ReadAttributeInteger('light_index');
        $light_enable = $this->ReadAttributeString('light2_enable');
        // http://admin:instar@192.168.178.88/param.cgi?cmd=setlightattr&-light_index=1&-light_enable=on&cmd=setlightattr&-light_index=2&-light_enable=on
        $parameter = '&-light_index=' . $light_index . '&-light_enable=' . $light_enable;
        $data      = $this->SendParameter('setlightattr' . $parameter);
        return $data;
    }

    // Recording Settings

    /** Get File Length of Manual Recordings
     *
     * @return array
     */
    public function GetFileLengthManualRecordings()
    {
        $payload = $this->SendParameter('get_instar_admin&-index=44');
        $data    = $this->CheckPayload($payload);
        return $data;
    }

    /** Set File Length of Manual Recordings
     *
     * @return false|string
     */
    public function SetFileLengthManualRecordings(int $value)
    {
        // http://admin:instar@192.168.178.88/param.cgi?cmd=set_instar_admin&-index=44&-value=600
        $parameter = '&-value=' . $value;
        $data      = $this->SendParameter('set_instar_admin&-index=44' . $parameter);
        return $data;
    }

    // SD Card

    /** Format SD Card
     *
     * @return array
     */
    public function FormatSD_Card()
    {
        $data = $this->SendParameter('sdfrmt');
        return $data;
    }

    /** Unmount SD Card
     *
     * @return false|string
     */
    public function UnmountSD_Card()
    {
        $data = $this->SendParameter('sdstop');
        return $data;
    }

    // Alarm Menu

    // Alarm Actions

    public function GetAlarmActionParameterEmailsnap()
    {
        $parameter = '&-aname=emailsnap';
        $payload   = $this->SendParameter('getmdalarm' . $parameter);
        $data    = $this->CheckPayload($payload);
        return $data;
    }

    public function GetAlarmActionParameterSnap()
    {
        $parameter = '&-aname=snap';
        $payload   = $this->SendParameter('getmdalarm' . $parameter);
        $data    = $this->CheckPayload($payload);
        return $data;
    }

    public function GetAlarmActionParameterRecord()
    {
        $parameter = '&-aname=record';
        $payload   = $this->SendParameter('getmdalarm' . $parameter);
        $data    = $this->CheckPayload($payload);
        return $data;
    }

    public function GetAlarmActionParameterFTPRecord()
    {
        $parameter = '&-aname=ftprec';
        $payload   = $this->SendParameter('getmdalarm' . $parameter);
        $data    = $this->CheckPayload($payload);
        return $data;
    }

    public function GetAlarmActionParameterRelay()
    {
        $parameter = '&-aname=relay';
        $payload   = $this->SendParameter('getmdalarm' . $parameter);
        $data    = $this->CheckPayload($payload);
        return $data;
    }

    public function GetAlarmActionParameterFTPSnap()
    {
        $parameter = '&-aname=ftpsnap';
        $payload   = $this->SendParameter('getmdalarm' . $parameter);
        $data    = $this->CheckPayload($payload);
        return $data;
    }

    public function GetAlarmActionParameterSound()
    {
        $parameter = '&-aname=sound';
        $payload   = $this->SendParameter('getmdalarm' . $parameter);
        $data    = $this->CheckPayload($payload);
        return $data;
    }

    public function GetAlarmActionParameterType()
    {
        $parameter = '&-aname=type';
        $payload   = $this->SendParameter('getmdalarm' . $parameter);
        $data    = $this->CheckPayload($payload);
        return $data;
    }

    /** Get Alarm Action Parameter
     *
     * @return array
     */
    public function GetAlarmActionParameter()
    {
        $payload = $this->SendParameter('getmdalarm');
        $data    = $this->SplitPayload($payload);
        return $data;
    }

    /** Set Alarm Action Parameter
     *
     * @return false|string
     */
    public function SetAlarmActionParameter()
    {
        $emailsnap  = $this->ReadAttributeString('md_emailsnap_switch');
        $setmdalarm = $this->ReadAttributeString('md_snap_switch');
        $ftpsnap    = $this->ReadAttributeString('md_ftpsnap_switch');
        $sound      = $this->ReadAttributeString('md_sound_switch');
        $alarm      = $this->ReadAttributeString('md_alarm_type');
        $relay      = $this->ReadAttributeString('md_relay_switch');
        $record     = $this->ReadAttributeString('md_record_switch');
        $ftprec     = $this->ReadAttributeString('md_ftprec_switch');
        $parameter  = '&-aname=emailsnap&-switch=' . $emailsnap . '&cmd=setmdalarm&-aname=snap&-switch=' . $setmdalarm
                      . '&cmd=setmdalarm&-aname=ftpsnap&-switch=' . $ftpsnap . '&cmd=setmdalarm&-aname=record&-switch=' . $record
                      . '&cmd=setmdalarm&-aname=ftprec&-switch=' . $ftprec . '&cmd=setmdalarm&-aname=type&-switch=' . $alarm
                      . '&cmd=setmdalarm&-aname=relay&-switch=' . $relay . '&cmd=setmdalarm&-aname=sound&-switch=' . $sound;
        $data       = $this->SendParameter('setmdalarm' . $parameter);
        return $data;
    }

    /** Get Audio Detection Parameter
     *
     * @return array
     */
    public function GetAudioDetectionParameter()
    {
        $payload = $this->SendParameter('getaudioalarmattr');
        $data    = $this->CheckPayload($payload);
        return $data;
    }

    /** Set Audio Detection Parameter
     *
     * @return false|string
     */
    public function SetAudioDetectionParameter()
    {
        $aa_enable = $this->ReadAttributeInteger('aa_enable');
        $parameter = '&-aa_enable=' . $aa_enable;
        $data      = $this->SendParameter('setaudioalarmattr' . $parameter);
        return $data;
    }

    /** Get Alarm Input Parameter
     *
     * @return array
     */
    public function GetAlarmInputParameter()
    {
        $payload = $this->SendParameter('getioattr');
        $data    = $this->CheckPayload($payload);
        return $data;
    }

    /** Set Alarm Input Parameter
     *
     * @return false|string
     */
    public function SetAlarmInputParameter()
    {
        $io_enable = $this->ReadAttributeInteger('io_enable');
        $parameter = '&-io_enable=' . $io_enable;
        $data      = $this->SendParameter('setioattr' . $parameter);
        return $data;
    }

    /** Get Passive Infrared Motion Detection Sensor Parameter
     *
     * @return array
     */
    public function GetPassiveInfraredMotionDetectionSensorParameter()
    {
        $payload = $this->SendParameter('getpirattr');
        $data    = $this->CheckPayload($payload);
        return $data;
    }

    public function EnablePIR(bool $state)
    {
        $this->WriteAttributeInteger('pir_enable', intval($state));
        $data = $this->SetPassiveInfraredMotionDetectionSensorParameter();
        $this->WriteValue('pir_enable', $state);
        return $data;
    }

    /** Set Passive Infrared Motion Detection Sensor Parameter
     *
     * @return false|string
     */
    public function SetPassiveInfraredMotionDetectionSensorParameter()
    {
        $pir_enable = $this->ReadAttributeInteger('pir_enable');
        $parameter  = '&-pir_enable=' . $pir_enable;
        $data       = $this->SendParameter('setpirattr' . $parameter);
        return $data;
    }

    /** Get Number of Alarm Snapshots
     *
     * @return array
     */
    public function GetNumberAlarmSnapshots()
    {
        $payload = $this->SendParameter('getalarmsnapattr');
        $data    = $this->CheckPayload($payload);
        return $data;
    }

    /** Set Number of Alarm Snapshots
     *
     * @return false|string
     */
    public function SetNumberAlarmSnapshots()
    {
        $snap_chn         = $this->ReadAttributeInteger('snap_chn');
        $snap_count       = $this->ReadAttributeInteger('snap_count');
        $email_snap_count = $this->ReadAttributeInteger('email_snap_count');
        $ftp_snap_count   = $this->ReadAttributeInteger('ftp_snap_count');
        $parameter        =
            '&-snap_chn=' . $snap_chn . '&-snap_count=' . $snap_count . '&-email_snap_count=' . $email_snap_count . '&-ftp_snap_count='
            . $ftp_snap_count;
        $data             = $this->SendParameter('setalarmsnapattr' . $parameter);
        return $data;
    }

    // Alarm Areas

    /** Get Alarm Areas Parameter
     *
     * @return array
     */
    public function GetAlarmAreasParameter()
    {
        $payload = $this->SendParameter('getmdattr');
        $data    = $this->CheckPayload($payload);
        return $data;
    }


    public function SetAlarmZone1(bool $m1_enable)
    {
        if ($m1_enable) {
            $this->WriteAttributeInteger('m1_enable', 1);
        } else {
            $this->WriteAttributeInteger('m1_enable', 0);
        }
        $data = $this->SetAlarmAreasParameter();
        $this->WriteValue('m1_enable', $m1_enable);
        return $data;
    }

    public function SetAlarmZone2(bool $m2_enable)
    {
        if ($m2_enable) {
            $this->WriteAttributeInteger('m2_enable', 1);
        } else {
            $this->WriteAttributeInteger('m2_enable', 0);
        }
        $data = $this->SetAlarmAreasParameter();
        $this->WriteValue('m2_enable', $m2_enable);
        return $data;
    }

    public function SetAlarmZone3(bool $m3_enable)
    {
        if ($m3_enable) {
            $this->WriteAttributeInteger('m3_enable', 1);
        } else {
            $this->WriteAttributeInteger('m3_enable', 0);
        }
        $data = $this->SetAlarmAreasParameter();
        $this->WriteValue('m3_enable', $m3_enable);
        return $data;
    }

    public function SetAlarmZone4(bool $m4_enable)
    {
        if ($m4_enable) {
            $this->WriteAttributeInteger('m4_enable', 1);
        } else {
            $this->WriteAttributeInteger('m4_enable', 0);
        }
        $data = $this->SetAlarmAreasParameter();
        $this->WriteValue('m4_enable', $m4_enable);
        return $data;
    }

    // X-Axis Offset of Alarm Area Origin [0-(1920-w)]
    // Y-Axis Offset of Alarm Area Origin [0-(1080-h)]

    public function SetAlarmZone1ParametersForm(int $m1_x, int $m1_y, int $m1_w, int $m1_h)
    {
        $m1_x = intval(round($m1_x * 1.92));
        $m1_y = intval(round($m1_y * 1.08));
        $m1_w = intval(round($m1_w * 1.92));
        $m1_h = intval(round($m1_h * 1.08));
        $data = $this->SetAlarmZone1Parameters($m1_x, $m1_y, $m1_w, $m1_h);
        return $data;
    }

    public function SetAlarmZone2ParametersForm(int $m2_x, int $m2_y, int $m2_w, int $m2_h)
    {
        $m2_x = intval(round($m2_x * 1.92));
        $m2_y = intval(round($m2_y * 1.08));
        $m2_w = intval(round($m2_w * 1.92));
        $m2_h = intval(round($m2_h * 1.08));
        $data = $this->SetAlarmZone1Parameters($m2_x, $m2_y, $m2_w, $m2_h);
        return $data;
    }

    public function SetAlarmZone3ParametersForm(int $m3_x, int $m3_y, int $m3_w, int $m3_h)
    {
        $m3_x = intval(round($m3_x * 1.92));
        $m3_y = intval(round($m3_y * 1.08));
        $m3_w = intval(round($m3_w * 1.92));
        $m3_h = intval(round($m3_h * 1.08));
        $data = $this->SetAlarmZone1Parameters($m3_x, $m3_y, $m3_w, $m3_h);
        return $data;
    }

    public function SetAlarmZone4ParametersForm(int $m4_x, int $m4_y, int $m4_w, int $m4_h)
    {
        $m4_x = intval(round($m4_x * 1.92));
        $m4_y = intval(round($m4_y * 1.08));
        $m4_w = intval(round($m4_w * 1.92));
        $m4_h = intval(round($m4_h * 1.08));
        $data = $this->SetAlarmZone1Parameters($m4_x, $m4_y, $m4_w, $m4_h);
        return $data;
    }

    public function SetAlarmZone1Parameters(int $m1_x, int $m1_y, int $m1_w, int $m1_h)
    {
        $this->WriteAttributeInteger('m1_x', $m1_x);
        $this->WriteAttributeInteger('m1_y', $m1_y);
        $this->WriteAttributeInteger('m1_w', $m1_w);
        $this->WriteAttributeInteger('m1_h', $m1_h);
        $data = $this->SetAlarmAreasParameter();
        return $data;
    }

    public function SetAlarmZone2Parameters(int $m2_x, int $m2_y, int $m2_w, int $m2_h)
    {
        $this->WriteAttributeInteger('m2_x', $m2_x);
        $this->WriteAttributeInteger('m2_y', $m2_y);
        $this->WriteAttributeInteger('m2_w', $m2_w);
        $this->WriteAttributeInteger('m2_h', $m2_h);
        $data = $this->SetAlarmAreasParameter();
        return $data;
    }

    public function SetAlarmZone3Parameters(int $m3_x, int $m3_y, int $m3_w, int $m3_h)
    {
        $this->WriteAttributeInteger('m3_x', $m3_x);
        $this->WriteAttributeInteger('m3_y', $m3_y);
        $this->WriteAttributeInteger('m3_w', $m3_w);
        $this->WriteAttributeInteger('m3_h', $m3_h);
        $data = $this->SetAlarmAreasParameter();
        return $data;
    }

    public function SetAlarmZone4Parameters(int $m4_x, int $m4_y, int $m4_w, int $m4_h)
    {
        $this->WriteAttributeInteger('m4_x', $m4_x);
        $this->WriteAttributeInteger('m4_y', $m4_y);
        $this->WriteAttributeInteger('m4_w', $m4_w);
        $this->WriteAttributeInteger('m4_h', $m4_h);
        $data = $this->SetAlarmAreasParameter();
        return $data;
    }

    public function SetAlarmZone1Senitivity(int $m1_sensitivity)
    {
        $this->WriteAttributeInteger('m1_sensitivity', $m1_sensitivity);
        $data = $this->SetAlarmAreasParameter();
        return $data;
    }

    public function SetAlarmZone2Senitivity(int $m2_sensitivity)
    {
        $this->WriteAttributeInteger('m2_sensitivity', $m2_sensitivity);
        $data = $this->SetAlarmAreasParameter();
        return $data;
    }

    public function SetAlarmZone3Senitivity(int $m3_sensitivity)
    {
        $this->WriteAttributeInteger('m3_sensitivity', $m3_sensitivity);
        $data = $this->SetAlarmAreasParameter();
        return $data;
    }

    public function SetAlarmZone4Senitivity(int $m4_sensitivity)
    {
        $this->WriteAttributeInteger('m4_sensitivity', $m4_sensitivity);
        $data = $this->SetAlarmAreasParameter();
        return $data;
    }

    /** Set Alarm Areas Parameter
     *
     * @return false|string
     */
    public function SetAlarmAreasParameter()
    {
        $m1_enable      = $this->ReadAttributeInteger('m1_enable'); //  Dis/Enable Alarm Detection Area 1 - 4: [0, 1]
        $m1_x           = $this->ReadAttributeInteger('m1_x'); // X-Axis Offset of Alarm Area Origin [0-(1920-w)]
        $m1_y           = $this->ReadAttributeInteger('m1_y'); // Y-Axis Offset of Alarm Area Origin [0-(1080-h)]
        $m1_w           = $this->ReadAttributeInteger('m1_w'); // Alarm Area Width [1-1920] Pixel
        $m1_h           = $this->ReadAttributeInteger('m1_h'); // Alarm Area Height [1-1080] Pixel
        $m1_sensitivity = $this->ReadAttributeInteger('m1_sensitivity'); // Detection Sensitivity [1 - 100]
        // $m1_threshold = $this->ReadAttributeInteger('m1_threshold'); // Detection Threshold (not active)
        $m2_enable      = $this->ReadAttributeInteger('m2_enable'); //  Dis/Enable Alarm Detection Area 1 - 4: [0, 1]
        $m2_x           = $this->ReadAttributeInteger('m2_x'); // X-Axis Offset of Alarm Area Origin [0-(1920-w)]
        $m2_y           = $this->ReadAttributeInteger('m2_y'); // Y-Axis Offset of Alarm Area Origin [0-(1080-h)]
        $m2_w           = $this->ReadAttributeInteger('m2_w'); // Alarm Area Width [1-1920] Pixel
        $m2_h           = $this->ReadAttributeInteger('m2_h'); // Alarm Area Height [1-1080] Pixel
        $m2_sensitivity = $this->ReadAttributeInteger('m2_sensitivity'); // Detection Sensitivity [1 - 100]
        // $m2_threshold = $this->ReadAttributeInteger('m2_threshold'); // Detection Threshold (not active)
        $m3_enable      = $this->ReadAttributeInteger('m3_enable'); //  Dis/Enable Alarm Detection Area 1 - 4: [0, 1]
        $m3_x           = $this->ReadAttributeInteger('m3_x'); // X-Axis Offset of Alarm Area Origin [0-(1920-w)]
        $m3_y           = $this->ReadAttributeInteger('m3_y'); // Y-Axis Offset of Alarm Area Origin [0-(1080-h)]
        $m3_w           = $this->ReadAttributeInteger('m3_w'); // Alarm Area Width [1-1920] Pixel
        $m3_h           = $this->ReadAttributeInteger('m3_h'); // Alarm Area Height [1-1080] Pixel
        $m3_sensitivity = $this->ReadAttributeInteger('m3_sensitivity'); // Detection Sensitivity [1 - 100]
        // $m3_threshold = $this->ReadAttributeInteger('m3_threshold'); // Detection Threshold (not active)
        $m4_enable      = $this->ReadAttributeInteger('m4_enable'); //  Dis/Enable Alarm Detection Area 1 - 4: [0, 1]
        $m4_x           = $this->ReadAttributeInteger('m4_x'); // X-Axis Offset of Alarm Area Origin [0-(1920-w)]
        $m4_y           = $this->ReadAttributeInteger('m4_y'); // Y-Axis Offset of Alarm Area Origin [0-(1080-h)]
        $m4_w           = $this->ReadAttributeInteger('m4_w'); // Alarm Area Width [1-1920] Pixel
        $m4_h           = $this->ReadAttributeInteger('m4_h'); // Alarm Area Height [1-1080] Pixel
        $m4_sensitivity = $this->ReadAttributeInteger('m4_sensitivity'); // Detection Sensitivity [1 - 100]
        // $m4_threshold = $this->ReadAttributeInteger('m4_threshold'); // Detection Threshold (not active)

        $parameter_2 = '';
        $parameter_3 = '';
        $parameter_4 = '';
        if ($m2_enable == 1) {
            $parameter_2 =
                '&cmd=setmdattr&-name=2&-enable=' . $m2_enable . '&-s=' . $m2_sensitivity . '&-x=' . $m2_x . '&-y=' . $m2_y . '&-w=' . $m2_w . '&-h='
                . $m2_h;
        }
        if ($m3_enable == 1) {
            $parameter_3 =
                '&cmd=setmdattr&-name=3&-enable=' . $m3_enable . '&-s=' . $m3_sensitivity . '&-x=' . $m3_x . '&-y=' . $m3_y . '&-w=' . $m3_w . '&-h='
                . $m3_h;
        }
        if ($m4_enable == 1) {
            $parameter_4 =
                '&cmd=setmdattr&-name=4&-enable=' . $m4_enable . '&-s=' . $m4_sensitivity . '&-x=' . $m4_x . '&-y=' . $m4_y . '&-w=' . $m4_w . '&-h='
                . $m4_h;
        }
        // TODO threshold
        $parameter = '&-name=1&-enable=' . $m1_enable . '&-s=' . $m1_sensitivity . '&-x=' . $m1_x . '&-y=' . $m1_y . '&-w=' . $m1_w . '&-h=' . $m1_h
                     . $parameter_2 . $parameter_3 . $parameter_4;
        $data      = $this->SendParameter('setmdattr' . $parameter);
        return $data;
    }

    // Alarm Schedule

    public function AlarmDetection(bool $state)
    {
        if($state)
        {
            $parameter = '&-week0=PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP&-week1=PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP&-week2=PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP&-week3=PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP PPPP&-week4=PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP&-week5=PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP&-week6=PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP';
            $this->SetValue('alarm_detection', true);
        }
        else
        {
            $parameter = '&-week0=NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN&-week1=NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN&-week2=NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN&-week3=NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN&-week4=NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN&-week5=NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN&-week6=NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN';
            $this->SetValue('alarm_detection', false);
        }
        $data      = $this->SendParameter('setscheduleex&-ename=md' . $parameter);
        return $data;
    }

    /** Get Motion Detection Time Schedule Parameter
     *
     * @return array
     */
    public function GetMotionDetectionTimeScheduleParameter()
    {
        $payload = $this->SendParameter('getscheduleex&-ename=md');
        $data    = $this->CheckPayload($payload, '_as');
        return $data;
    }

    /** Set Motion Detection Time Schedule Parameter
     *
     * @return false|string
     */
    public function SetMotionDetectionTimeScheduleParameter()
    {
        // $etm = $this->ReadAttributeInteger('etm_as');
        $week0     = $this->ReadAttributeString('week0_as');
        $week1     = $this->ReadAttributeString('week1_as');
        $week2     = $this->ReadAttributeString('week2_as');
        $week3     = $this->ReadAttributeString('week3_as');
        $week4     = $this->ReadAttributeString('week4_as');
        $week5     = $this->ReadAttributeString('week5_as');
        $week6     = $this->ReadAttributeString('week6_as');
        $parameter = '&-week0=' . $week0 . '&-week1=' . $week1 . '&-week2=' . $week2 . '&-week3=' . $week3 . '&-week4=' . $week4 . '&-week5=' . $week5
                     . '&-week6=' . $week6;
        $data      = $this->SendParameter('setscheduleex&-ename=md' . $parameter);
        return $data;
    }

    /** Get Timer Parameter
     *
     * @return array
     */
    public function GetTimerParameter()
    {
        $payload = $this->SendParameter('getplancgi');
        $data    = $this->CheckPayload($payload);
        return $data;
    }

    /** Set Timer Parameter
     *
     * @return false|string
     */
    public function SetTimerParameter()
    {
        /*
        $plancgi_time_0   = $this->ReadAttributeString('plancgi_time_0');
        $plancgi_time_1   = $this->ReadAttributeString('plancgi_time_1');
        $plancgi_time_2   = $this->ReadAttributeString('plancgi_time_2');
        $plancgi_time_3   = $this->ReadAttributeString('plancgi_time_3');
        $plancgi_time_4   = $this->ReadAttributeString('plancgi_time_4');
        $plancgi_time_5   = $this->ReadAttributeString('plancgi_time_5');
        $plancgi_time_6   = $this->ReadAttributeString('plancgi_time_6');
        $plancgi_time_7   = $this->ReadAttributeString('plancgi_time_7');
        $plancgi_time_8   = $this->ReadAttributeString('plancgi_time_8');
        $plancgi_time_9   = $this->ReadAttributeString('plancgi_time_9');
        */
        $plancgi_enable_0 = $this->ReadAttributeInteger('plancgi_enable_0');
        $plancgi_enable_1 = $this->ReadAttributeInteger('plancgi_enable_1');
        $plancgi_enable_2 = $this->ReadAttributeInteger('plancgi_enable_2');
        $plancgi_enable_3 = $this->ReadAttributeInteger('plancgi_enable_3');
        /*
        $plancgi_enable_4 = $this->ReadAttributeInteger('plancgi_enable_4');
        $plancgi_enable_5 = $this->ReadAttributeInteger('plancgi_enable_5');
        $plancgi_enable_6 = $this->ReadAttributeInteger('plancgi_enable_6');
        $plancgi_enable_7 = $this->ReadAttributeInteger('plancgi_enable_7');
        $plancgi_enable_8 = $this->ReadAttributeInteger('plancgi_enable_8');
        $plancgi_enable_9 = $this->ReadAttributeInteger('plancgi_enable_9');
        */
        $parameter = '&-plancgi_enable_0=' . $plancgi_enable_0 . '&-plancgi_enable_1=' . $plancgi_enable_1 . '&-plancgi_enable_2=' . $plancgi_enable_2
                     . '&-plancgi_enable_3=' . $plancgi_enable_3;
        $data      = $this->SendParameter('setplancgi' . $parameter);
        return $data;
    }

    // Alarm Server

    /** Get Alarmserver [0] Configuration for the Push Service
     *
     * @return array
     */
    public function GetConfigurationPushService()
    {
        $payload = $this->SendParameter('getalarmserverattr&-as_index=1');
        $data    = $this->CheckPayload($payload);
        return $data;
    }

    /** Get Alarm Server [1] Parameter
     *
     * @return array
     */
    public function GetAlarmServer1Parameter()
    {
        $payload = $this->SendParameter('getmdalarm&-aname=server2');
        $data    = $this->CheckPayload($payload);
        return $data;
    }

    /** Set Alarm Server [1] Parameter
     *
     * @return false|string
     */
    public function SetAlarmServer1Parameter()
    {
        $switch    = $this->ReadAttributeString('switch');
        $parameter = '&-switch=' . $switch;
        $data      = $this->SendParameter('setmdalarm&-aname=server2' . $parameter);
        return $data;
    }

    /** Get Alarmserver [2] Configuration
     *
     * @return array
     */
    public function GetAlarmserver2Configuration()
    {
        $payload = $this->SendParameter('getalarmserverattr&-as_index=3');
        $data    = $this->CheckPayload($payload);
        return $data;
    }

    /** Set Alarmserver [2] Configuration
     *
     * @return false|string
     */
    public function SetAlarmserver2Configuration()
    {
        $as_server      = $this->ReadAttributeString('as_server_2'); // Address of the receiving Server (e.g. Home Automation Server) [IPv4 Address]
        $as_port        = $this->ReadAttributeInteger('as_port_2'); // Port of the receiving Server [1-65536]
        $as_auth        = 1; // Authentication required [0, 1]
        $as_username    = $this->ReadAttributeString('webhook_username'); // Alarmserver Username
        $as_password    = $this->ReadAttributeString('webhook_password'); // Alarmserver Password
        $as_path        = $this->GetWebhook(); // URL Path
        $as_area        = $this->ReadAttributeInteger('as_area_2'); // Send Query when Motion is Detected
        $as_io          = $this->ReadAttributeInteger('as_io_2');  // Send Query when Alarm Input is Triggered
        $as_audio       = $this->ReadAttributeInteger('as_audio_2'); // Send Query when Audio Alarm is Triggered
        $as_areaio      = $this->ReadAttributeInteger('as_areaio_2'); // Send Query when Motion is Detected and Input is Triggered
        $as_activequery = 1; // Append Alarm Trigger to Query
        $as_query1      = $this->ReadAttributeInteger('as_query1_2'); // Activate Sending optional Parameter 1
        $as_query2      = $this->ReadAttributeInteger('as_query2_2'); // Activate Sending optional Parameter 1
        $as_query3      = $this->ReadAttributeInteger('as_query3_2'); // Activate Sending optional Parameter 1
        $as_queryattr1  = $this->ReadAttributeString('as_queryattr1_2'); // Command 1 Attribute
        $as_queryval1   = $this->ReadAttributeString('as_queryval1_2'); // Command 1 Value
        $as_queryattr2  = $this->ReadAttributeString('as_queryattr2_2'); // Command 2 Attribute
        $as_queryval2   = $this->ReadAttributeString('as_queryval2_2'); // Command 2 Value
        $as_queryattr3  = $this->ReadAttributeString('as_queryattr3_2'); // Command 3 Attribute
        $as_queryval3   = $this->ReadAttributeString('as_queryval3_2'); // Command 3 Value

        $parameter_1 = '';
        $parameter_2 = '';
        $parameter_3 = '';
        if ($as_query1 == 1) {
            $parameter_1 = '&-as_queryattr1=' . $as_queryattr1 . '&-as_queryval1=' . $as_queryval1;
        }
        if ($as_query2 == 1) {
            $parameter_2 = '&-as_queryattr2=' . $as_queryattr2 . '&-as_queryval2=' . $as_queryval2;
        }
        if ($as_query3 == 1) {
            $parameter_3 = '&-as_queryattr3=' . $as_queryattr3 . '&-as_queryval3=' . $as_queryval3;
        }
        // &-as_auth=1&-as_username=symcon&-as_password=instar&-as_area=1&-as_io=1&-as_audio=1&-as_areaio=1&-as_activequery=1&-as_query1=0&-as_query2=1&-as_query3=1&-as_queryattr2=&-as_queryval2=&-as_queryattr3=&-as_queryval3=');


        // &&-as_path=/instar&-as_queryattr1=&-as_queryval1=&-as_queryattr2=&-as_queryval2=&-as_queryattr3=&-as_queryval3=&-as_activequery=1&-as_auth=0&-as_query1=0&-as_query2=0&-as_query3=0');

        $parameter = '&-as_server=' . $as_server . '&-as_port=' . $as_port . '&-as_path=' . $as_path . '&-as_auth=' . $as_auth . '&-as_username='
                     . $as_username . '&-as_password=' . $as_password . '&-as_area=' . $as_area . '&-as_io=' . $as_io . '&-as_audio=' . $as_audio
                     . '&-as_areaio=' . $as_areaio . '&-as_activequery=' . $as_activequery . '&-as_query1=' . $as_query1 . '&-as_query2=' . $as_query2
                     . '&-as_query3=' . $as_query3 . $parameter_1 . $parameter_2 . $parameter_3;
        $data      = $this->SendParameter('setmdalarm&-aname=server2&-switch=on&cmd=setalarmserverattr&-as_index=3' . $parameter);
        return $data;
    }

    // Task Menu

    // Photoseries Settings

    /** Get Interval Snapshot Series Task
     *
     * @return array
     */
    public function GetIntervalSnapshotSeriesTask()
    {
        $payload = $this->SendParameter('getsnaptimerattrex');
        $data    = $this->CheckPayload($payload);
        return $data;
    }

    /** Setup a Interval Snapshot Series Task
     *
     * @return false|string
     */
    public function SetIntervalSnapshotSeriesTask()
    {
        $as_type     = $this->ReadAttributeString('as_type');
        $as_enable   = $this->ReadAttributeInteger('as_enable');
        $as_interval = $this->ReadAttributeInteger('as_interval');
        // &cmd=setsnaptimerattrex&-as_type=email&-as_enable=1&-as_interval=300&cmd=setsnaptimerattrex&-as_type=ftp&-as_enable=1&-as_interval=60
        $parameter = '&-as_type=' . $as_type . '&-as_enable=' . $as_enable . '&-as_interval=' . $as_interval;
        $data      = $this->SendParameter('setsnaptimerattrex' . $parameter);
        return $data;
    }

    /** Get Schedule for Interval Snapshot Series
     *
     * @return array
     */
    public function GetScheduleIntervalSnapshotSeries()
    {
        $payload = $this->SendParameter('getscheduleex&-ename=snap');
        $data    = $this->CheckPayload($payload, '_snapshot');
        return $data;
    }


    /** Set Schedule for Interval Snapshot Series
     *
     * @return false|string
     */
    public function SetScheduleIntervalSnapshotSeries()
    {
        $as_enable = $this->ReadAttributeInteger('as_enable');
        // $etm = $this->ReadAttributeInteger('etm_snapshot');
        $week0 = $this->ReadAttributeString('week0_snapshot');
        $week1 = $this->ReadAttributeString('week1_snapshot');
        $week2 = $this->ReadAttributeString('week2_snapshot');
        $week3 = $this->ReadAttributeString('week3_snapshot');
        $week4 = $this->ReadAttributeString('week4_snapshot');
        $week5 = $this->ReadAttributeString('week5_snapshot');
        $week6 = $this->ReadAttributeString('week6_snapshot');
        // http://admin:instar@192.168.178.88/param.cgi?cmd=setsnaptimerattrex&-as_enable=1&-as_interval=60&-as_type=snap&cmd=setsnaptimerattrex&-as_enable=1&-as_interval=60&-as_type=email&cmd=setsnaptimerattrex&-as_enable=1&-as_interval=60&-as_type=ftp
        $parameter = '&-as_enable=' . $as_enable;
        $data      = $this->SendParameter('setscheduleex&-ename=snap' . $parameter);
        return $data;
    }

    // Video Recordings

    /** Get Planned Video Recording Attribute
     *
     * @return array
     */
    public function GetPlannedVideoRecordingAttribute()
    {
        $payload = $this->SendParameter('getplanrecattr');
        $data    = $this->CheckPayload($payload);
        return $data;
    }

    /** Set Planned Video Recording Attribute
     *
     * @return false|string
     */
    public function SetPlannedVideoRecordingAttribute()
    {
        $planrec_enable = $this->ReadAttributeInteger('planrec_enable');
        $planrec_chn    = $this->ReadAttributeInteger('planrec_chn');
        $planrec_time   = $this->ReadAttributeInteger('planrec_time');
        $parameter      = '&-planrec_enable=' . $planrec_enable . '&-planrec_chn=' . $planrec_chn . '&-planrec_time=' . $planrec_time;
        $data           = $this->SendParameter('setplanrecattr' . $parameter);
        return $data;
    }

    /** Get Schedule for Manual Recording Task
     *
     * @return array
     */
    public function GetScheduleManualRecordingTask()
    {
        $payload = $this->SendParameter('getscheduleex&-ename=plan');
        $data    = $this->CheckPayload($payload, '_record');
        return $data;
    }

    /** Set Schedule for Manual Recording Task
     *
     * @return false|string
     */
    public function SetScheduleManualRecordingTask()
    {
        // $etm = $this->ReadAttributeInteger('etm_record');
        $week0 = $this->ReadAttributeString('week0_record');
        $week1 = $this->ReadAttributeString('week1_record');
        $week2 = $this->ReadAttributeString('week2_record');
        $week3 = $this->ReadAttributeString('week3_record');
        $week4 = $this->ReadAttributeString('week4_record');
        $week5 = $this->ReadAttributeString('week5_record');
        $week6 = $this->ReadAttributeString('week6_record');
        // http://admin:instar@192.168.178.88/param.cgi?cmd=setscheduleex&-ename=plan&-week0=PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP&-week1=PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP&-week2=PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP&-week3=PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP&-week4=PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP&-week5=PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP&-week6=PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP
        // $parameter = '&-volume=' . $volume . '&-volin_type=' . $volin_type . '&-aec=' . $aec . '&-denoise=' . $denoise;
        $parameter = '';
        $data      = $this->SendParameter('setscheduleex&-ename' . $parameter);
        return $data;
    }

    // System Menu

    // Overview Menu

    /** Get your Camera´s LAN MAC Address
     *
     * @return array
     */
    public function GetLAN_MACAddress()
    {
        $payload = $this->SendParameter('getlanmac');
        $data    = $this->CheckPayload($payload);
        return $data;
    }

    /** Get your Camera´s WiFi MAC Address
     *
     * @return array
     */
    public function GetWIFI_MACAddress()
    {
        $payload = $this->SendParameter('getwifimac');
        $data    = $this->CheckPayload($payload);
        return $data;
    }

    /** Get your Camera´s WAN IP Address
     *
     * @return array
     */
    public function GetWAN_IPAddress()
    {
        $payload = $this->SendParameter('getinternetip');
        $data    = $this->CheckPayload($payload);
        return $data;
    }

    // User Settings

    /** Get your Camera´s Network Configuration
     *
     * @return array
     */
    public function GetNetworkConfiguration()
    {
        $payload = $this->SendParameter('getuserattr');
        $data    = $this->CheckPayload($payload);
        return $data;
    }

    /** Set your Camera´s Network Configuration
     *
     * @return false|string
     */
    public function SetNetworkConfiguration(string $at_username0, string $at_password0, bool $at_enable1, string $at_username1, string $at_password1,
                                            bool $at_enable2, string $at_username2, string $at_password2)
    {
        $this->WriteAttributeInteger('at_enable1', intval($at_enable1));
        $this->WriteAttributeInteger('at_enable2', intval($at_enable2));
        $this->WriteAttributeString('at_username0', $at_username0);
        $this->WriteAttributeString('at_password0', $at_password0);
        $this->WriteAttributeString('at_username1', $at_username1);
        $this->WriteAttributeString('at_password1', $at_password1);
        $this->WriteAttributeString('at_username2', $at_username2);
        $this->WriteAttributeString('at_password2', $at_password2);
        $parameter = '&-at_username=admin&-at_newname=' . $at_username0 . '&-at_enable=1&-at_password=' . $at_password0
                     . '&cmd=setuserattr&-at_username=user&-at_newname=' . $at_username1 . '&-at_enable=' . intval($at_enable1) . '&-at_password='
                     . $at_password1 . '&cmd=setuserattr&-at_username=guest&-at_newname=' . $at_username2 . '&-at_enable=' . intval($at_enable2)
                     . '&-at_password=' . $at_password2;
        $data      = $this->SendParameter('setuserattr' . $parameter);
        return $data;
    }

    public function EnableUser(bool $at_enable1)
    {
        $this->WriteAttributeInteger('at_enable1', intval($at_enable1));


        $at_enable2 = boolval($this->ReadAttributeInteger('at_enable2'));
        $at_username0 = $this->ReadAttributeString('at_username0');
        $at_password0 = $this->ReadAttributeString('at_password0');
        $at_username1 = $this->ReadAttributeString('at_username1');
        $at_password1 = $this->ReadAttributeString('at_password1');
        $at_username2 = $this->ReadAttributeString('at_username2');
        $at_password2 = $this->ReadAttributeString('at_password2');
        $data = $this->SetNetworkConfiguration($at_username0, $at_password0, $at_enable1, $at_username1, $at_password1,
                                            $at_enable2, $at_username2, $at_password2);
        return $data;
    }

    public function EnableGuest(bool $at_enable2)
    {
        $this->WriteAttributeInteger('at_enable2', intval($at_enable2));
        $at_enable1 = boolval($this->ReadAttributeInteger('at_enable1'));
        $at_username0 = $this->ReadAttributeString('at_username0');
        $at_password0 = $this->ReadAttributeString('at_password0');
        $at_username1 = $this->ReadAttributeString('at_username1');
        $at_password1 = $this->ReadAttributeString('at_password1');
        $at_username2 = $this->ReadAttributeString('at_username2');
        $at_password2 = $this->ReadAttributeString('at_password2');
        $data = $this->SetNetworkConfiguration($at_username0, $at_password0, $at_enable1, $at_username1, $at_password1,
                                               $at_enable2, $at_username2, $at_password2);
        return $data;
    }

    // Date & Time Settings

    /** Get your Camera´s Time Configuration
     *
     * @return array
     */
    public function GetCameraTimeConfiguration()
    {
        $host     = $this->ReadPropertyString('Host');
        $user     = $this->ReadPropertyString('User');
        $password = $this->ReadPropertyString('Password');

        // check IP adress
        if (!filter_var($host, FILTER_VALIDATE_IP) === false) {
            //IP ok
            $ipcheck = true;
        } else {
            $ipcheck = false;
        }

        //Domain INSTAR prüfen
        if (!$this->is_valid_localdomain($host) === false) {
            //Domain ok
            $domaincheck = true;
        } else {
            $domaincheck = false;
        }

        if ($domaincheck === true || $ipcheck === true) {
            $hostcheck = true;
        } else {
            $hostcheck = false;
        }

        //User und Passwort prüfen
        if ($user !== '' && $password !== '' && $hostcheck === true) {
            $payload = $this->SendParameter('getservertime');
            $data    = $this->CheckPayload($payload, '_time');
        } else {
            $data = false;
        }
        return $data;
    }

    /** Set your Camera´s Time Configuration
     *
     * @return false|string
     */
    public function SetCameraTimeConfiguration()
    {
        // $etm = $this->ReadAttributeInteger('etm_time');
        $week0     = $this->ReadAttributeString('week0_time');
        $week1     = $this->ReadAttributeString('week1_time');
        $week2     = $this->ReadAttributeString('week2_time');
        $week3     = $this->ReadAttributeString('week3_time');
        $week4     = $this->ReadAttributeString('week4_time');
        $week5     = $this->ReadAttributeString('week5_time');
        $week6     = $this->ReadAttributeString('week6_time');
        $parameter = '&-week0=' . $week0 . '&-week1=' . $week1 . '&-week2=' . $week2 . '&-week3=' . $week3 . '&-week4=' . $week4 . '&-week5=' . $week5
                     . '&-week6=' . $week6;
        $data      = $this->SendParameter('setservertime' . $parameter);
        return $data;
    }

    /** Get your Camera´s Network Configuration
     *
     * @return array
     */
    public function GetCamerasNetworkConfiguration()
    {
        $payload = $this->SendParameter('getntpattr');
        $data    = $this->CheckPayload($payload, '_network');
        return $data;
    }

    /** Set your Camera´s Network Configuration
     *
     * @return false|string
     */
    public function SetCamerasNetworkConfiguration()
    {
        // $etm = $this->ReadAttributeInteger('etm_network');
        $week0     = $this->ReadAttributeString('week0_network');
        $week1     = $this->ReadAttributeString('week1_network');
        $week2     = $this->ReadAttributeString('week2_network');
        $week3     = $this->ReadAttributeString('week3_network');
        $week4     = $this->ReadAttributeString('week4_network');
        $week5     = $this->ReadAttributeString('week5_network');
        $week6     = $this->ReadAttributeString('week6_network');
        $parameter = '&-week0=' . $week0 . '&-week1=' . $week1 . '&-week2=' . $week2 . '&-week3=' . $week3 . '&-week4=' . $week4 . '&-week5=' . $week5
                     . '&-week6=' . $week6;
        $data      = $this->SendParameter('setntpattr' . $parameter);
        return $data;
    }

    // Language Settings

    /** Get your Camera´s UI Language Configuration
     *
     * @return array
     */
    public function GetCameraUI_LanguageConfiguration()
    {
        $payload = $this->SendParameter('get_instar_guest&-index=11');
        $data    = $this->CheckPayload($payload);
        return $data;
    }

    /** Set your Camera´s UI Language Configuration
     *
     * @return false|string
     */
    public function SetCameraUI_LanguageConfiguration($guest_value11)
    {
        $data = $this->SendParameter('set_instar_guest&-index=11&-value=' . $guest_value11);
        return $data;
    }

    // System Log

    /** Get your Camera´s System Log
     *
     * @return false|string
     */
    public function GetCameraSystemLog()
    {
        $this->SendDebug('INSTAR Send:', 'http://' . $this->GetHostURL() . '/tmpfs/syslog.txt', 0);
        $log     = @file_get_contents('http://' . $this->GetHostURL() . '/tmpfs/syslog.txt');
        if($log != false)
        {
            $MediaID = @$this->GetIDForIdent('system_log');
            if ($MediaID === false) {
                $this->SendDebug('System Log', 'Get system log', 0);
            } else {
                $this->SendDebug('System Log', 'Save system log', 0);
                $current_system_log = base64_decode(IPS_GetMediaContent($MediaID));
                $Content            = $current_system_log . $log;
                IPS_SetMediaContent($MediaID, base64_encode($Content));  // Base64 codieren und ablegen
                IPS_SendMediaEvent($MediaID); //aktualisieren
            }
        }
        return $log;
    }

    // Reboot

    /** Reboot your Camera
     *
     * @return false|string
     */
    public function RebootCamera()
    {
        $data = $this->SendParameter('sysreboot');
        return $data;
    }

    /** Get Camera Reboot Automatically
     *
     * @return array
     */
    public function GetCameraRebootAutomatically()
    {
        $payload = $this->SendParameter('getplancgi');
        $data    = $this->CheckPayload($payload);
        return $data;
    }

    /** Set your Camera to Reboot Automatically
     *
     * @return false|string
     */
    public function SetCameraRebootAutomatically()
    {
        $plancgi_enable_2 = $this->ReadAttributeInteger('plancgi_enable_2');
        $plancgi_time_2   = $this->ReadAttributeInteger('plancgi_time_2');
        $parameter        = '&-plancgi_enable_2=' . $plancgi_enable_2 . '&-plancgi_time_2=' . $plancgi_time_2;
        $data             = $this->SendParameter('setplancgi' . $parameter);
        return $data;
    }

    // Reset

    /** Reset your Camera
     *
     * @return false|string
     */
    public function ResetCamera()
    {
        $this->SendDebug('INSTAR Send:', 'http://' . $this->GetHostURL() . '/sysreset.cgi', 0);
        $data = @file_get_contents('http://' . $this->GetHostURL() . '/sysreset.cgi');
        return $data;
    }

    // Pan & Tilt

    /**
     * Moves continuously right.
     *
     * @return bool|string
     */
    public function Right()
    {
        $this->WriteValue('Control_Continuous', 3);
        $command = '-step=0&-act=right';
        $this->SendDebug('INSTAR:', 'right', 0);
        $state = $this->SendINSTARControlCommand($command);
        return $state;
    }

    /**
     * Moves continuously left.
     *
     * @return bool|string
     */
    public function Left()
    {
        $this->WriteValue('Control_Continuous', 0);
        $command = '-step=0&-act=left';
        $this->SendDebug('INSTAR:', 'left', 0);
        $state = $this->SendINSTARControlCommand($command);
        return $state;
    }

    /**
     * Moves continuously up.
     *
     * @return bool|string
     */
    public function Up()
    {
        $this->WriteValue('Control_Continuous', 1);
        $command = '-step=0&-act=up';
        $this->SendDebug('INSTAR:', 'up', 0);
        $state = $this->SendINSTARControlCommand($command);
        return $state;
    }

    /**
     * Moves continuously down.
     *
     * @return bool|string
     */
    public function Down()
    {
        $this->WriteValue('Control_Continuous', 2);
        $command = '-step=0&-act=down';
        $this->SendDebug('INSTAR:', 'down', 0);
        $state = $this->SendINSTARControlCommand($command);
        return $state;
    }

    /**
     * Stops moving camera-head.
     *
     * @return bool|string
     */
    public function Stop()
    {
        $this->WriteValue('Control_Continuous', 4);
        $command = '-step=0&-act=stop';
        $this->SendDebug('INSTAR:', 'stop', 0);
        $state = $this->SendINSTARControlCommand($command);
        return $state;
    }

    /**
     * Moves one Step right.
     *
     * @return bool|string
     */
    public function StepRight()
    {
        $this->WriteValue('Control_Step', 3);
        $command = '-step=1&-act=right';
        $this->SendDebug('INSTAR:', 'Step right', 0);
        $state = $this->SendINSTARControlCommand($command);
        return $state;
    }

    /**
     * Moves one Step left.
     *
     * @return bool|string
     */
    public function StepLeft()
    {
        $this->WriteValue('Control_Step', 0);
        $command = '-step=1&-act=left';
        $this->SendDebug('INSTAR:', 'Step left', 0);
        $state = $this->SendINSTARControlCommand($command);
        return $state;
    }

    /**
     * Moves one Step up.
     *
     * @return bool|string
     */
    public function StepUp()
    {
        $this->WriteValue('Control_Step', 1);
        $command = '-step=1&-act=up';
        $this->SendDebug('INSTAR:', 'Step up', 0);
        $state = $this->SendINSTARControlCommand($command);
        return $state;
    }

    /**
     * Moves one Step down.
     *
     * @return bool|string
     */
    public function StepDown()
    {
        $this->WriteValue('Control_Step', 2);
        $command = '-step=1&-act=down';
        $this->SendDebug('INSTAR:', 'Step down', 0);
        $state = $this->SendINSTARControlCommand($command);
        return $state;
    }

    /**
     * Go to Center Position.
     *
     * @return bool|string
     */
    public function GotoCenterPosition()
    {
        $this->WriteValue('Control_Scan', 0);
        $command = '-step=0&-act=home';
        $this->SendDebug('INSTAR:', 'goto center position', 0);
        $state = $this->SendINSTARControlCommand($command);
        return $state;
    }

    /**
     * Scan horizontal.
     *
     * @return bool|string
     */
    public function ScanHorizontal()
    {
        $this->WriteValue('Control_Scan', 1);
        $this->SendDebug('INSTAR:', 'Scan horizontal', 0);
        $model            = $this->ReadPropertyInteger('model_type');
        if($model == self::IN_9020_Full_HD || $model == self::IN_9010_Full_HD || $model == self::IN_9008_Full_HD)
        {
            $parameter = '&-act=goto&-number=88';
            $state = $this->SendParameter('preset' . $parameter);
        }
        else
        {
            $parameter = '&-step=0&-act=hscan';
            $state = $this->SendParameter('ptzctrl' . $parameter);
        }
        // $command = '-step=0&-act=hscan&-speed=45';
        return $state;
    }

    /**
     * Scan vertical.
     *
     * @return bool|string
     */
    public function ScanVertical()
    {
        $this->WriteValue('Control_Scan', 2);
        $this->SendDebug('INSTAR:', 'Scan vertical', 0);
        $parameter = '&-step=0&-act=vscan';
        $state = $this->SendParameter('ptzctrl' . $parameter);
        return $state;
    }

    /**
     * set a position.
     *
     * @return bool|string
     */
    public function SetPosition(int $position)
    {
        $this->WriteValue('SetPosition', $position);
        $this->SendDebug('INSTAR:', 'Set preset position ' . $position, 0);
        $parameter = '&-act=set&-status=1&-number=' . $position;
        $state     = $this->SendParameter('preset' . $parameter);
        return $state;
    }

    /** unset a position
     *
     * @param int $position
     *
     * @return false|string
     */
    public function UnsetPosition(int $position)
    {
        $this->WriteValue('UnsetPosition', $position);
        $this->SendDebug('INSTAR:', 'Unset preset position ' . $position, 0);
        $parameter = '&-act=set&-status=0&-number=' . $position;
        $state     = $this->SendParameter('preset' . $parameter);
        return $state;
    }

    /** goto to a Set preset position
     *
     * @param int $position
     *
     * @return false|string
     */
    public function GotoPosition(int $position)
    {
        $this->WriteValue('GotoPosition', $position);
        $this->SendDebug('INSTAR:', 'Goto position ' . $position, 0);
        $parameter = '&-act=goto&-status=1&-number=' . $position;
        $state     = $this->SendParameter('preset' . $parameter);
        return $state;
    }

    public function StartRecording(int $time)
    {
        $parameter = '&-act=on&-time=' . $time;
        $response  = $this->SendParameter('manualrec' . $parameter);
        $this->SendDebug('INSTAR:', 'Start Recording', 0);
        return $response;
    }

    protected function SendINSTARControlCommand($command)
    {
        $this->SendDebug('INSTAR Send:', 'http://' . $this->GetHostURL() . '/ptzctrl.cgi?' . $command, 0);
        $response = @file_get_contents('http://' . $this->GetHostURL() . '/ptzctrl.cgi?' . $command);
        $this->SendDebug('INSTAR Response', print_r($response, true), 0);
        return $response;
    }

    protected function SendParameter($command)
    {
        $this->SendDebug('INSTAR Send:', 'http://' . $this->GetHostURL() . '/param.cgi?cmd=' . $command, 0);
        $response = @file_get_contents('http://' . $this->GetHostURL() . '/param.cgi?cmd=' . $command);
        $this->SendDebug('INSTAR Response', print_r($response, true), 0);
        return $response;
    }

    /**
     * @return mixed|string
     */
    protected function GetINSTARType()
    {
        $INSTAR_type_nr = $this->ReadPropertyInteger('model');
        $type           = 'hi3510';
        $INSTAR_types   = [
            self::IN_5905_HD      => 'IN-5905 HD',
            self::IN_5907_HD      => 'IN-5907 HD',
            self::IN_7011_HD      => 'IN-7011 HD',
            self::IN_9008_Full_HD => 'IN-9008 Full HD',
            self::IN_9010_Full_HD => 'IN-9010 Full HD',
            self::IN_9020_Full_HD => 'IN-9020 Full HD',
            self::IN_3011         => 'IN-3011',
            self::IN_6001_HD      => 'IN-6001 HD',
            self::IN_6012_HD      => 'IN-6012 HD',
            self::IN_6014_HD      => 'IN-6014 HD',
            self::IN_8003_Full_HD => 'IN-8003 Full HD',
            self::IN_8015_Full_HD => 'IN-8015 Full HD',];
        foreach ($INSTAR_types as $key => $INSTAR_type) {
            if ($key == $INSTAR_type_nr) {
                $type = $INSTAR_type;
            }
        }
        return $type;
    }

    // WLAN

    /*
     * Reset the Parameter Values

http://192.168.xxx.xxx./cgi-bin/hi3510/param.cgi?cmd=setwirelessattr&-wf_ssid=SSID&-wf_enable=0&-wf_auth=2&-wf_key=1234&-wf_enc=1&-wf_mode=0
     */


    // ALARM

    /*
     *  http://admin:instar@192.168.xxx.xxx/cgi-bin/hi3510/param.cgi?cmd=setmdattr&-enable=1&-name=1 :: enables the md area 1

    http://admin:instar@192.168.xxx.xxx/cgi-bin/hi3510/param.cgi?cmd=setmdattr&-enable=0&-name=1 :: disables the md area 1

    http://192.168.x.x/cgi-bin/hi3510/param.cgi?cmd=setioattr&-io_enable=1&-io_flag=1 :: enable / disable external alarm in to trigger recording
Example:
http://admin:instar@192.168.xxx.xxx/cgi-bin/hi3510/param.cgi?cmd=setmdattr&-enable=0&-name=1&cmd=setmdattr&-enable=0&-name=2&cmd=setmdattr&-enable=0&-name=3&cmd=setmdattr&-enable=0&-name=4
     */

    protected function SetLastMovement()
    {
        $relaxationmotionsensor = $this->ReadPropertyInteger('relaxationmotionsensor');
        $last_write             = IPS_GetVariable($this->GetIDForIdent('LastMovement'))['VariableChanged'];
        $current_time           = time();
        if (($current_time - $last_write) > $relaxationmotionsensor) {
            $this->SendDebug('INSTAR:', 'motionsensor event', 0);
            $this->SetValue('LastMovement', date('d.m.y H:i:s'));
        }
    }

    private function CreateSnapshotScript()
    {
        $Script = '<?
//Do not delete or modify.
INSTAR_GetSnapshot(' . $this->InstanceID . ');		
?>';
        return $Script;
    }

    private function CreateEmailAlertScript($email)
    {
        $Script = '<?
//Do not delete or modify.
INSTAR_EmailAlert(' . $this->InstanceID . ', "' . $email . '");		
?>';
        return $Script;
    }

    private function SetSnapshotEvent(int $IDSnapshot)
    {
        //prüfen ob Event existent
        $ParentID = $IDSnapshot;

        $EreignisID = @($this->GetIDForIdent('EventGetINSTARSnapshot'));
        if ($EreignisID === false) {
            $EreignisID = IPS_CreateEvent(0);
            IPS_SetName($EreignisID, 'GetINSTARSnapshot');
            IPS_SetIdent($EreignisID, 'EventGetINSTARSnapshot');
            IPS_SetEventTrigger($EreignisID, 0, $this->GetIDForIdent('LastMovement'));   //bei Variablenaktualisierung
            IPS_SetParent($EreignisID, $ParentID);
            IPS_SetEventActive($EreignisID, true);             //Ereignis aktivieren
        } else {
            $this->SendDebug('INSTAR', 'Event für Snapshot mit ObjektID' . $EreignisID . ' gefunden', 0);
        }
    }

    private function SetEmailEvent(int $IDEmail, bool $state)
    {
        //prüfen ob Event existent
        $ParentID = $IDEmail;

        $EreignisID = @IPS_GetObjectIDByIdent('EventINSTAREmail', $ParentID);
        if ($EreignisID === false) {
            $EreignisID = IPS_CreateEvent(0);
            IPS_SetName($EreignisID, 'INSTAR Email Alert');
            IPS_SetIdent($EreignisID, 'EventINSTAREmail');
            IPS_SetEventTrigger($EreignisID, 0, $this->GetIDForIdent('notification_alarm'));   //bei Variablenaktualisierung
            IPS_SetParent($EreignisID, $ParentID);
            IPS_SetEventActive($EreignisID, $state);             //Ereignis aktivieren	/ deaktivieren
        } else {
            //echo 'Die Ereignis-ID lautet: '. $EreignisID;
            IPS_SetEventActive($EreignisID, $state);             //Ereignis aktivieren	/ deaktivieren
        }

    }

    public function EmailAlert(string $email)
    {
        $emailalert   = $this->ReadPropertyBoolean('activeemail');
        $emailalert2  = $this->ReadPropertyBoolean('activeemail2');
        $emailalert3  = $this->ReadPropertyBoolean('activeemail3');
        $emailalert4  = $this->ReadPropertyBoolean('activeemail4');
        $emailalert5  = $this->ReadPropertyBoolean('activeemail5');
        $emailalert6  = $this->ReadPropertyBoolean('activeemail6');
        $emailalert7  = $this->ReadPropertyBoolean('activeemail7');
        $emailalert8  = $this->ReadPropertyBoolean('activeemail8');
        $emailalert9  = $this->ReadPropertyBoolean('activeemail9');
        $emailalert10 = $this->ReadPropertyBoolean('activeemail10');
        $emailalert11 = $this->ReadPropertyBoolean('activeemail11');
        if ($emailalert) {
            if ($email != '') {
                $email = $this->ReadPropertyString('email');
            }
            $subject   = $this->ReadPropertyString('subject');
            $emailtext = $this->ReadPropertyString('emailtext');
            $this->SendSMTPEmail($email, $subject, $emailtext);
        } elseif ($emailalert2) {
            $email     = $this->ReadPropertyString('email2');
            $subject   = $this->ReadPropertyString('subject2');
            $emailtext = $this->ReadPropertyString('emailtext2');
            $this->SendSMTPEmail($email, $subject, $emailtext);
        } elseif ($emailalert3) {
            $email     = $this->ReadPropertyString('email3');
            $subject   = $this->ReadPropertyString('subject3');
            $emailtext = $this->ReadPropertyString('emailtext3');
            $this->SendSMTPEmail($email, $subject, $emailtext);
        } elseif ($emailalert4) {
            $email     = $this->ReadPropertyString('email4');
            $subject   = $this->ReadPropertyString('subject4');
            $emailtext = $this->ReadPropertyString('emailtext4');
            $this->SendSMTPEmail($email, $subject, $emailtext);
        } elseif ($emailalert5) {
            $email     = $this->ReadPropertyString('email5');
            $subject   = $this->ReadPropertyString('subject5');
            $emailtext = $this->ReadPropertyString('emailtext5');
            $this->SendSMTPEmail($email, $subject, $emailtext);
        } elseif ($emailalert6) {
            $email     = $this->ReadPropertyString('email6');
            $subject   = $this->ReadPropertyString('subject6');
            $emailtext = $this->ReadPropertyString('emailtext6');
            $this->SendSMTPEmail($email, $subject, $emailtext);
        } elseif ($emailalert7) {
            $email     = $this->ReadPropertyString('email7');
            $subject   = $this->ReadPropertyString('subject7');
            $emailtext = $this->ReadPropertyString('emailtext7');
            $this->SendSMTPEmail($email, $subject, $emailtext);
        } elseif ($emailalert8) {
            $email     = $this->ReadPropertyString('email8');
            $subject   = $this->ReadPropertyString('subject8');
            $emailtext = $this->ReadPropertyString('emailtext8');
            $this->SendSMTPEmail($email, $subject, $emailtext);
        } elseif ($emailalert9) {
            $email     = $this->ReadPropertyString('email9');
            $subject   = $this->ReadPropertyString('subject9');
            $emailtext = $this->ReadPropertyString('emailtext9');
            $this->SendSMTPEmail($email, $subject, $emailtext);
        } elseif ($emailalert10) {
            $email     = $this->ReadPropertyString('email10');
            $subject   = $this->ReadPropertyString('subject10');
            $emailtext = $this->ReadPropertyString('emailtext10');
            $this->SendSMTPEmail($email, $subject, $emailtext);
        } elseif ($emailalert11) {
            $email     = $this->ReadPropertyString('email11');
            $subject   = $this->ReadPropertyString('subject11');
            $emailtext = $this->ReadPropertyString('emailtext11');
            $this->SendSMTPEmail($email, $subject, $emailtext);
        }
    }

    protected function SendSMTPEmail($email, $subject, $emailtext)
    {
        $catid    = $this->ReadPropertyInteger('categoryhistory');
        $mediaids = IPS_GetChildrenIDs($catid);
        // $countmedia = count($mediaids);
        foreach ($mediaids as $key => $mediaid) {
            $mediainfo = IPS_GetMedia($mediaid);
            if ($mediainfo['MediaFile'] == 'media/instar_snapshot_1.jpg') {
                $mailer = $this->ReadPropertyInteger('smtpmodule');
                SMTP_SendMailMediaEx($mailer, $email, $subject, $emailtext, $mediaid);
            }
        }
    }

    public function GetHistory()
    {
        $name        = 'INSTAR Snapshot';
        $ident       = 'INSTARPic';
        $picturename = 'instar_snapshot_';
        for ($i = 1; $i <= 20; $i++) {

            $Content = '';

            //testen ob im Medienpool existent
            $catid = $this->ReadPropertyInteger('categorysnapshot');

            $MediaID = @IPS_GetObjectIDByIdent($ident . $i, $catid);
            if ($MediaID === false) {
                $MediaID = IPS_CreateMedia(1);                  // Image im MedienPool anlegen
                IPS_SetParent($MediaID, $catid); // Medienobjekt einsortieren unter der INSTAR Kategorie Historie
                IPS_SetIdent($MediaID, $ident . $i);
                IPS_SetPosition($MediaID, $i);
                IPS_SetMediaCached($MediaID, true);
                // Das Cachen für das Mediaobjekt wird aktiviert.
                // Beim ersten Zugriff wird dieses von der Festplatte ausgelesen
                // und zukünftig nur noch im Arbeitsspeicher verarbeitet.
                $ImageFile = IPS_GetKernelDir() . 'media' . DIRECTORY_SEPARATOR . $picturename . $i . '.jpg';  // Image-Datei
                IPS_SetMediaFile($MediaID, $ImageFile, false);    // Image im MedienPool mit Image-Datei verbinden
                IPS_SetName($MediaID, $name . ' ' . $i); // Medienobjekt benennen
                //IPS_SetInfo ($MediaID, $savetime);
                IPS_SetMediaContent($MediaID, base64_encode($Content));  //Bild Base64 codieren und ablegen
                IPS_SendMediaEvent($MediaID); //aktualisieren
            } else {
                IPS_SetMediaContent($MediaID, base64_encode($Content));  //Bild Base64 codieren und ablegen
                IPS_SendMediaEvent($MediaID); //aktualisieren
            }
            IPS_Sleep(200);
        }
    }

    public function SendINSTAR(string $URL)
    {
        $instaruser     = $this->ReadPropertyString('User');
        $instarpassword = $this->ReadPropertyString('Password');
        $INSTAR_URL     = $this->GetINSTARURL() . $URL;
        $this->SendDebug('INSTAR URL', $INSTAR_URL, 0);
        $ch = curl_init();
        curl_setopt($ch, CURLOPT_URL, $INSTAR_URL);
        curl_setopt($ch, CURLOPT_TIMEOUT, 30); //timeout after 30 seconds
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
        curl_setopt($ch, CURLOPT_HTTPAUTH, CURLAUTH_ANY);
        curl_setopt($ch, CURLOPT_USERPWD, "$instaruser:$instarpassword");
        $status_code = curl_getinfo($ch, CURLINFO_HTTP_CODE);   //get status code
        $this->SendDebug('INSTAR', 'Status Code ' . $status_code, 0);
        $result = curl_exec($ch);
        curl_close($ch);
        return $result;
    }

    public function GetSnapshot()
    {
        $name         = 'INSTAR Snapshot';
        $ident        = 'INSTARPic';
        $picturename  = 'instar_snapshot_';
        $picturelimit = $this->ReadPropertyInteger('picturelimitsnapshot');
        $catid        = $this->ReadPropertyInteger('categorysnapshot');
        $picture      = '';
        if ($catid > 0) {
            $picture = $this->GetImageCamera($name, $ident, $picturename, $picturelimit, $catid);
        } else {
            $this->SendDebug('INSTAR', 'No category is set, please set category.', 0);
            $this->LogMessage('Es wurde keine Kategorie gesetzt. Die Funktion wurde nicht ausgeführt.', KL_DEBUG);
        }
        return $picture;
    }

    private function GetImageCamera($name, $ident, $picturename, $picturelimit, $catid)
    {
        $snapshot_resolution = $this->ReadPropertyInteger('snapshot_resolution');
        if ($snapshot_resolution == self::RESOLUTION_SNAPSHOT_1080p) {
            $URL = self::GET_IMAGE_1080p;
        } elseif ($snapshot_resolution == self::RESOLUTION_SNAPSHOT_320p) {
            $URL = self::GET_IMAGE_320p;
        } elseif ($snapshot_resolution == self::RESOLUTION_SNAPSHOT_160p) {
            $URL = self::GET_IMAGE_160p;
        } else {
            $URL = self::GET_IMAGE_1080p;
        }
        // $Content = $this->SendINSTAR($URL);
        $Content = @file_get_contents('http://' . $this->GetHostURL() . $URL);
        //lastsnapshot bestimmen
        $mediaids     = IPS_GetChildrenIDs($catid);
        $countmedia   = count($mediaids);
        $lastsnapshot = $countmedia;
        if ($lastsnapshot == $picturelimit) {
            //neu beschreiben und Bilder um +1 neu zuordnen
            //Images base 64 codiert in allmedia einlesen

            $allmedia = $this->GetallImages($mediaids);
            if ($allmedia) {
                $lastmediaid = array_search($picturelimit, array_column($allmedia, 'picid'));
                unset($allmedia[$lastmediaid]);
                //Neues Bild zu allmedia hinzufügen
                $allmedia = $this->AddCurrentPic($allmedia, $mediaids, $Content);
                //allmedia schreiben
                $this->SaveImagestoPicSlot($allmedia, $ident, $name, $catid);
            } else {
                $this->SendDebug('INSTAR', 'No media image found', 0);
            }
        } else {
            // neues Mediaobjekt anlegen
            //testen ob im Medienpool existent
            $currentsnapshotid = $lastsnapshot + 1;
            $MediaID           = @IPS_GetObjectIDByIdent($ident . $currentsnapshotid, $catid);
            if ($MediaID === false) {
                $MediaID = IPS_CreateMedia(1);                  // Image im MedienPool anlegen
                IPS_SetParent($MediaID, $catid); // Medienobjekt einsortieren unter der INSTAR Kategorie
                IPS_SetIdent($MediaID, $ident . $currentsnapshotid);
                IPS_SetPosition($MediaID, $currentsnapshotid);
                IPS_SetMediaCached($MediaID, true);
                // Das Cachen für das Mediaobjekt wird aktiviert.
                // Beim ersten Zugriff wird dieses von der Festplatte ausgelesen
                // und zukünftig nur noch im Arbeitsspeicher verarbeitet.
                $ImageFile = IPS_GetKernelDir() . 'media' . DIRECTORY_SEPARATOR . $picturename . $currentsnapshotid . '.jpg';  // Image-Datei
                IPS_SetMediaFile($MediaID, $ImageFile, false);    // Image im MedienPool mit Image-Datei verbinden

                if ($currentsnapshotid == 1) {
                    //Auf Position 1 anlegen und beschreiben
                    $savetime = date('d.m.Y H:i:s');
                    IPS_SetName($MediaID, $name . ' ' . $currentsnapshotid . ' ' . $savetime); // Medienobjekt benennen
                    IPS_SetInfo($MediaID, $savetime);
                    IPS_SetMediaContent($MediaID, base64_encode($Content));  //Bild Base64 codieren und ablegen
                    IPS_SendMediaEvent($MediaID); //aktualisieren
                } else {
                    //Array auslesen und Bilder +1 neu zuordnen
                    //Images base 64 codiert in allmedia einlesen
                    $allmedia = $this->GetallImages($mediaids);
                    if ($allmedia) {
                        //Neues Bild zu allmedia hinzufügen
                        $allmedia = $this->AddCurrentPic($allmedia, $mediaids, $Content);
                        //allmedia schreiben
                        $this->SaveImagestoPicSlot($allmedia, $ident, $name, $catid);
                    } else {
                        $this->SendDebug('INSTAR', 'No media image found', 0);
                    }
                }

            }
        }
        return $Content;
    }

    private function GetallImages($mediaids)
    {
        $countmedia = count($mediaids);
        if ($countmedia > 0) {
            $allmedia = [];
            for ($i = 0; $i <= ($countmedia - 1); $i++) {
                $mediakey = IPS_GetObject($mediaids[$i])['ObjectIdent'];
                $mediakey = explode('Pic', $mediakey);
                $mediakey = intval($mediakey[1]);
                //$name = IPS_GetName($mediaids[$i]);
                //$name = explode(' ', $name);
                //$savedate = $name[3];
                //$savetime = $name[4];
                //$saveinfo =  $savedate.' '.$savetime;
                $saveinfo                    = IPS_GetObject($mediaids[$i])['ObjectInfo'];
                $allmedia[$i]['objid']       = $mediaids[$i];
                $allmedia[$i]['picid']       = $mediakey;
                $allmedia[$i]['saveinfo']    = $saveinfo;
                $allmedia[$i]['imagebase64'] = IPS_GetMediaContent($mediaids[$i]); //base64 codiert

            }
        } else {
            $allmedia = false;
        }

        return $allmedia;

    }

    private function SaveImagestoPicSlot($allmedia, $ident, $name, $catid)
    {

        foreach ($allmedia as $media) {
            $picid    = $media['picid'];
            $newpicid = $picid + 1;
            $mediaid  = @IPS_GetObjectIDByIdent($ident . $newpicid, $catid);
            if ($mediaid) {
                $saveinfo    = $media['saveinfo'];
                $imagebase64 = $media['imagebase64'];
                IPS_SetMediaContent($mediaid, $imagebase64);  //Bild Base64 codiert ablegen
                IPS_SetName($mediaid, $name . ' ' . $newpicid . ' ' . $saveinfo); // Medienobjekt benennen
                IPS_SetInfo($mediaid, $saveinfo);
                IPS_SendMediaEvent($mediaid); //aktualisieren
            } else {
                $this->SendDebug('INSTAR', 'No picture with ident ' . $ident . $newpicid . ' found', 0);
            }
        }
    }

    private function AddCurrentPic($allmedia, $mediaids, $Content)
    {
        $lastid = count($allmedia);

        // Neues Bild ergänzen
        $allmedia[$lastid]['objid']       = $mediaids[0];
        $allmedia[$lastid]['picid']       = 0;
        $saveinfo                         = date('d.m.Y H:i:s');
        $allmedia[$lastid]['saveinfo']    = $saveinfo;
        $allmedia[$lastid]['imagebase64'] = base64_encode($Content);  //Bild Base64 codieren und ablegen;
        return $allmedia;
    }

    public function CreateWeekplan()
    {
        $eid = IPS_CreateEvent(2);                  // Weekplan Event 2
        IPS_SetParent($eid, $this->InstanceID);         // set parent
        IPS_SetIcon($eid, "Camera");
        IPS_SetIdent($eid, "weekplan_position");
        IPS_SetInfo($eid, $this->Translate('INSTAR weekplan preset position'));
        IPS_SetName($eid, $this->Translate('Weekplan preset position'));
        IPS_SetEventScheduleAction(
            $eid, 0, $this->Translate('Position 1'), 0xFF00FF, implode(
                    "\n", [
                            '// Template ID: {FCE37F48-DA3F-45DD-AC77-71343792CC2D}',
                            '// Template Name: Auf Wert schalten',
                            '$ident = "GotoPosition";',
                            '$value = 1;',
                            '$target = $_IPS[\'TARGET\'];',
                            'if (IPS_InstanceExists($target)) {',
                            '  $target = IPS_GetObjectIDByIdent($ident, $target);',
                            '}',
                            'RequestAction($target, $value);']
                )
        );
        IPS_SetEventScheduleAction(
            $eid, 1, $this->Translate('Position 2'), 0x0000FF, implode(
                    "\n", [
                            '// Template ID: {FCE37F48-DA3F-45DD-AC77-71343792CC2D}',
                            '// Template Name: Auf Wert schalten',
                            '$ident = "GotoPosition";',
                            '$value = 2;',
                            '$target = $_IPS[\'TARGET\'];',
                            'if (IPS_InstanceExists($target)) {',
                            '  $target = IPS_GetObjectIDByIdent($ident, $target);',
                            '}',
                            'RequestAction($target, $value);']
                )
        );
        IPS_SetEventScheduleAction(
            $eid, 2, $this->Translate('Position 3'), 0x00FF00, implode(
                    "\n", [
                            '// Template ID: {FCE37F48-DA3F-45DD-AC77-71343792CC2D}',
                            '// Template Name: Auf Wert schalten',
                            '$ident = "GotoPosition";',
                            '$value = 3;',
                            '$target = $_IPS[\'TARGET\'];',
                            'if (IPS_InstanceExists($target)) {',
                            '  $target = IPS_GetObjectIDByIdent($ident, $target);',
                            '}',
                            'RequestAction($target, $value);']
                )
        );
        IPS_SetEventScheduleAction(
            $eid, 3, $this->Translate('Position 4'), 0xA88132, implode(
                    "\n", [
                            '// Template ID: {FCE37F48-DA3F-45DD-AC77-71343792CC2D}',
                            '// Template Name: Auf Wert schalten',
                            '$ident = "GotoPosition";',
                            '$value = 4;',
                            '$target = $_IPS[\'TARGET\'];',
                            'if (IPS_InstanceExists($target)) {',
                            '  $target = IPS_GetObjectIDByIdent($ident, $target);',
                            '}',
                            'RequestAction($target, $value);']
                )
        );
        IPS_SetEventScheduleAction(
            $eid, 4, $this->Translate('Position 5'), 0xFF0000, implode(
                    "\n", [
                            '// Template ID: {FCE37F48-DA3F-45DD-AC77-71343792CC2D}',
                            '// Template Name: Auf Wert schalten',
                            '$ident = "GotoPosition";',
                            '$value = 5;',
                            '$target = $_IPS[\'TARGET\'];',
                            'if (IPS_InstanceExists($target)) {',
                            '  $target = IPS_GetObjectIDByIdent($ident, $target);',
                            '}',
                            'RequestAction($target, $value);']
                )
        );
        IPS_SetEventScheduleAction(
            $eid, 5, $this->Translate('Position 6'), 0x323AA8, implode(
                    "\n", [
                            '// Template ID: {FCE37F48-DA3F-45DD-AC77-71343792CC2D}',
                            '// Template Name: Auf Wert schalten',
                            '$ident = "GotoPosition";',
                            '$value = 6;',
                            '$target = $_IPS[\'TARGET\'];',
                            'if (IPS_InstanceExists($target)) {',
                            '  $target = IPS_GetObjectIDByIdent($ident, $target);',
                            '}',
                            'RequestAction($target, $value);']
                )
        );
        IPS_SetEventScheduleAction(
            $eid, 6, $this->Translate('Position 7'), 0xEDED00, implode(
                    "\n", [
                            '// Template ID: {FCE37F48-DA3F-45DD-AC77-71343792CC2D}',
                            '// Template Name: Auf Wert schalten',
                            '$ident = "GotoPosition";',
                            '$value = 7;',
                            '$target = $_IPS[\'TARGET\'];',
                            'if (IPS_InstanceExists($target)) {',
                            '  $target = IPS_GetObjectIDByIdent($ident, $target);',
                            '}',
                            'RequestAction($target, $value);']
                )
        );
        IPS_SetEventScheduleAction(
            $eid, 7, $this->Translate('Position 8'), 0x00EDE9, implode(
                    "\n", [
                            '// Template ID: {FCE37F48-DA3F-45DD-AC77-71343792CC2D}',
                            '// Template Name: Auf Wert schalten',
                            '$ident = "GotoPosition";',
                            '$value = 8;',
                            '$target = $_IPS[\'TARGET\'];',
                            'if (IPS_InstanceExists($target)) {',
                            '  $target = IPS_GetObjectIDByIdent($ident, $target);',
                            '}',
                            'RequestAction($target, $value);']
                )
        );
        IPS_SetEventScheduleGroup($eid, 1, 127);
        IPS_SetEventScheduleGroupPoint($eid, 1, 0, 0, 0, 0, 0); //Um 0:00 Aktion mit ID 0 (Position 1) aufrufen
        IPS_SetEventActive($eid, false);             //Ereignis deaktivieren
        return $eid;
    }

    public function ReceiveData($JSONString)
    {
        $payload = json_decode($JSONString);
        // $this->SendDebug('INSTAR IO Data', $JSONString, 0);
        $data        = $payload->Buffer;
        $INSTAR_json = json_encode($data);
        $this->SendDebug('INSTAR Webhook', $INSTAR_json, 0);
        if (isset($data->objectid) && isset($data->value)) {
            $objectid = $data->objectid;
            $value    = $data->value;
            if ($objectid == $this->InstanceID) {
                if ($value == 1 || $value == '1' || $value == 'true') {
                    $this->SetValue('notification_alarm', 1);
                    $this->SetValue('LastMovement', $this->GetTimeStamp());
                } else {
                    $this->SetValue('notification_alarm', $value);
                    $this->SetValue('LastMovement', $this->GetTimeStamp());
                }
            }
        }
    }

    private function GetTimeStamp()
    {
        $time        = time();
        $string_time = date('d.m.Y H:i:s', $time);
        return $string_time;
    }

    public function RequestAction($Ident, $Value)
    {
        $this->SendDebug('INSTAR Request Action', 'Ident ' . $Ident . ', Value ' . print_r($Value, true), 0);
        switch ($Ident) {
            case 'Control_Continuous':
                if ($Value == 0) {
                    $this->Left();
                } elseif ($Value == 1) {
                    $this->Up();
                } elseif ($Value == 2) {
                    $this->Down();
                } elseif ($Value == 3) {
                    $this->Right();
                } elseif ($Value == 4) {
                    $this->Stop();
                }
                break;
            case 'Control_Step':
                if ($Value == 0) {
                    $this->StepLeft();
                } elseif ($Value == 1) {
                    $this->StepUp();
                } elseif ($Value == 2) {
                    $this->StepDown();
                } elseif ($Value == 3) {
                    $this->StepRight();
                }
                break;
            case 'Control_Scan':
                if ($Value == 0) {
                    $this->GotoCenterPosition();
                } elseif ($Value == 1) {
                    $this->ScanHorizontal();
                } elseif ($Value == 2) {
                    $this->ScanVertical();
                }
                break;
            case 'INSTARButtonSnapshot':
                $this->GetSnapshot();
                break;
            case 'SetPosition':
                $this->SetPosition($Value);
                break;
            case 'flip':
                if ($Value) {
                    $this->FlipPicture(true);
                } else {
                    $this->FlipPicture(false);
                }
                break;
            case 'mirror':
                if ($Value) {
                    $this->MirrorPicture(true);
                } else {
                    $this->MirrorPicture(false);
                }
                break;
            case 'hue':
                $this->Hue($Value);
                break;
            case 'saturation':
                $this->Saturation($Value);
                break;
            case 'brightness':
                $this->Brightness($Value);
                break;
            case 'contrast':
                $this->Contrast($Value);
                break;
            case 'sharpness':
                $this->Sharpness($Value);
                break;
            case 'targety':
                $this->EqualizeImage($Value);
                break;
            case 'scene':
                if ($Value == 0) {
                    $this->Scene('auto');
                } elseif ($Value == 1) {
                    $this->Scene('indoor');
                } elseif ($Value == 2) {
                    $this->Scene('outdoor');
                }
                break;
            case 'infraredstat':
                if ($Value == 0) {
                    $this->LED_Auto();
                } elseif ($Value == 1) {
                    $this->LED_On();
                } elseif ($Value == 2) {
                    $this->LED_Inactive();
                }
                break;
            case 'UnsetPosition':
                $this->UnsetPosition($Value);
                break;
            case 'GotoPosition':
                $this->GotoPosition($Value);
                break;
            case 'dhcpflag':
                $this->GotoPosition($Value);
                break;
            case 'dnsstat':
                $this->GotoPosition($Value);
                break;
            case 'fdnsip':
                $this->GotoPosition($Value);
                break;
            case 'sdnsip':
                $this->GotoPosition($Value);
                break;
            case 'wf_enable':
                $this->EnableWIFI($Value);
                break;
            case 'noise':
                // $this->EnableWIFI($Value);
                break;
            case 'gamma':
                $this->Gamma($Value);
                break;
            case 'th3ddnsstatus':
                // $this->EnableWIFI($Value);
                break;
            case 'facddnsstatus':
                // $this->EnableWIFI($Value);
                break;
            case 'httpport':
                $this->SetCameraHTTP_Port($Value);
                break;
            case 'httpsport':
                $this->SetCameraHTTPS_Port($Value);
                break;
            case 'rtspport':
                $this->SetCameraRTSP_Port($Value);
                break;
            case 'rtsp_aenable':
                $this->SetRTSPAuthenticationState($Value);
                break;
            case 'rtmpport':
                $this->SetCameraRTMP_Port($Value);
                break;
            case 'wf_ssid':
                $this->SetWiFiSSID($Value);
                break;
            case 'wf_auth':
                $this->SetWiFiAuth($Value);
                break;
            case 'm1_enable':
                $this->SetAlarmZone1($Value);
                break;
            case 'm2_enable':
                $this->SetAlarmZone2($Value);
                break;
            case 'm3_enable':
                $this->SetAlarmZone3($Value);
                break;
            case 'm4_enable':
                $this->SetAlarmZone4($Value);
                break;
            case 'm1_sensitivity':
                $this->SetAlarmZone1Senitivity($Value);
                break;
            case 'm2_sensitivity':
                $this->SetAlarmZone2Senitivity($Value);
                break;
            case 'm3_sensitivity':
                $this->SetAlarmZone3Senitivity($Value);
                break;
            case 'm4_sensitivity':
                $this->SetAlarmZone4Senitivity($Value);
                break;
            case 'm1_x':
                // $this->EnableWIFI($Value);
                break;
            case 'm2_x':
                // $this->EnableWIFI($Value);
                break;
            case 'm3_x':
                // $this->EnableWIFI($Value);
                break;
            case 'm4_x':
                // $this->EnableWIFI($Value);
                break;
            case 'm1_y':
                // $this->EnableWIFI($Value);
                break;
            case 'm2_y':
                // $this->EnableWIFI($Value);
                break;
            case 'm3_y':
                // $this->EnableWIFI($Value);
                break;
            case 'm4_y':
                // $this->EnableWIFI($Value);
                break;
            case 'm1_w':
                // $this->EnableWIFI($Value);
                break;
            case 'm2_w':
                // $this->EnableWIFI($Value);
                break;
            case 'm3_w':
                // $this->EnableWIFI($Value);
                break;
            case 'm4_w':
                // $this->EnableWIFI($Value);
                break;
            case 'm1_h':
                // $this->EnableWIFI($Value);
                break;
            case 'm2_h':
                // $this->EnableWIFI($Value);
                break;
            case 'm3_h':
                // $this->EnableWIFI($Value);
                break;
            case 'm4_h':
                // $this->EnableWIFI($Value);
                break;
            case 'wf_key':
                $this->SetWiFiKey($Value);
                break;
            case 'show_1':
                $this->SetPrivacyZone1($Value);
                break;
            case 'show_2':
                $this->SetPrivacyZone2($Value);
                break;
            case 'show_3':
                $this->SetPrivacyZone3($Value);
                break;
            case 'show_4':
                $this->SetPrivacyZone4($Value);
                break;
            case 'color_1':
                $this->SetPrivacyZone1Color($Value);
                break;
            case 'color_2':
                $this->SetPrivacyZone2Color($Value);
                break;
            case 'color_3':
                $this->SetPrivacyZone3Color($Value);
                break;
            case 'color_4':
                $this->SetPrivacyZone4Color($Value);
                break;
            case 'x_1':
                $this->SetSettingsPrivacyZone1X($Value);
                break;
            case 'x_2':
                $this->SetSettingsPrivacyZone2X($Value);
                break;
            case 'x_3':
                $this->SetSettingsPrivacyZone3X($Value);
                break;
            case 'x_4':
                $this->SetSettingsPrivacyZone4X($Value);
                break;
            case 'y_1':
                $this->SetSettingsPrivacyZone1Y($Value);
                break;
            case 'y_2':
                $this->SetSettingsPrivacyZone2Y($Value);
                break;
            case 'y_3':
                $this->SetSettingsPrivacyZone3Y($Value);
                break;
            case 'y_4':
                $this->SetSettingsPrivacyZone4Y($Value);
                break;
            case 'w_1':
                $this->SetSettingsPrivacyZone1Weight($Value);
                break;
            case 'w_2':
                $this->SetSettingsPrivacyZone2Weight($Value);
                break;
            case 'w_3':
                $this->SetSettingsPrivacyZone3Weight($Value);
                break;
            case 'w_4':
                $this->SetSettingsPrivacyZone4Weight($Value);
                break;
            case 'h_1':
                $this->SetSettingsPrivacyZone1Height($Value);
                break;
            case 'h_2':
                $this->SetSettingsPrivacyZone2Height($Value);
                break;
            case 'h_3':
                $this->SetSettingsPrivacyZone3Height($Value);
                break;
            case 'h_4':
                $this->SetSettingsPrivacyZone3Height($Value);
                break;
            case 'wf_enc':
                $this->SetWiFiEncode($Value);
                break;
            case 'wf_mode':
                $this->SetWiFiMode($Value);
                break;
            case 'our_enable':
                $this->EnabeINSTAR_DNS($Value);
                break;
            case 'd3th_enable':
                $this->Enabel3thDNS($Value);
                break;
            case 'd3th_service':
                $this->Set3rdPartyDDNSService($Value);
                break;
            case 'd3th_uname':
                $this->Set3rdPartyDDNSUsername($Value);
                break;
            case 'd3th_passwd':
                $this->Set3rdPartyDDNSPassword($Value);
                break;
            case 'd3th_domain':
                $this->Set3rdPartyDDNSDomain($Value);
                break;
            case 'upm_enable':
                $this->SetUPNPConfiguration($Value);
                break;
            case 'ov_enable':
                $this->EnableONVIF($Value);
                break;
            case 'ov_port':
                $this->SetONVIFPort($Value);
                break;
            case 'ov_authflag':
                $this->ONVIFAuth($Value);
                break;
            case 'ov_forbitset':
                $this->SetONVIFForbiset($Value);
                break;
            case 'ov_subchn':
                $this->SetONVIFSubchannel($Value);
                break;
            case 'ov_snapchn':
                $this->SetONVIFSubchannelSnapshot($Value);
                break;
            case 'volume':
                $this->SetVolume($Value);
                break;
            case 'volin_type':
                $this->SetVolumeInputType($Value);
                break;
            case 'ao_volume':
                $this->SetOutputVolume($Value);
                break;
            case 'aec':
                $this->SetAudioEncoder($Value);
                break;
            case 'denoise':
                $this->SetNoiseSurpression($Value);
                break;
            case 'aeswitch_1':
                // $this->EnableWIFI($Value);
                break;
            case 'aeswitch_2':
                // $this->EnableWIFI($Value);
                break;
            case 'aeswitch_3':
                // $this->EnableWIFI($Value);
                break;
            case 'chn':
                // $this->EnableWIFI($Value);
                break;
            case 'aeformat_1':
                $this->SetVolumeInputType($Value);
                break;
            case 'aeformat_2':
                $this->SetVolumeInputType($Value);
                break;
            case 'aeformat_3':
                $this->SetVolumeInputType($Value);
                break;
            case 'ft_server':
                $this->SetFTPServer($Value);
                break;
            case 'ft_port':
                $this->SetFTPPort($Value);
                break;
            case 'ft_username':
                $this->SetFTPUser($Value);
                break;
            case 'ft_password':
                $this->SetFTPPassword($Value);
                break;
            case 'ft_mode':
                $this->SetFTPMode($Value);
                break;
            case 'ft_dirname':
                $this->SetFTPDir($Value);
                break;
            case 'ft_autocreatedir':
                // $this->EnableWIFI($Value);
                break;
            case 'ft_dirmode':
                $this->SetFTPDirmode($Value);
                break;
            case 'ft_ssl':
                $this->SetFTPSSL($Value);
                break;
            case 'videomode':
                $this->SetVideoMode($Value);
                break;
            case 'vinorm':
                $this->SetVideonorm($Value);
                break;
            case 'wdrmode':
                $this->SetWDRMode($Value);
                break;
            case 'profile':
                $this->SetVideoProfile($Value);
                break;
            case 'maxchn':
                $this->SetMaxChn($Value);
                break;
            case 'wifimac':
                // $this->EnableWIFI($Value);
                break;
            case 'bps_1':
                // $this->EnableWIFI($Value);
                break;
            case 'bps_2':
                // $this->EnableWIFI($Value);
                break;
            case 'bps_3':
                // $this->EnableWIFI($Value);
                break;
            case 'fps_1':
                // $this->EnableWIFI($Value);
                break;
            case 'fps_2':
                // $this->EnableWIFI($Value);
                break;
            case 'fps_3':
                // $this->EnableWIFI($Value);
                break;
            case 'gop_1':
                // $this->EnableWIFI($Value);
                break;
            case 'gop_2':
                // $this->EnableWIFI($Value);
                break;
            case 'gop_3':
                // $this->EnableWIFI($Value);
                break;
            case 'brmode_1':
                // $this->EnableWIFI($Value);
                break;
            case 'brmode_2':
                // $this->EnableWIFI($Value);
                break;
            case 'brmode_3':
                // $this->EnableWIFI($Value);
                break;
            case 'imagegrade_1':
                // $this->EnableWIFI($Value);
                break;
            case 'imagegrade_2':
                // $this->EnableWIFI($Value);
                break;
            case 'imagegrade_3':
                // $this->EnableWIFI($Value);
                break;
            case 'wdrauto':
                $this->SetWDRAuto($Value);
                break;
            case 'wdrautval':
                $this->SetWDRAutval($Value);
                break;
            case 'wdrmanval':
                $this->SetWDRmanval($Value);
                break;
            case 'd3noauto':
                $this->SetD3noauto($Value);
                break;
            case 'd3noval':
                $this->SetD3noval($Value);
                break;
            case 'wdr':
                // $this->EnableWIFI($Value);
                break;
            case 'name_0_osd':
                $this->SetOSDParameter1($Value);
                break;
            case 'name_1_osd':
                $this->SetOSDParameter2($Value);
                break;
            case 'show_0_osd':
                $this->EnableOSD_Time($Value);
                break;
            case 'show_1_osd':
                $this->EnableOSD_Name($Value);
                break;
            case 'start_position_activate_action':
                $this->EnableStartPosition($Value);
                break;
            case 'start_position_select_action':
                $this->SetStartPosition($Value);
                break;
            case 'md_preset_switch':
                $this->EnableAlarmPosition($Value);
                break;
            case 'md_preset_switch_position':
                $this->SetAlarmPosition($Value);
                break;
            case 'timerpreset_enable':
                $this->EnableParkPosition($Value);
                break;
            case 'timerpreset_index':
                $this->SetParkPosition($Value);
                break;
            case 'tour_parkposition':
                $this->EnableTourParkPosition($Value);
                break;
            case 'admin_value46':
                $this->EnableStepbyStepControl($Value);
                break;
            case 'ptz_tour_time':
                $this->SetPTZTourTime($Value);
                $this->SetPTZTourTime($Value);
                $this->SetPTZTourTime($Value);
                break;
            case 'admin_value44':
                $this->SetFileLengthManualRecordings($Value);
                break;
            case 'pir_enable':
                $this->EnablePIR($Value);
                break;
            case 'alarm_detection':
                $this->AlarmDetection($Value);
                break;
            default:
                $this->SendDebug('INSTAR', 'Invalid ident', 0);
        }


    }

    //Profile

    /**
     * register profiles.
     *
     * @param $Name
     * @param $Icon
     * @param $Prefix
     * @param $Suffix
     * @param $MinValue
     * @param $MaxValue
     * @param $StepSize
     * @param $Digits
     * @param $Vartype
     */
    protected function RegisterProfile($Name, $Icon, $Prefix, $Suffix, $MinValue, $MaxValue, $StepSize, $Digits, $Vartype)
    {

        if (!IPS_VariableProfileExists($Name)) {
            IPS_CreateVariableProfile($Name, $Vartype); // 0 boolean, 1 int, 2 float, 3 string,
        } else {
            $profile = IPS_GetVariableProfile($Name);
            if ($profile['ProfileType'] != $Vartype) {
                $this->_debug('profile', 'Variable profile type does not match for profile ' . $Name);
            }
        }
        $profile = IPS_GetVariableProfile($Name);
        $profile_type =  $profile['ProfileType'];
        IPS_SetVariableProfileIcon($Name, $Icon);
        IPS_SetVariableProfileText($Name, $Prefix, $Suffix);
        if ($profile_type != VARIABLETYPE_STRING) {
            IPS_SetVariableProfileDigits($Name, $Digits); //  Nachkommastellen
            IPS_SetVariableProfileValues(
                $Name, $MinValue, $MaxValue, $StepSize
            ); // string $ProfilName, float $Minimalwert, float $Maximalwert, float $Schrittweite
        }
    }

    /**
     * register profile association.
     *
     * @param $Name
     * @param $Icon
     * @param $Prefix
     * @param $Suffix
     * @param $MinValue
     * @param $MaxValue
     * @param $Stepsize
     * @param $Digits
     * @param $Vartype
     * @param $Associations
     */
    protected function RegisterProfileAssociation($Name, $Icon, $Prefix, $Suffix, $MinValue, $MaxValue, $Stepsize, $Digits, $Vartype, $Associations)
    {
        if (is_array($Associations) && count($Associations) === 0) {
            $MinValue = 0;
            $MaxValue = 0;
        }
        $this->RegisterProfile($Name, $Icon, $Prefix, $Suffix, $MinValue, $MaxValue, $Stepsize, $Digits, $Vartype);

        if (is_array($Associations)) {
            foreach ($Associations as $Association) {
                IPS_SetVariableProfileAssociation($Name, $Association[0], $Association[1], $Association[2], $Association[3]);
            }
        } else {
            $Associations = $this->$Associations;
            foreach ($Associations as $code => $association) {
                IPS_SetVariableProfileAssociation($Name, $code, $this->Translate($association), $Icon, -1);
            }
        }

    }

    protected function GetIPSVersion()
    {
        $ipsversion = floatval(IPS_GetKernelVersion());
        if ($ipsversion < 4.1) // 4.0
        {
            $ipsversion = 0;
        } elseif ($ipsversion >= 4.1 && $ipsversion < 4.2) // 4.1
        {
            $ipsversion = 1;
        } elseif ($ipsversion >= 4.2 && $ipsversion < 4.3) // 4.2
        {
            $ipsversion = 2;
        } elseif ($ipsversion >= 4.3 && $ipsversion < 4.4) // 4.3
        {
            $ipsversion = 3;
        } elseif ($ipsversion >= 4.4 && $ipsversion < 5) // 4.4
        {
            $ipsversion = 4;
        } else   // 5
        {
            $ipsversion = 5;
        }

        return $ipsversion;
    }

    /***********************************************************
     * Configuration Form
     ***********************************************************/

    /**
     * build configuration form.
     *
     * @return string
     */
    public function GetConfigurationForm()
    {
        // return current form
        return json_encode(
            [
                'elements' => $this->FormHead(),
                'actions'  => $this->FormActions(),
                'status'   => $this->FormStatus()]
        );
    }

    /**
     * return form configurations on configuration step.
     *
     * @return array
     */
    protected function FormHead()
    {
        $host             = $this->ReadPropertyString('Host');
        $port             = $this->ReadPropertyInteger('Port');
        $user             = $this->ReadPropertyString('User');
        $password         = $this->ReadPropertyString('Password');
        if ($user == '' || $password == '') {
            $instar_login_credentials_menu_expanded = true;
        }
        else
        {
            $instar_login_credentials_menu_expanded = false;
        }

        //User und Passwort prüfen
        if ($host == '' || $port == '') {
            $instar_settings_menu_expanded = true;
        }
        else
        {
            $instar_settings_menu_expanded = false;
        }

        $categorysnapshot = $this->ReadPropertyInteger('categorysnapshot');
        if($categorysnapshot == 0)
        {
            $instar_picture_settings_menu_expanded = true;
        }
        else
        {
            $instar_picture_settings_menu_expanded = false;
        }


        $form = [
            [
                'type'  => 'Image',
                'image' => 'data:image/png;base64, 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'],
            [
                'type'  => 'RowLayout',
                'items' => $this->FormCameraSelection()]];
        $form = array_merge_recursive(
            $form, [
                     [
                         'type'     => 'ExpansionPanel',
                         'caption'  => 'INSTAR settings',
                         'name'     => 'instar_settings_menu',
                         'visible'  => true,
                         'expanded' => $instar_settings_menu_expanded,
                         'items'    => [
                             [
                                 'type'    => 'Label',
                                 'caption' => 'IP address or hostname'],
                             [
                                 'name'    => 'Host',
                                 'type'    => 'ValidationTextBox',
                                 'caption' => 'Camera IP address'],
                             [
                                 'type'    => 'Label',
                                 'caption' => 'Network port'],
                             [
                                 'name'    => 'Port',
                                 'type'    => 'NumberSpinner',
                                 'caption' => 'Camera port']]],
                     [
                         'type'     => 'ExpansionPanel',
                         'caption'  => 'INSTAR login credentials',
                         'name'     => 'instar_login_credentials_menu',
                         'visible'  => true,
                         'expanded' => $instar_login_credentials_menu_expanded,
                         'items'    => [
                             [
                                 'type'    => 'Label',
                                 'caption' => 'INSTAR user with admin authorization'],
                             [
                                 'name'    => 'User',
                                 'type'    => 'ValidationTextBox',
                                 'caption' => 'User'],
                             [
                                 'name'    => 'Password',
                                 'type'    => 'PasswordTextBox',
                                 'caption' => 'Password']]],
                     [
                         'type'     => 'ExpansionPanel',
                         'caption'  => 'Email notification settings (Symcon)',
                         'name'     => 'email_notification_settings_menu',
                         'visible'  => true,
                         'expanded' => false,
                         'items'    => $this->FormShowEmail()],
                     [
                         'type'     => 'ExpansionPanel',
                         'caption'  => 'Image settings',
                         'name'     => 'instar_picture_settings_menu',
                         'visible'  => true,
                         'expanded' => $instar_picture_settings_menu_expanded,
                         'items'    => [
                             [
                                 'type'    => 'Label',
                                 'caption' => 'Please first choose a snapshot category in the IP-Symcon object tree and select it in the field below'],
                             [
                                 'type'    => 'Label',
                                 'caption' => 'INSTAR snapshot category'],
                             [
                                 'name'    => 'categorysnapshot',
                                 'type'    => 'SelectCategory',
                                 'caption' => 'Alarm snapshots'],
                             [
                                 'type'    => 'Label',
                                 'caption' => 'Number of snapshots'],
                             [
                                 'name'    => 'picturelimitsnapshot',
                                 'type'    => 'NumberSpinner',
                                 'caption' => 'Number of alarm snapshots'],
                             [
                                 'type'  => 'Label',
                                 'label' => 'Cool-down for motionsensor (seconds)'],
                             [
                                 'name'    => 'relaxationmotionsensor',
                                 'type'    => 'NumberSpinner',
                                 'caption' => 'Cool-down (s)'],
                             [
                                 'type'    => 'Select',
                                 'name'    => 'snapshot_resolution',
                                 'caption' => 'Snapshot Resolution',
                                 'options' => [
                                     [
                                         'caption' => '1080 p',
                                         'value'   => self::RESOLUTION_SNAPSHOT_1080p],
                                     [
                                         'caption' => '320 p',
                                         'value'   => self::RESOLUTION_SNAPSHOT_320p],
                                     [
                                         'caption' => '160 p',
                                         'value'   => self::RESOLUTION_SNAPSHOT_160p]]

                             ],
                             [
                                 'type'  => 'Label',
                                 'label' => 'Select Channel for MJPEG Stream'],
                             [
                                 'type'    => 'Select',
                                 'name'    => 'MJPEG_Stream',
                                 'caption' => 'MJPEG Stream Channel',
                                 'options' => [
                                     [
                                         'caption' => '1080p (FullHD) Channel 11',
                                         'value'   => 11],
                                     [
                                         'caption' => '320p (VGA) Channel 12',
                                         'value'   => 12],
                                     [
                                         'caption' => '160p (QVGA) Channel 13',
                                         'value'   => 13]]

                             ],]],
                     [
                         'type'     => 'ExpansionPanel',
                         'caption'  => 'Push Notifications',
                         'name'     => 'instar_push_notifications_menu',
                         'visible'  => true,
                         'expanded' => false,
                         'items'    => [
                             [
                                 'type'  => 'Label',
                                 'label' => 'Push Notifications'],
                             [
                                 'name'    => 'notification_instance',
                                 'type'    => 'SelectInstance',
                                 'caption' => 'Webfront Configurator'],
                             [
                                 'type'     => 'List',
                                 'name'     => 'notifications',
                                 'caption'  => 'Push Notifications',
                                 'rowCount' => count($this->push_notifications),
                                 'add'      => false,
                                 'delete'   => false,
                                 'sort'     => [
                                     'column'    => 'name',
                                     'direction' => 'ascending'],
                                 'columns'  => [
                                     [
                                         'name'  => 'enabled',
                                         'label' => 'Enabled',
                                         'width' => '100px',
                                         'edit'  => [
                                             'type'    => 'CheckBox',
                                             'caption' => 'Enable Push Notification']],
                                     [
                                         'name'  => 'name',
                                         'label' => 'Notification',
                                         'width' => 'auto',
                                         'save'  => true],
                                     [
                                         'name'  => 'sound',
                                         'label' => 'Notification Sound',
                                         'width' => '170px',
                                         'edit'  => [
                                             'type'    => 'Select',
                                             'options' => [
                                                 [
                                                     'label' => 'default',
                                                     'value' => ''],
                                                 [
                                                     'label' => 'alarm',
                                                     'value' => 'alarm'],
                                                 [
                                                     'label' => 'bell',
                                                     'value' => 'bell'],
                                                 [
                                                     'label' => 'boom',
                                                     'value' => 'boom'],
                                                 [
                                                     'label' => 'buzzer',
                                                     'value' => 'buzzer'],
                                                 [
                                                     'label' => 'connected',
                                                     'value' => 'connected'],
                                                 [
                                                     'label' => 'dark',
                                                     'value' => 'dark'],
                                                 [
                                                     'label' => 'digital',
                                                     'value' => 'digital'],
                                                 [
                                                     'label' => 'drums',
                                                     'value' => 'drums'],
                                                 [
                                                     'label' => 'duck',
                                                     'value' => 'duck'],
                                                 [
                                                     'label' => 'full',
                                                     'value' => 'full'],
                                                 [
                                                     'label' => 'happy',
                                                     'value' => 'happy'],
                                                 [
                                                     'label' => 'horn',
                                                     'value' => 'horn'],
                                                 [
                                                     'label' => 'inception',
                                                     'value' => 'inception'],
                                                 [
                                                     'label' => 'kazoo',
                                                     'value' => 'kazoo'],
                                                 [
                                                     'label' => 'roll',
                                                     'value' => 'roll'],
                                                 [
                                                     'label' => 'siren',
                                                     'value' => 'siren'],
                                                 [
                                                     'label' => 'space',
                                                     'value' => 'space'],
                                                 [
                                                     'label' => 'trickling',
                                                     'value' => 'trickling'],
                                                 [
                                                     'label' => 'turn',
                                                     'value' => 'turn']]]],
                                     [
                                         'name'    => 'state_id',
                                         'label'   => 'State ID',
                                         'width'   => 'auto',
                                         'save'    => true,
                                         'visible' => false]]]]],
                     [
                         'type'     => 'ExpansionPanel',
                         'caption'  => 'event dependent camera control',
                         'name'     => 'event_dependent_camera_control_menu',
                         'visible'  => false,
                         'expanded' => false,
                         'items'    => [
                             [
                                 'type'    => 'Label',
                                 'caption' => 'Change night vision dependent of sunrise and sunset'],
                             [
                                 'name'    => 'time_dependent_nightvision',
                                 'type'    => 'CheckBox',
                                 'caption' => 'time dependent nightvision'],
                             [
                                 'type'  => 'Label',
                                 'label' => 'Select sunrise event'],
                             [
                                 'type'    => 'Select',
                                 'name'    => 'nightvision_sunrise_event',
                                 'caption' => 'nightvision sunrise event',
                                 'options' => [
                                     [
                                         'caption' => '1080p (FullHD) Channel 11',
                                         'value'   => 11],
                                     [
                                         'caption' => '320p (VGA) Channel 12',
                                         'value'   => 12],
                                     [
                                         'caption' => '160p (QVGA) Channel 13',
                                         'value'   => 13]]

                             ],
                             [
                                 'type'  => 'Label',
                                 'label' => 'Select sunset event'],
                             [
                                 'type'    => 'Select',
                                 'name'    => 'nightvision_sunset_event',
                                 'caption' => 'nightvision sunset event',
                                 'options' => [
                                     [
                                         'caption' => '1080p (FullHD) Channel 11',
                                         'value'   => 11],
                                     [
                                         'caption' => '320p (VGA) Channel 12',
                                         'value'   => 12],
                                     [
                                         'caption' => '160p (QVGA) Channel 13',
                                         'value'   => 13]]

                             ],]]]
        );
        return $form;
    }


    private function FormNetworkInfo()
    {
        $dhcpflag = $this->ReadAttributeString('dhcpflag');
        if ($dhcpflag == 'on') {
            $dhcpflag = true;
        } elseif ($dhcpflag == 'off') {
            $dhcpflag = false;
        }
        $form = [];
        $ip   = $this->ReadAttributeString('ip');
        if ($ip != '') {
            $form = array_merge_recursive(
                $form, [
                         [
                             'type'  => 'RowLayout',
                             'items' => [
                                 [
                                     'type'    => 'ValidationTextBox',
                                     'name'    => 'ip',
                                     'caption' => 'IP address',
                                     'visible' => true,
                                     'value'   => $this->ReadAttributeString('ip'),
                                     'onClick' => 'INSTAR_SetWebFrontVariable($id, $name, $value);'],
                                 [
                                     'name'     => 'ip_enabled',
                                     'type'     => 'CheckBox',
                                     'caption'  => 'Create Variable for Webfront',
                                     'value'    => $this->ReadAttributeBoolean('ip_enabled'),
                                     'onChange' => 'INSTAR_SetWebFrontVariable($id, "ip_enabled", $ip_enabled);'],]],
                         [
                             'type'  => 'RowLayout',
                             'items' => [
                                 [
                                     'type'    => 'ValidationTextBox',
                                     'name'    => 'netmask',
                                     'caption' => 'Subnetmask',
                                     'visible' => true,
                                     'value'   => $this->ReadAttributeString('netmask'),
                                     'onClick' => 'INSTAR_SetWebFrontVariable($id, $name, $value);'],
                                 [
                                     'name'     => 'netmask_enabled',
                                     'type'     => 'CheckBox',
                                     'caption'  => 'Create Variable for Webfront',
                                     'value'    => $this->ReadAttributeBoolean('netmask_enabled'),
                                     'onChange' => 'INSTAR_SetWebFrontVariable($id, "netmask_enabled", $netmask_enabled);'],]],
                         [
                             'type'  => 'RowLayout',
                             'items' => [
                                 [
                                     'type'    => 'ValidationTextBox',
                                     'name'    => 'gateway',
                                     'caption' => 'Gateway',
                                     'visible' => true,
                                     'value'   => $this->ReadAttributeString('gateway'),
                                     'onClick' => 'INSTAR_SetWebFrontVariable($id, $name, $value);'],
                                 [
                                     'name'     => 'gateway_enabled',
                                     'type'     => 'CheckBox',
                                     'caption'  => 'Create Variable for Webfront',
                                     'value'    => $this->ReadAttributeBoolean('gateway_enabled'),
                                     'onChange' => 'INSTAR_SetWebFrontVariable($id, "gateway_enabled", $gateway_enabled);'],]],
                         [
                             'type'  => 'RowLayout',
                             'items' => [
                                 [
                                     'type'    => 'ValidationTextBox',
                                     'name'    => 'fdnsip',
                                     'caption' => 'DNS Server',
                                     'visible' => true,
                                     'value'   => $this->ReadAttributeString('fdnsip'),
                                     'onClick' => 'INSTAR_SetWebFrontVariable($id, $name, $value);'],
                                 [
                                     'name'     => 'fdnsip_enabled',
                                     'type'     => 'CheckBox',
                                     'caption'  => 'Create Variable for Webfront',
                                     'value'    => $this->ReadAttributeBoolean('fdnsip_enabled'),
                                     'onChange' => 'INSTAR_SetWebFrontVariable($id, "fdnsip_enabled", $fdnsip_enabled);'],]],
                         [
                             'type'  => 'RowLayout',
                             'items' => [
                                 [
                                     'type'    => 'NumberSpinner',
                                     'name'    => 'httpport',
                                     'caption' => 'HTTP Port',
                                     'visible' => true,
                                     'value'   => $this->ReadAttributeInteger('httpport'),
                                     'onClick' => 'INSTAR_SetWebFrontVariable($id, $name, $value);'],
                                 [
                                     'name'     => 'httpport_enabled',
                                     'type'     => 'CheckBox',
                                     'caption'  => 'Create Variable for Webfront',
                                     'value'    => $this->ReadAttributeBoolean('httpport_enabled'),
                                     'onChange' => 'INSTAR_SetWebFrontVariable($id, "httpport_enabled", $httpport_enabled);'],]],
                         [
                             'type'  => 'RowLayout',
                             'items' => [
                                 [
                                     'type'    => 'NumberSpinner',
                                     'name'    => 'httpsport',
                                     'caption' => 'HTTPS Port',
                                     'visible' => true,
                                     'value'   => $this->ReadAttributeInteger('httpsport'),
                                     'onClick' => 'INSTAR_SetWebFrontVariable($id, $name, $value);'],
                                 [
                                     'name'     => 'httpsport_enabled',
                                     'type'     => 'CheckBox',
                                     'caption'  => 'Create Variable for Webfront',
                                     'value'    => $this->ReadAttributeBoolean('httpsport_enabled'),
                                     'onChange' => 'INSTAR_SetWebFrontVariable($id, "httpsport_enabled", $httpsport_enabled);'],]],
                         [
                             'type'  => 'RowLayout',
                             'items' => [
                                 [
                                     'type'    => 'NumberSpinner',
                                     'name'    => 'rtmpport',
                                     'caption' => 'RTMP Port for Flash Plugin',
                                     'visible' => true,
                                     'value'   => $this->ReadAttributeInteger('rtmpport'),
                                     'onClick' => 'INSTAR_SetWebFrontVariable($id, $name, $value);'],
                                 [
                                     'name'     => 'rtmpport_enabled',
                                     'type'     => 'CheckBox',
                                     'caption'  => 'Create Variable for Webfront',
                                     'value'    => $this->ReadAttributeBoolean('rtmpport_enabled'),
                                     'onChange' => 'INSTAR_SetWebFrontVariable($id, "rtmpport_enabled", $rtmpport_enabled);'],]],
                         [
                             'type'  => 'RowLayout',
                             'items' => [
                                 [
                                     'type'    => 'CheckBox',
                                     'name'    => 'rtsp_aenable',
                                     'caption' => 'RTSP Authentication',
                                     'visible' => true,
                                     'value'   => boolval($this->ReadAttributeInteger('rtsp_aenable')),
                                     'onClick' => 'INSTAR_SetRTSPAuthenticationState($id, $value)'],
                                 [
                                     'name'     => 'rtsp_aenable_enabled',
                                     'type'     => 'CheckBox',
                                     'caption'  => 'Create Variable for Webfront',
                                     'value'    => $this->ReadAttributeBoolean('rtsp_aenable_enabled'),
                                     'onChange' => 'INSTAR_SetWebFrontVariable($id, "rtsp_aenable_enabled", $rtsp_aenable_enabled);'],]],
                         [
                             'type'  => 'RowLayout',
                             'items' => [
                                 [
                                     'type'    => 'NumberSpinner',
                                     'name'    => 'rtspport',
                                     'caption' => 'RTSP',
                                     'visible' => true,
                                     'value'   => $this->ReadAttributeInteger('rtspport'),
                                     'onClick' => 'INSTAR_SetWebFrontVariable($id, $name, $value);'],
                                 [
                                     'name'     => 'rtspport_enabled',
                                     'type'     => 'CheckBox',
                                     'caption'  => 'Create Variable for Webfront',
                                     'value'    => $this->ReadAttributeBoolean('rtspport_enabled'),
                                     'onChange' => 'INSTAR_SetWebFrontVariable($id, "rtspport_enabled", $rtspport_enabled);'],]],
                         [
                             'type'    => 'Label',
                             'caption' => 'Set Network infos for the camera'],
                         [
                             'type'    => 'Button',
                             'caption' => 'Set network infos',
                             'onClick' => 'INSTAR_SetNetworkParameters($id, $ip, $netmask, $gateway, $fdnsip, $httpport, $httpsport, $rtmpport, $rtsp_aenable, $rtspport);']]
            /*
            [
                'type'  => 'RowLayout',
                'items' => [
                    [
                        'type'    => 'CheckBox',
                        'name'    => 'dhcpflag',
                        'caption' => 'DHCP',
                        'visible' => true,
                        'value'   => $dhcpflag,
                        'onClick' => 'INSTAR_SetWebFrontVariable($id, $name, $value);'],
                    [
                        'name'    => 'dhcpflag_enabled',
                        'type'    => 'CheckBox',
                        'caption' => 'Create Variable for Webfront',
                        'value'   => $this->ReadAttributeBoolean('dhcpflag_enabled'),
                        'onClick' => 'INSTAR_SetWebFrontVariable($id, $name, $value);'],]],

            [
                'type'  => 'RowLayout',
                'items' => [
                    [
                        'type'    => 'ValidationTextBox',
                        'name'    => 'macaddress',
                        'caption' => 'MAC address',
                        'visible' => true,
                        'value'   => $this->ReadAttributeString('macaddress'),
                        'onClick' => 'INSTAR_SetWebFrontVariable($id, $name, $value);'],
                    [
                        'name'    => 'macaddress_enabled',
                        'type'    => 'CheckBox',
                        'caption' => 'Create Variable for Webfront',
                        'value'   => $this->ReadAttributeBoolean('macaddress_enabled'),
                        'onClick' => 'INSTAR_SetWebFrontVariable($id, $name, $value);'],]],
            [
                'type'  => 'RowLayout',
                'items' => [
                    [
                        'type'    => 'ValidationTextBox',
                        'name'    => 'networktype',
                        'caption' => 'Network Type',
                        'visible' => true,
                        'value'   => $this->ReadAttributeString('networktype'),
                        'onClick' => 'INSTAR_SetWebFrontVariable($id, $name, $value);'],
                    [
                        'name'    => 'networktype_enabled',
                        'type'    => 'CheckBox',
                        'caption' => 'Create Variable for Webfront',
                        'value'   => $this->ReadAttributeBoolean('networktype_enabled'),
                        'onClick' => 'INSTAR_SetWebFrontVariable($id, $name, $value);'],]],]*/
            );
        }
        /*
        $form = array_merge_recursive(
            $form, [
                     [
                         'type'    => 'Label',
                         'caption' => 'Get network info from the camera'],
                     [
                         'type'    => 'Button',
                         'caption' => 'Get network info',
                         'onClick' => 'INSTAR_GetNetInfo($id);']]
        );
        */
        return $form;
    }

    private function FormSSLInfo()
    {
        $form       = [];
        $our_server = $this->ReadAttributeString('our_server');
        if ($our_server != '') {
            $form = array_merge_recursive(
                $form, [
                         [
                             'type'  => 'RowLayout',
                             'items' => [
                                 [
                                     'type'    => 'ValidationTextBox',
                                     'name'    => 'our_server',
                                     'caption' => 'INSTAR DDNS Server Domain',
                                     'visible' => true,
                                     'value'   => $this->ReadAttributeString('our_server'),
                                     'enabled' => false,
                                     'onClick' => 'INSTAR_SetWebFrontVariable($id, $name, $value);'],
                                 [
                                     'name'     => 'our_server_enabled',
                                     'type'     => 'CheckBox',
                                     'caption'  => 'Create Variable for Webfront',
                                     'value'    => $this->ReadAttributeBoolean('our_server_enabled'),
                                     'onChange' => 'INSTAR_SetWebFrontVariable($id, "our_server_enabled", $our_server_enabled);'],]]]
            /*
             [
                 'type'  => 'RowLayout',
                 'items' => [
                     [
                         'type'    => 'ValidationTextBox',
                         'name'    => 'wf_key',
                         'caption' => 'issued by',
                         'visible' => true,
                         'value'   => $this->ReadAttributeString('wf_key'),
                         'onClick' => 'INSTAR_SetWebFrontVariable($id, $name, $value);'],
                     [
                         'name'    => 'wf_key_enabled',
                         'type'    => 'CheckBox',
                         'caption' => 'Create Variable for Webfront',
                         'value'   => $this->ReadAttributeBoolean('wf_key_enabled'),
                         'onClick' => 'INSTAR_SetWebFrontVariable($id, $name, $value);'],]]]
            */
            );
        }
        return $form;
    }


    private function FormWIFIInfo()
    {
        // TODO Add search WLAN
        $form    = [];
        $wf_ssid = $this->ReadAttributeString('wf_ssid');
        if ($wf_ssid != '') {
            $form = array_merge_recursive(
                $form, [
                         [
                             'type'  => 'RowLayout',
                             'items' => [
                                 [
                                     'type'    => 'CheckBox',
                                     'name'    => 'wf_enable',
                                     'caption' => 'WLAN Enabled',
                                     'visible' => true,
                                     'value'   => boolval($this->ReadAttributeInteger('wf_enable')),
                                     'onClick' => 'INSTAR_EnableWIFI($id, $wf_enable);'],
                                 [
                                     'name'     => 'wf_enable_enabled',
                                     'type'     => 'CheckBox',
                                     'caption'  => 'Create Variable for Webfront',
                                     'value'    => $this->ReadAttributeBoolean('wf_enable_enabled'),
                                     'onChange' => 'INSTAR_SetWebFrontVariable($id, "wf_enable_enabled", $wf_enable_enabled);'],]],
                         [
                             'type'  => 'RowLayout',
                             'items' => [
                                 [
                                     'type'     => 'ValidationTextBox',
                                     'name'     => 'wf_ssid',
                                     'caption'  => 'SSID',
                                     'visible'  => true,
                                     'value'    => $this->ReadAttributeString('wf_ssid'),
                                     'onChange' => 'INSTAR_SetWifiParameters($id, $wf_enable, $wf_ssid, $wf_auth, $wf_key, $wf_enc, $wf_mode);'],
                                 [
                                     'name'     => 'wf_ssid_enabled',
                                     'type'     => 'CheckBox',
                                     'caption'  => 'Create Variable for Webfront',
                                     'value'    => $this->ReadAttributeBoolean('wf_ssid_enabled'),
                                     'onChange' => 'INSTAR_SetWebFrontVariable($id, "wf_ssid_enabled", $wf_ssid_enabled);'],]],
                         [
                             'type'  => 'RowLayout',
                             'items' => [
                                 [
                                     'type'     => 'Select',
                                     'name'     => 'wf_mode',
                                     'caption'  => 'Networktype',
                                     'options'  => [
                                         [
                                             'caption' => 'infrastructure',
                                             'value'   => 0],
                                         [
                                             'caption' => 'ad-hoc',
                                             'value'   => 1]],
                                     'visible'  => true,
                                     'value'    => $this->ReadAttributeInteger('wf_mode'),
                                     'onChange' => 'INSTAR_SetWifiParameters($id, $wf_enable, $wf_ssid, $wf_auth, $wf_key, $wf_enc, $wf_mode);'],
                                 [
                                     'name'     => 'wf_mode_enabled',
                                     'type'     => 'CheckBox',
                                     'caption'  => 'Create Variable for Webfront',
                                     'value'    => $this->ReadAttributeBoolean('wf_mode_enabled'),
                                     'onChange' => 'INSTAR_SetWebFrontVariable($id, "wf_mode_enabled", $wf_mode_enabled);'],]],
                         [
                             'type'  => 'RowLayout',
                             'items' => [
                                 [
                                     'type'     => 'Select',
                                     'name'     => 'wf_auth',
                                     'caption'  => 'Encryption',
                                     'options'  => [
                                         [
                                             'caption' => 'no encryption',
                                             'value'   => 0],
                                         [
                                             'caption' => 'WEP',
                                             'value'   => 1],
                                         [
                                             'caption' => 'WPA-PSK',
                                             'value'   => 2],
                                         [
                                             'caption' => 'WPA2-PSK',
                                             'value'   => 3]],
                                     'visible'  => true,
                                     'value'    => $this->ReadAttributeInteger('wf_auth'),
                                     'onChange' => 'INSTAR_SetWifiParameters($id, $wf_enable, $wf_ssid, $wf_auth, $wf_key, $wf_enc, $wf_mode);'],
                                 [
                                     'name'     => 'wf_auth_enabled',
                                     'type'     => 'CheckBox',
                                     'caption'  => 'Create Variable for Webfront',
                                     'value'    => $this->ReadAttributeBoolean('wf_auth_enabled'),
                                     'onChange' => 'INSTAR_SetWebFrontVariable($id, "wf_auth_enabled", $wf_auth_enabled);'],]],
                         [
                             'type'  => 'RowLayout',
                             'items' => [
                                 [
                                     'type'     => 'Select',
                                     'name'     => 'wf_enc',
                                     'caption'  => 'Type',
                                     'options'  => [
                                         [
                                             'caption' => 'TKIP',
                                             'value'   => 0],
                                         [
                                             'caption' => 'AES',
                                             'value'   => 1]],
                                     'visible'  => true,
                                     'value'    => $this->ReadAttributeInteger('wf_enc'),
                                     'onChange' => 'INSTAR_SetWifiParameters($id, $wf_enable, $wf_ssid, $wf_auth, $wf_key, $wf_enc, $wf_mode);'],
                                 [
                                     'name'     => 'wf_enc_enabled',
                                     'type'     => 'CheckBox',
                                     'caption'  => 'Create Variable for Webfront',
                                     'value'    => $this->ReadAttributeBoolean('wf_enc_enabled'),
                                     'onChange' => 'INSTAR_SetWebFrontVariable($id, "wf_enc_enabled", $wf_enc_enabled);'],]],
                         [
                             'type'  => 'RowLayout',
                             'items' => [
                                 [
                                     'type'     => 'PasswordTextBox',
                                     'name'     => 'wf_key',
                                     'caption'  => 'Key',
                                     'visible'  => true,
                                     'value'    => $this->ReadAttributeString('wf_key'),
                                     'onChange' => 'INSTAR_SetWifiParameters($id, $wf_enable, $wf_ssid, $wf_auth, $wf_key, $wf_enc, $wf_mode);'],
                                 [
                                     'name'     => 'wf_key_enabled',
                                     'type'     => 'CheckBox',
                                     'caption'  => 'Create Variable for Webfront',
                                     'value'    => $this->ReadAttributeBoolean('wf_key_enabled'),
                                     'onChange' => 'INSTAR_SetWebFrontVariable($id, "wf_key_enabled", $wf_key_enabled);'],]],
                         [
                             'type'    => 'Label',
                             'caption' => 'Set WIFI infos for the camera'],
                         [
                             'type'    => 'Button',
                             'caption' => 'Set WIFI infos',
                             'onClick' => 'INSTAR_SetWifiParameters($id, $wf_enable, $wf_ssid, $wf_auth, $wf_key, $wf_enc, $wf_mode);']]

            );
        }
        /*
        $form = array_merge_recursive(
            $form, [
                     [
                         'type'    => 'Label',
                         'caption' => 'Get WIFI info from the camera'],
                     [
                         'type'    => 'Button',
                         'caption' => 'Get WIFI info',
                         'onClick' => 'INSTAR_GetCameraWIFIConfiguration($id);']]
        );
        */
        return $form;
    }

    private function FormRemoteInfo()
    {
        // TODO P2P

        $form       = [];
        $our_server = $this->ReadAttributeString('our_server');
        if ($our_server != '') {
            $form = array_merge_recursive(
                $form, [
                         [
                             'type'    => 'RowLayout',
                             'visible' => true,
                             'items'   => [
                                 [
                                     'type'    => 'ValidationTextBox',
                                     'name'    => 'our_domain',
                                     'caption' => 'Your INSTAR DDNS Address',
                                     'visible' => true,
                                     'value'   => $this->ReadAttributeString('our_domain'),
                                     'enabled' => false,
                                     'onClick' => 'INSTAR_SetWebFrontVariable($id, $name, $value);'],
                                 [
                                     'name'     => 'our_domain_enabled',
                                     'type'     => 'CheckBox',
                                     'caption'  => 'Create Variable for Webfront',
                                     'visible'  => true,
                                     'value'    => $this->ReadAttributeBoolean('our_domain_enabled'),
                                     'onChange' => 'INSTAR_SetWebFrontVariable($id, "our_domain_enabled", $our_domain_enabled);'],]],

                         [
                             'type'    => 'RowLayout',
                             'visible' => false,
                             'items'   => [
                                 [
                                     'type'    => 'ValidationTextBox',
                                     'name'    => 'our_server',
                                     'caption' => 'INSTAR DDNS Server Domain',
                                     'visible' => false,
                                     'value'   => $this->ReadAttributeString('our_server'),
                                     'enabled' => false,
                                     'onClick' => 'INSTAR_SetWebFrontVariable($id, $name, $value);'],
                                 [
                                     'name'     => 'our_server_enabled',
                                     'type'     => 'CheckBox',
                                     'caption'  => 'Create Variable for Webfront',
                                     'visible'  => false,
                                     'value'    => $this->ReadAttributeBoolean('our_server_enabled'),
                                     'onChange' => 'INSTAR_SetWebFrontVariable($id, "our_server_enabled", $our_server_enabled);'],]],
                         [
                             'type'    => 'RowLayout',
                             'visible' => false,
                             'items'   => [
                                 [
                                     'type'    => 'NumberSpinner',
                                     'name'    => 'our_port',
                                     'caption' => 'INSTAR DDNS Server Port',
                                     'visible' => false,
                                     'value'   => $this->ReadAttributeInteger('our_port'),
                                     'onClick' => 'INSTAR_SetWebFrontVariable($id, $name, $value);'],
                                 [
                                     'name'     => 'our_port_enabled',
                                     'type'     => 'CheckBox',
                                     'caption'  => 'Create Variable for Webfront',
                                     'visible'  => false,
                                     'value'    => $this->ReadAttributeBoolean('our_port_enabled'),
                                     'onChange' => 'INSTAR_SetWebFrontVariable($id, "our_port_enabled", $our_port_enabled);'],]],
                         [
                             'type'    => 'RowLayout',
                             'visible' => false,
                             'items'   => [
                                 [
                                     'type'    => 'ValidationTextBox',
                                     'name'    => 'our_uname',
                                     'caption' => 'Your INSTAR DDNS ID',
                                     'visible' => false,
                                     'value'   => $this->ReadAttributeString('our_uname'),
                                     'enabled' => false,
                                     'onClick' => 'INSTAR_SetWebFrontVariable($id, $name, $value);'],
                                 [
                                     'name'     => 'our_uname_enabled',
                                     'type'     => 'CheckBox',
                                     'caption'  => 'Create Variable for Webfront',
                                     'visible'  => false,
                                     'value'    => $this->ReadAttributeBoolean('our_uname_enabled'),
                                     'onChange' => 'INSTAR_SetWebFrontVariable($id, "our_uname_enabled", $our_uname_enabled);'],]],
                         [
                             'type'    => 'RowLayout',
                             'visible' => false,
                             'items'   => [
                                 [
                                     'type'    => 'ValidationTextBox',
                                     'name'    => 'our_passwd',
                                     'caption' => 'Your INSTAR DDNS Password',
                                     'visible' => false,
                                     'value'   => $this->ReadAttributeString('our_passwd'),
                                     'enabled' => false,
                                     'onClick' => 'INSTAR_SetWebFrontVariable($id, $name, $value);'],
                                 [
                                     'name'     => 'our_passwd_enabled',
                                     'type'     => 'CheckBox',
                                     'caption'  => 'Create Variable for Webfront',
                                     'visible'  => false,
                                     'value'    => $this->ReadAttributeBoolean('our_passwd_enabled'),
                                     'onChange' => 'INSTAR_SetWebFrontVariable($id, "our_passwd_enabled", $our_passwd_enabled);'],]],

                         [
                             'type'    => 'RowLayout',
                             'visible' => false,
                             'items'   => [
                                 [
                                     'type'    => 'NumberSpinner',
                                     'name'    => 'our_interval',
                                     'caption' => 'Update Intervall',
                                     'visible' => false,
                                     'value'   => $this->ReadAttributeInteger('our_interval'),
                                     'enabled' => false,
                                     'onClick' => 'INSTAR_SetWebFrontVariable($id, $name, $value);'],
                                 [
                                     'name'     => 'our_interval_enabled',
                                     'type'     => 'CheckBox',
                                     'caption'  => 'Create Variable for Webfront',
                                     'visible'  => false,
                                     'value'    => $this->ReadAttributeBoolean('our_interval_enabled'),
                                     'onChange' => 'INSTAR_SetWebFrontVariable($id, "our_interval_enabled", $our_interval_enabled);'],]],
                         [
                             'type'  => 'RowLayout',
                             'items' => [
                                 [
                                     'type'    => 'CheckBox',
                                     'name'    => 'our_enable',
                                     'caption' => 'INSTAR DDNS',
                                     'visible' => true,
                                     'value'   => boolval($this->ReadAttributeInteger('our_enable')),
                                     'enabled' => true,
                                     'onClick' => 'INSTAR_EnabeINSTAR_DNS($id, $our_enable);'],
                                 [
                                     'name'     => 'our_enable_enabled',
                                     'type'     => 'CheckBox',
                                     'caption'  => 'Create Variable for Webfront',
                                     'visible'  => true,
                                     'value'    => $this->ReadAttributeBoolean('our_enable_enabled'),
                                     'onChange' => 'INSTAR_SetWebFrontVariable($id, "our_enable_enabled", $our_enable_enabled);'],]]]
            );
        }
        $our_enable = $this->ReadAttributeInteger('our_enable');
        if ($our_enable == 0) {
            $form = array_merge_recursive(
                $form, [
                         [
                             'type'  => 'RowLayout',
                             'items' => [
                                 [
                                     'type'    => 'ValidationTextBox',
                                     'name'    => 'd3th_domain',
                                     'caption' => 'Your 3rd Party DDNS Address',
                                     'visible' => true,
                                     'value'   => $this->ReadAttributeString('d3th_domain'),
                                     'onClick' => 'INSTAR_SetWebFrontVariable($id, $name, $value);'],
                                 [
                                     'name'     => 'd3th_domain_enabled',
                                     'type'     => 'CheckBox',
                                     'caption'  => 'Create Variable for Webfront',
                                     'visible'  => true,
                                     'value'    => $this->ReadAttributeBoolean('d3th_domain_enabled'),
                                     'onChange' => 'INSTAR_SetWebFrontVariable($id, "d3th_domain_enabled", $d3th_domain_enabled);'],]],
                         [
                             'type'  => 'RowLayout',
                             'items' => [
                                 [
                                     'type'     => 'Select',
                                     'name'     => 'd3th_service',
                                     'caption'  => 'Service',
                                     'options'  => [
                                         [
                                             'caption' => 'DynDNS',
                                             'value'   => 0],
                                         [
                                             'caption' => 'NoIP',
                                             'value'   => 1]],
                                     'visible'  => true,
                                     'value'    => $this->ReadAttributeInteger('d3th_service'),
                                     'onChange' => 'INSTAR_SetWebFrontVariable($id, $name, $value);'],
                                 [
                                     'name'     => 'd3th_service_enabled',
                                     'type'     => 'CheckBox',
                                     'caption'  => 'Create Variable for Webfront',
                                     'visible'  => true,
                                     'value'    => $this->ReadAttributeBoolean('d3th_service_enabled'),
                                     'onChange' => 'INSTAR_SetWebFrontVariable($id, "d3th_service_enabled", $d3th_service_enabled);'],]],
                         [
                             'type'  => 'RowLayout',
                             'items' => [
                                 [
                                     'type'    => 'ValidationTextBox',
                                     'name'    => 'd3th_uname',
                                     'caption' => 'Username',
                                     'visible' => true,
                                     'value'   => $this->ReadAttributeString('d3th_uname'),
                                     'onClick' => 'INSTAR_SetWebFrontVariable($id, $name, $value);'],
                                 [
                                     'name'     => 'd3th_uname_enabled',
                                     'type'     => 'CheckBox',
                                     'caption'  => 'Create Variable for Webfront',
                                     'visible'  => true,
                                     'value'    => $this->ReadAttributeBoolean('d3th_uname_enabled'),
                                     'onChange' => 'INSTAR_SetWebFrontVariable($id, "d3th_uname_enabled", $d3th_uname_enabled);'],]],
                         [
                             'type'  => 'RowLayout',
                             'items' => [
                                 [
                                     'type'    => 'ValidationTextBox',
                                     'name'    => 'd3th_passwd',
                                     'caption' => 'Password',
                                     'visible' => true,
                                     'value'   => $this->ReadAttributeString('d3th_passwd'),
                                     'onClick' => 'INSTAR_SetWebFrontVariable($id, $name, $value);'],
                                 [
                                     'name'     => 'd3th_passwd_enabled',
                                     'type'     => 'CheckBox',
                                     'caption'  => 'Create Variable for Webfront',
                                     'visible'  => true,
                                     'value'    => $this->ReadAttributeBoolean('d3th_passwd_enabled'),
                                     'onChange' => 'INSTAR_SetWebFrontVariable($id, "d3th_passwd_enabled", $d3th_passwd_enabled);'],]],
                         [
                             'type'    => 'RowLayout',
                             'visible' => false,
                             'items'   => [
                                 [
                                     'type'    => 'CheckBox',
                                     'name'    => 'd3th_enable',
                                     'caption' => '3rd Party DDNS',
                                     'visible' => true,
                                     'value'   => boolval($this->ReadAttributeInteger('d3th_enable')),
                                     'onClick' => 'INSTAR_Enabel3thDNS($id, $d3th_enable);'],
                                 [
                                     'name'     => 'd3th_enable_enabled',
                                     'type'     => 'CheckBox',
                                     'caption'  => 'Create Variable for Webfront',
                                     'visible'  => true,
                                     'value'    => $this->ReadAttributeBoolean('d3th_enable_enabled'),
                                     'onChange' => 'INSTAR_SetWebFrontVariable($id, "d3th_enable_enabled", $d3th_enable_enabled);'],]],
                         [
                             'type'    => 'Label',
                             'visible' => true,
                             'caption' => 'Set 3rd Party DDNS Configuration'],
                         [
                             'type'    => 'Button',
                             'visible' => true,
                             'caption' => 'Set DDNS',
                             'onClick' => 'INSTAR_Set3rdPartyDDNSParameters($id, $d3th_domain, $d3th_service, $d3th_uname, $d3th_passwd);']]
            );
        }
        $form = array_merge_recursive(
            $form, [
                     [
                         'type'    => 'Label',
                         'visible' => true,
                         'caption' => 'Get INSTAR DDNS parameter'],
                     [
                         'type'    => 'Button',
                         'visible' => true,
                         'caption' => 'Get INSTAR DDNS parameter',
                         'onClick' => 'INSTAR_GetDDNSConfiguration($id);'],
                     [
                         'type'    => 'Label',
                         'visible' => true,
                         'caption' => 'Get DDNS parameter Configuration'],
                     [
                         'type'     => 'Button',
                         'visible'  => true,
                         'caption'  => 'Get DDNS parameter Configuration',
                         'onChange' => 'INSTAR_Get3rdPartyDDNSConfiguration($id);']]
        );
        return $form;
    }

    private function FormUPNPInfo()
    {
        $form = [
            [
                'type'  => 'RowLayout',
                'items' => [
                    [
                        'name'    => 'upm_enable',
                        'type'    => 'CheckBox',
                        'caption' => 'UPNP',
                        'value'   => boolval($this->ReadAttributeInteger('upm_enable')),
                        'onClick' => 'INSTAR_SetUPNPConfiguration($id, $upm_enable);'],
                    [
                        'name'     => 'upm_enable_enabled',
                        'type'     => 'CheckBox',
                        'caption'  => 'Create Variable for Webfront',
                        'value'    => $this->ReadAttributeBoolean('upm_enable_enabled'),
                        'onChange' => 'INSTAR_SetWebFrontVariable($id, "upm_enable_enabled", $upm_enable_enabled);'],]],
            [
                'type'    => 'Label',
                'visible' => false,
                'caption' => 'Get UPNP configuration'],
            [
                'type'    => 'Button',
                'visible' => false,
                'caption' => 'Get UPNP Configuration',
                'onClick' => 'INSTAR_GetUPNPConfiguration($id);']];
        return $form;
    }

    private function FormONVIFInfo()
    {
        $form      = [];
        $ov_subchn = $this->ReadAttributeInteger('ov_subchn');
        if ($ov_subchn != 0) {
            $form = array_merge_recursive(
                $form, [
                         [
                             'type'    => 'Label',
                             'visible' => true,
                             'caption' => 'ONVIF is a multi-vendor interface standard for IP cameras and accessories to ensure maximum compatibility between them'],
                         [
                             'type'  => 'RowLayout',
                             'items' => [
                                 [
                                     'type'     => 'CheckBox',
                                     'name'     => 'ov_enable',
                                     'caption'  => 'Enable ONVIF',
                                     'visible'  => true,
                                     'value'    => boolval($this->ReadAttributeInteger('ov_enable')),
                                     'onChange' => 'INSTAR_EnableONVIF($id, $ov_enable);'],
                                 [
                                     'name'     => 'ov_enable_enabled',
                                     'type'     => 'CheckBox',
                                     'caption'  => 'Create Variable for Webfront',
                                     'value'    => $this->ReadAttributeBoolean('ov_enable_enabled'),
                                     'onChange' => 'INSTAR_SetWebFrontVariable($id, "ov_enable_enabled", $ov_enable_enabled);'],]],
                         [
                             'type'  => 'RowLayout',
                             'items' => [
                                 [
                                     'type'     => 'CheckBox',
                                     'name'     => 'ov_authflag',
                                     'caption'  => 'Authentication',
                                     'visible'  => true,
                                     'value'    => boolval($this->ReadAttributeInteger('ov_authflag')),
                                     'onChange' => 'INSTAR_ONVIFAuth($id, "ov_authflag", $ov_authflag);'],
                                 [
                                     'name'     => 'ov_authflag_enabled',
                                     'type'     => 'CheckBox',
                                     'caption'  => 'Create Variable for Webfront',
                                     'value'    => $this->ReadAttributeBoolean('ov_authflag_enabled'),
                                     'onChange' => 'INSTAR_SetWebFrontVariable($id, "ov_authflag_enabled", $ov_authflag_enabled);'],]],
                         [
                             'type'  => 'RowLayout',
                             'items' => [
                                 [
                                     'type'    => 'NumberSpinner',
                                     'name'    => 'ov_port',
                                     'caption' => 'ONVIF Port',
                                     'visible' => true,
                                     'value'   => $this->ReadAttributeInteger('ov_port'),
                                     'onClick' => 'INSTAR_SetONVIFPort($id, "ov_port", $ov_port);'],
                                 [
                                     'name'     => 'ov_port_enabled',
                                     'type'     => 'CheckBox',
                                     'caption'  => 'Create Variable for Webfront',
                                     'value'    => $this->ReadAttributeBoolean('ov_port_enabled'),
                                     'onChange' => 'INSTAR_SetWebFrontVariable($id, "ov_port_enabled", $ov_port_enabled);'],]],

                         [
                             'type'  => 'RowLayout',
                             'items' => [
                                 [
                                     'type'     => 'Select',
                                     'name'     => 'ov_forbitset',
                                     'caption'  => 'forbiset',
                                     'options'  => [
                                         [
                                             'caption' => 'Time zone setting enabled, image parameter settings enabled',
                                             'value'   => 0],
                                         [
                                             'caption' => 'Time zone setting disabled, the image parameter settings enabled',
                                             'value'   => 1],
                                         [
                                             'caption' => 'Time zone setting enabled, image parameter settings prohibited',
                                             'value'   => 2],
                                         [
                                             'caption' => 'Time zone setting prohibited, image parameter settings prohibited',
                                             'value'   => 3]],
                                     'visible'  => true,
                                     'value'    => $this->ReadAttributeInteger('ov_forbitset'),
                                     'onChange' => 'INSTAR_SetONVIFForbiset($id, "ov_forbitset", $ov_forbitset);'],
                                 [
                                     'name'     => 'ov_forbitset_enabled',
                                     'type'     => 'CheckBox',
                                     'caption'  => 'Create Variable for Webfront',
                                     'value'    => $this->ReadAttributeBoolean('ov_forbitset_enabled'),
                                     'onChange' => 'INSTAR_SetWebFrontVariable($id, "ov_forbitset_enabled", $ov_forbitset_enabled);'],]],
                         [
                             'type'  => 'RowLayout',
                             'items' => [
                                 [
                                     'type'     => 'Select',
                                     'name'     => 'ov_subchn',
                                     'caption'  => 'Video Subchannel',
                                     'options'  => [
                                         [
                                             'caption' => 'Channel 11',
                                             'value'   => 11],
                                         [
                                             'caption' => 'Channel 12',
                                             'value'   => 12],
                                         [
                                             'caption' => 'Channel 13',
                                             'value'   => 13]],
                                     'visible'  => true,
                                     'value'    => $this->ReadAttributeInteger('ov_subchn'),
                                     'onChange' => 'INSTAR_SetONVIFSubchannel($id, "ov_subchn", $ov_subchn);'],
                                 [
                                     'name'     => 'ov_subchn_enabled',
                                     'type'     => 'CheckBox',
                                     'caption'  => 'Create Variable for Webfront',
                                     'value'    => $this->ReadAttributeBoolean('ov_subchn_enabled'),
                                     'onChange' => 'INSTAR_SetWebFrontVariable($id, "ov_subchn_enabled", $ov_subchn_enabled);'],]],
                         [
                             'type'  => 'RowLayout',
                             'items' => [
                                 [
                                     'type'     => 'Select',
                                     'name'     => 'ov_snapchn',
                                     'caption'  => 'Video Subchannel Snapshot',
                                     'options'  => [
                                         [
                                             'caption' => 'Channel 11',
                                             'value'   => 11],
                                         [
                                             'caption' => 'Channel 12',
                                             'value'   => 12],
                                         [
                                             'caption' => 'Channel 13',
                                             'value'   => 13]],
                                     'visible'  => true,
                                     'value'    => $this->ReadAttributeInteger('ov_snapchn'),
                                     'onChange' => 'INSTAR_SetONVIFSubchannelSnapshot($id, "ov_snapchn", $ov_snapchn);'],
                                 [
                                     'name'     => 'ov_snapchn_enabled',
                                     'type'     => 'CheckBox',
                                     'caption'  => 'Create Variable for Webfront',
                                     'value'    => $this->ReadAttributeBoolean('ov_snapchn_enabled'),
                                     'onChange' => 'INSTAR_SetWebFrontVariable($id, "ov_snapchn_enabled", $ov_snapchn_enabled);'],]],
                         [
                             'type'    => 'Label',
                             'visible' => false,
                             'caption' => 'Set ONVIF infos for the camera'],
                         [
                             'type'    => 'Button',
                             'visible' => false,
                             'caption' => 'Set ONVIF infos',
                             'onClick' => 'INSTAR_SetONVIFConfigurationParameters($id, $ov_enable, $ov_port, $ov_authflag, $ov_forbitset, $ov_subchn, $ov_snapchn, $ov_nvctype);'],

                     ]
            );
        }
        $form = array_merge_recursive(
            $form, [
                     [
                         'type'    => 'Label',
                         'visible' => false,
                         'caption' => 'Get INSTAR ONVIF'],
                     [
                         'type'    => 'Button',
                         'visible' => false,
                         'caption' => 'Get ONVIF Configuration',
                         'onClick' => 'INSTAR_GetONVIFConfiguration($id);']]
        );
        return $form;
    }

    private function FormAudioSettings()
    {
        $form = [
            // audio encoder: 0, 1
            [
                'type'  => 'RowLayout',
                'items' => [
                    [
                        'type'     => 'CheckBox',
                        'name'     => 'aec',
                        'caption'  => 'audio encoder',
                        'visible'  => true,
                        'value'    => boolval($this->ReadAttributeInteger('aec')),
                        'onChange' => 'INSTAR_SetAudioEncoder($id, $value);'],
                    [
                        'name'     => 'aec_enabled',
                        'type'     => 'CheckBox',
                        'caption'  => 'Create Variable for Webfront',
                        'value'    => $this->ReadAttributeBoolean('aec_enabled'),
                        'onChange' => 'INSTAR_SetWebFrontVariable($id, "aec_enabled", $aec_enabled);'],]],
            // Noise suppression: 0, 1
            [
                'type'  => 'RowLayout',
                'items' => [
                    [
                        'type'     => 'CheckBox',
                        'name'     => 'denoise',
                        'caption'  => 'Noise suppression',
                        'visible'  => true,
                        'value'    => boolval($this->ReadAttributeInteger('denoise')),
                        'onChange' => 'INSTAR_SetNoiseSurpression($id, $denoise);'],
                    [
                        'name'     => 'denoise_enabled',
                        'type'     => 'CheckBox',
                        'caption'  => 'Create Variable for Webfront',
                        'value'    => $this->ReadAttributeBoolean('denoise_enabled'),
                        'onChange' => 'INSTAR_SetWebFrontVariable($id, "denoise_enabled", $denoise_enabled);'],]],
            // 0: linear input, 1: microphone input
            [
                'type'  => 'RowLayout',
                'items' => [
                    [
                        'type'    => 'Select',
                        'name'    => 'volin_type',
                        'caption' => 'input type',
                        'options' => [
                            [
                                'caption' => 'linear input',
                                'value'   => 0],
                            [
                                'caption' => 'microphone input',
                                'value'   => 1]],
                        'visible' => true,
                        'value'   => $this->ReadAttributeInteger('volin_type'),
                        'onClick' => 'INSTAR_SetVolumeInputType($id, $value);'],
                    [
                        'name'     => 'volin_type_enabled',
                        'type'     => 'CheckBox',
                        'caption'  => 'Create Variable for Webfront',
                        'value'    => $this->ReadAttributeBoolean('volin_type_enabled'),
                        'onChange' => 'INSTAR_SetWebFrontVariable($id, "volin_type_enabled", $volin_type_enabled);'],]],
            [
                'type'    => 'RowLayout',
                'visible' => false,
                'items'   => [
                    [
                        'type'    => 'Select',
                        'name'    => 'aeformat_1',
                        'caption' => 'input type',
                        'options' => [
                            [
                                'caption' => 'G726 16Kbps',
                                'value'   => 0],
                            [
                                'caption' => 'G711A 64Kbps',
                                'value'   => 1]],
                        'visible' => true,
                        'value'   => $this->ReadAttributeString('aeformat_1'),
                        'onClick' => 'INSTAR_SetVolumeInputType($id, $aeformat_1);'],
                    [
                        'name'     => 'aeformat_1_enabled',
                        'type'     => 'CheckBox',
                        'caption'  => 'Create Variable for Webfront',
                        'value'    => $this->ReadAttributeBoolean('aeformat_1_enabled'),
                        'onChange' => 'INSTAR_SetWebFrontVariable($id, "aeformat_1_enabled", $aeformat_1_enabled);'],]],
            [
                'type'    => 'RowLayout',
                'visible' => false,
                'items'   => [
                    [
                        'type'    => 'Select',
                        'name'    => 'aeformat_2',
                        'caption' => 'input type',
                        'options' => [
                            [
                                'caption' => 'G726 16Kbps',
                                'value'   => 0],
                            [
                                'caption' => 'G711A 64Kbps',
                                'value'   => 1]],
                        'visible' => true,
                        'value'   => $this->ReadAttributeString('aeformat_2'),
                        'onClick' => 'INSTAR_SetVolumeInputType($id, $aeformat_2);'],
                    [
                        'name'     => 'aeformat_2_enabled',
                        'type'     => 'CheckBox',
                        'caption'  => 'Create Variable for Webfront',
                        'value'    => $this->ReadAttributeBoolean('aeformat_2_enabled'),
                        'onChange' => 'INSTAR_SetWebFrontVariable($id, "aeformat_2_enabled", $aeformat_2_enabled);'],]],
            [
                'type'    => 'RowLayout',
                'visible' => false,
                'items'   => [
                    [
                        'type'    => 'Select',
                        'name'    => 'aeformat_3',
                        'caption' => 'input type',
                        'options' => [
                            [
                                'caption' => 'G726 16Kbps',
                                'value'   => 0],
                            [
                                'caption' => 'G711A 64Kbps',
                                'value'   => 1]],
                        'visible' => true,
                        'value'   => $this->ReadAttributeString('aeformat_3'),
                        'onClick' => 'INSTAR_SetVolumeInputType($id, $aeformat_3);'],
                    [
                        'name'     => 'aeformat_3_enabled',
                        'type'     => 'CheckBox',
                        'caption'  => 'Create Variable for Webfront',
                        'value'    => $this->ReadAttributeBoolean('aeformat_3_enabled'),
                        'onChange' => 'INSTAR_SetWebFrontVariable($id, "aeformat_3_enabled", $aeformat_3_enabled);'],]],

            // Audio input volume: 1 - 100
            [
                'type'  => 'RowLayout',
                'items' => [
                    [
                        'type'     => 'HorizontalSlider',
                        'name'     => 'volume',
                        'visible'  => true,
                        'caption'  => 'Input Sensitivity',
                        'minimum'  => 0,
                        'maximum'  => 100,
                        'value'    => $this->ReadAttributeInteger('volume'),
                        'onChange' => 'INSTAR_SetVolume($id, $volume);'],
                    [
                        'name'     => 'volume_enabled',
                        'type'     => 'CheckBox',
                        'caption'  => 'Create Variable for Webfront',
                        'value'    => $this->ReadAttributeBoolean('volume_enabled'),
                        'onChange' => 'INSTAR_SetWebFrontVariable($id, "volume_enabled", $volume_enabled);'],]],
            [
                'type'  => 'RowLayout',
                'items' => [
                    [
                        'type'     => 'HorizontalSlider',
                        'name'     => 'ao_volume',
                        'caption'  => 'Speaker / Output Volume',
                        'visible'  => true,
                        'minimum'  => 0,
                        'maximum'  => 100,
                        'value'    => $this->ReadAttributeInteger('ao_volume'),
                        'onChange' => 'INSTAR_SetOutputVolume($id, $ao_volume);'],
                    [
                        'name'     => 'ao_volume_enabled',
                        'type'     => 'CheckBox',
                        'caption'  => 'Create Variable for Webfront',
                        'value'    => $this->ReadAttributeBoolean('ao_volume_enabled'),
                        'onChange' => 'INSTAR_SetWebFrontVariable($id, "ao_volume_enabled", $ao_volume_enabled);'],]]

        ];
        return $form;
    }

    /*
     *    if ($var_name == 'aeformat') {
                if ($var_content = 'g726') // Audio encode format g726: G726 16Kbps
                {
                    $var_content = 0;
                } else // Audio encode format g711a: G711A 64Kbps
                {
                    $var_content = 1;
                }
                $this->WriteAttributeInteger($var_name, $var_content);
            }
     */

    private function FormVideoSettings()
    {
        $vinorm       = $this->ReadAttributeString('vinorm');
        $vinorm_value = 0;
        if ($vinorm == 'P') {
            $vinorm_value = 0;
        }
        $form = [
            [
                'type'    => 'RowLayout',
                'visible' => true,
                'items'   => [
                    [
                        'type'     => 'Select',
                        'name'     => 'videomode',
                        'caption'  => 'Videomode',
                        'options'  => [
                            [
                                'caption' => 'Please select a videomode',
                                'value'   => 0],
                            [
                                'caption' => 'Videomode',
                                'value'   => 41],
                            [
                                'caption' => '1080p (Full HD)',
                                'value'   => self::RESOLUTION_1080p],
                            [
                                'caption' => '320p (VGA)',
                                'value'   => self::RESOLUTION_320p],
                            [
                                'caption' => '160p (QVGA)',
                                'value'   => self::RESOLUTION_160p],],
                        'visible'  => true,
                        'value'    => $this->ReadAttributeInteger('videomode'),
                        'onChange' => 'INSTAR_SetVideoMode($id, $videomode);'

                    ],
                    [
                        'name'     => 'videomode_enabled',
                        'type'     => 'CheckBox',
                        'caption'  => 'Create Variable for Webfront',
                        'visible'  => true,
                        'value'    => $this->ReadAttributeBoolean('videomode_enabled'),
                        'onChange' => 'INSTAR_SetWebFrontVariable($id, "videomode_enabled", $videomode_enabled);'],]],
            [
                'type'    => 'RowLayout',
                'visible' => true,
                'items'   => [
                    [
                        'type'     => 'Select',
                        'name'     => 'vinorm',
                        'caption'  => 'Videonorm',
                        'options'  => [
                            [
                                'caption' => 'Video Norm 50Hz (PAL)',
                                'value'   => 0],],
                        'visible'  => true,
                        'value'    => $vinorm_value,
                        'onChange' => 'INSTAR_SetVideonorm($id, $vinorm);'

                    ],
                    [
                        'name'     => 'vinorm_enabled',
                        'type'     => 'CheckBox',
                        'caption'  => 'Create Variable for Webfront',
                        'visible'  => true,
                        'value'    => $this->ReadAttributeBoolean('vinorm_enabled'),
                        'onChange' => 'INSTAR_SetWebFrontVariable($id, "vinorm_enabled", $vinorm_enabled);'],]],
            [
                'type'    => 'RowLayout',
                'visible' => true,
                'items'   => [
                    [
                        'type'     => 'CheckBox',
                        'name'     => 'profile',
                        'caption'  => 'h.264 encoder',
                        'visible'  => true,
                        'value'    => boolval($this->ReadAttributeInteger('profile')),
                        'onChange' => 'INSTAR_SetVideoProfile($id, $profile);'],
                    [
                        'name'     => 'profile_enabled',
                        'type'     => 'CheckBox',
                        'caption'  => 'Create Variable for Webfront',
                        'visible'  => true,
                        'value'    => $this->ReadAttributeBoolean('profile_enabled'),
                        'onChange' => 'INSTAR_SetWebFrontVariable($id, "profile_enabled", $profile_enabled);'],]],
            [
                'type'    => 'RowLayout',
                'visible' => true,
                'items'   => [
                    [
                        'type'    => 'NumberSpinner',
                        'name'    => 'maxchn',
                        'caption' => 'Maximum active video channels',
                        'visible' => true,
                        'value'   => $this->ReadAttributeInteger('maxchn'),
                        'onClick' => 'INSTAR_SetMaxChn($id, $maxchn);'],

                    [
                        'name'     => 'maxchn_enabled',
                        'type'     => 'CheckBox',
                        'caption'  => 'Create Variable for Webfront',
                        'visible'  => true,
                        'value'    => $this->ReadAttributeBoolean('maxchn_enabled'),
                        'onChange' => 'INSTAR_SetWebFrontVariable($id, "maxchn_enabled", $maxchn_enabled);'],]],


            // TODO check INSTAR_GetVideoEncoderAttributes($id);


        ];
        return $form;
    }

    private function FormImageSettings()
    {

        $form = [
            [
                'type'    => 'RowLayout',
                'visible' => true,
                'items'   => [
                    [
                        'type'     => 'HorizontalSlider',
                        'name'     => 'hue',
                        'caption'  => 'Hue',
                        'minimum'  => 0,
                        'maximum'  => 100,
                        'value'    => $this->ReadAttributeInteger('hue'),
                        'onChange' => 'INSTAR_Hue($id, $hue);'],
                    [
                        'name'     => 'hue_enabled',
                        'type'     => 'CheckBox',
                        'caption'  => 'Create Variable for Webfront',
                        'visible'  => true,
                        'value'    => $this->ReadAttributeBoolean('hue_enabled'),
                        'onChange' => 'INSTAR_SetWebFrontVariable($id, "hue_enabled", $hue_enabled);'],]],
            [
                'type'    => 'RowLayout',
                'visible' => true,
                'items'   => [
                    [
                        'type'     => 'HorizontalSlider',
                        'name'     => 'brightness',
                        'caption'  => 'Brightness',
                        'minimum'  => 0,
                        'maximum'  => 100,
                        'value'    => $this->ReadAttributeInteger('brightness'),
                        'onChange' => 'INSTAR_Brightness($id, $brightness);'],
                    [
                        'name'     => 'brightness_enabled',
                        'type'     => 'CheckBox',
                        'caption'  => 'Create Variable for Webfront',
                        'visible'  => true,
                        'value'    => $this->ReadAttributeBoolean('brightness_enabled'),
                        'onChange' => 'INSTAR_SetWebFrontVariable($id, "brightness_enabled", $brightness_enabled);'],]],
            [
                'type'    => 'RowLayout',
                'visible' => true,
                'items'   => [
                    [
                        'type'     => 'HorizontalSlider',
                        'name'     => 'saturation',
                        'caption'  => 'Saturation',
                        'minimum'  => 0,
                        'maximum'  => 100,
                        'value'    => $this->ReadAttributeInteger('saturation'),
                        'onChange' => 'INSTAR_Saturation($id, $saturation);'],
                    [
                        'name'     => 'saturation_enabled',
                        'type'     => 'CheckBox',
                        'caption'  => 'Create Variable for Webfront',
                        'visible'  => true,
                        'value'    => $this->ReadAttributeBoolean('saturation_enabled'),
                        'onChange' => 'INSTAR_SetWebFrontVariable($id, "saturation_enabled", $saturation_enabled);'],]],

            [
                'type'    => 'RowLayout',
                'visible' => true,
                'items'   => [
                    [
                        'type'     => 'HorizontalSlider',
                        'name'     => 'contrast',
                        'caption'  => 'Contrast',
                        'minimum'  => 0,
                        'maximum'  => 100,
                        'value'    => $this->ReadAttributeInteger('contrast'),
                        'onChange' => 'INSTAR_Contrast($id, $contrast);'],
                    [
                        'name'     => 'contrast_enabled',
                        'type'     => 'CheckBox',
                        'caption'  => 'Create Variable for Webfront',
                        'visible'  => true,
                        'value'    => $this->ReadAttributeBoolean('contrast_enabled'),
                        'onChange' => 'INSTAR_SetWebFrontVariable($id, "contrast_enabled", $contrast_enabled);'],]],
            [
                'type'    => 'RowLayout',
                'visible' => true,
                'items'   => [
                    [
                        'type'     => 'HorizontalSlider',
                        'name'     => 'sharpness',
                        'caption'  => 'Sharpness',
                        'minimum'  => 0,
                        'maximum'  => 100,
                        'value'    => $this->ReadAttributeInteger('sharpness'),
                        'onChange' => 'INSTAR_Sharpness($id, $sharpness);'],
                    [
                        'name'     => 'sharpness_enabled',
                        'type'     => 'CheckBox',
                        'caption'  => 'Create Variable for Webfront',
                        'visible'  => true,
                        'value'    => $this->ReadAttributeBoolean('sharpness_enabled'),
                        'onChange' => 'INSTAR_SetWebFrontVariable($id, "sharpness_enabled", $sharpness_enabled);'],]],
            [
                'type'    => 'RowLayout',
                'visible' => true,
                'items'   => [
                    [
                        'type'     => 'HorizontalSlider',
                        'name'     => 'gamma',
                        'caption'  => 'Gamma',
                        'minimum'  => 0,
                        'maximum'  => 100,
                        'value'    => $this->ReadAttributeInteger('gamma'),
                        'onChange' => 'INSTAR_Gamma($id, $gamma);'],
                    [
                        'name'     => 'gamma_enabled',
                        'type'     => 'CheckBox',
                        'caption'  => 'Create Variable for Webfront',
                        'visible'  => true,
                        'value'    => $this->ReadAttributeBoolean('gamma_enabled'),
                        'onChange' => 'INSTAR_SetWebFrontVariable($id, "gamma_enabled", $gamma_enabled);'],]],
            [
                'type'    => 'Label',
                'visible' => true,
                'caption' => 'advanced settings'],
            [
                'type'    => 'RowLayout',
                'visible' => true,
                'items'   => [
                    [
                        'type'     => 'CheckBox',
                        'name'     => 'mirror',
                        'caption'  => 'Rotate picture by 180°',
                        'visible'  => true,
                        'value'    => boolval($this->ReadAttributeInteger('profile')),
                        'onChange' => 'INSTAR_MirrorPicture($id, $mirror);'],
                    [
                        'name'     => 'mirror_enabled',
                        'type'     => 'CheckBox',
                        'caption'  => 'Create Variable for Webfront',
                        'visible'  => true,
                        'value'    => $this->ReadAttributeBoolean('mirror_enabled'),
                        'onChange' => 'INSTAR_SetWebFrontVariable($id, "mirror_enabled", $mirror_enabled);'],]],
            [
                'type'    => 'RowLayout',
                'visible' => true,
                'items'   => [
                    [
                        'type'     => 'HorizontalSlider',
                        'name'     => 'targety',
                        'caption'  => 'Equalize image',
                        'minimum'  => 0,
                        'maximum'  => 255,
                        'value'    => $this->ReadAttributeInteger('targety'),
                        'onChange' => 'INSTAR_EqualizeImage($id, $targety);'],
                    [
                        'name'     => 'targety_enabled',
                        'type'     => 'CheckBox',
                        'caption'  => 'Create Variable for Webfront',
                        'visible'  => true,
                        'value'    => $this->ReadAttributeBoolean('targety_enabled'),
                        'onChange' => 'INSTAR_SetWebFrontVariable($id, "targety_enabled", $targety_enabled);'],]],
            [
                'type'    => 'RowLayout',
                'visible' => true,
                'items'   => [
                    [
                        'type'    => 'Select',
                        'name'    => 'wdrmode',
                        'caption' => 'Wide Dynamic Range',
                        'options' => [
                            [
                                'caption' => 'Hardware WDR Mode',
                                'value'   => self::Hardware_WDR_Modus],
                            [
                                'caption' => 'Software WDR Mode',
                                'value'   => self::Software_WDR_Modus],],
                        'visible' => true,
                        'value'   => $this->ReadAttributeInteger('wdrmode'),
                        'onClick' => 'INSTAR_SetWDRMode($id, $wdrmode);'

                    ],
                    [
                        'name'     => 'wdrmode_enabled',
                        'type'     => 'CheckBox',
                        'caption'  => 'Create Variable for Webfront',
                        'visible'  => true,
                        'value'    => $this->ReadAttributeBoolean('wdrmode_enabled'),
                        'onChange' => 'INSTAR_SetWebFrontVariable($id, "wdrmode_enabled", $wdrmode_enabled);'],]],
            [
                'type'    => 'RowLayout',
                'visible' => true,
                'items'   => [
                    [
                        'type'     => 'CheckBox',
                        'name'     => 'wdrauto',
                        'visible'  => true,
                        'caption'  => 'Auto WDR',
                        'value'    => boolval($this->ReadAttributeInteger('wdrauto')),
                        'onChange' => 'INSTAR_SetWDRAuto($id, $wdrauto);'],
                    [
                        'name'     => 'wdrauto_enabled',
                        'type'     => 'CheckBox',
                        'caption'  => 'Create Variable for Webfront',
                        'visible'  => true,
                        'value'    => $this->ReadAttributeBoolean('wdrmode_enabled'),
                        'onChange' => 'INSTAR_SetWebFrontVariable($id, "wdrauto_enabled", $wdrauto_enabled);'],]],
            [
                'type'    => 'RowLayout',
                'visible' => true,
                'items'   => [
                    [
                        'type'     => 'HorizontalSlider',
                        'name'     => 'wdrautval',
                        'caption'  => 'Dynamic WDR Level',
                        'minimum'  => 0,
                        'maximum'  => 2,
                        'value'    => $this->ReadAttributeInteger('wdrautval'),
                        'onChange' => 'INSTAR_SetWDRAutval($id, $wdrautval);'],
                    [
                        'name'     => 'wdrautval_enabled',
                        'type'     => 'CheckBox',
                        'caption'  => 'Create Variable for Webfront',
                        'visible'  => true,
                        'value'    => $this->ReadAttributeBoolean('wdrautval_enabled'),
                        'onChange' => 'INSTAR_SetWebFrontVariable($id, "wdrautval_enabled", $wdrautval_enabled);'],]],
            [
                'type'    => 'RowLayout',
                'visible' => true,
                'items'   => [
                    [
                        'type'     => 'HorizontalSlider',
                        'name'     => 'wdrmanval',
                        'caption'  => 'Fix WDR Level',
                        'minimum'  => 0,
                        'maximum'  => 255,
                        'value'    => $this->ReadAttributeInteger('wdrmanval'),
                        'onChange' => 'INSTAR_SetWDRmanval($id, $wdrmanval);'],
                    [
                        'name'     => 'wdrmanval_enabled',
                        'type'     => 'CheckBox',
                        'caption'  => 'Create Variable for Webfront',
                        'visible'  => true,
                        'value'    => $this->ReadAttributeBoolean('wdrmanval_enabled'),
                        'onChange' => 'INSTAR_SetWebFrontVariable($id, "wdrmanval_enabled", $wdrmanval_enabled);'],]],
            [
                'type'    => 'RowLayout',
                'visible' => true,
                'items'   => [
                    [
                        'type'     => 'CheckBox',
                        'name'     => 'd3noauto',
                        'visible'  => true,
                        'caption'  => 'Noise Reduction Mode',
                        'value'    => boolval($this->ReadAttributeInteger('d3noauto')),
                        'onChange' => 'INSTAR_SetD3noauto($id, $d3noauto);'],
                    [
                        'name'     => 'd3noauto_enabled',
                        'type'     => 'CheckBox',
                        'caption'  => 'Create Variable for Webfront',
                        'visible'  => true,
                        'value'    => $this->ReadAttributeBoolean('d3noauto_enabled'),
                        'onChange' => 'INSTAR_SetWebFrontVariable($id, "d3noauto_enabled", $d3noauto_enabled);'],]],
            [
                'type'    => 'RowLayout',
                'visible' => true,
                'items'   => [
                    [
                        'type'     => 'HorizontalSlider',
                        'name'     => 'd3noval',
                        'caption'  => 'Noise Reduction Strength',
                        'minimum'  => 0,
                        'maximum'  => 255,
                        'value'    => $this->ReadAttributeInteger('d3noval'),
                        'onChange' => 'INSTAR_SetD3noval($id, $d3noval);'],
                    [
                        'name'     => 'd3noval_enabled',
                        'type'     => 'CheckBox',
                        'caption'  => 'Create Variable for Webfront',
                        'visible'  => true,
                        'value'    => $this->ReadAttributeBoolean('d3noval_enabled'),
                        'onChange' => 'INSTAR_SetWebFrontVariable($id, "d3noval_enabled", $d3noval_enabled);'],]],

        ];
        return $form;
    }

    private function FormImageOverlaySettings()
    {
        $form = [
            [
                'type'    => 'RowLayout',
                'visible' => true,
                'items'   => [
                    [
                        'type'    => 'ValidationTextBox',
                        'name'    => 'name_0_osd',
                        'visible' => true,
                        'caption' => 'OSD Time',
                        'value'   => $this->ReadAttributeString('name_0_osd'),
                        'onClick' => 'INSTAR_SetOSDParameters($id, $name_0_osd, $name_1_osd);'],
                    [
                        'name'     => 'name_0_osd_enabled',
                        'type'     => 'CheckBox',
                        'caption'  => 'Create Variable for Webfront',
                        'visible'  => true,
                        'value'    => $this->ReadAttributeBoolean('name_0_osd_enabled'),
                        'onChange' => 'INSTAR_SetWebFrontVariable($id, "name_0_osd_enabled", $name_0_osd_enabled);'],]],
            [
                'type'    => 'RowLayout',
                'visible' => true,
                'items'   => [
                    [
                        'type'    => 'ValidationTextBox',
                        'name'    => 'name_1_osd',
                        'visible' => true,
                        'caption' => 'OSD Camera Name',
                        'value'   => $this->ReadAttributeString('name_1_osd'),
                        'onClick' => 'INSTAR_SetOSDParameters($id, $name_0_osd, $name_1_osd);'],
                    [
                        'name'     => 'name_1_osd_enabled',
                        'type'     => 'CheckBox',
                        'caption'  => 'Create Variable for Webfront',
                        'visible'  => true,
                        'value'    => $this->ReadAttributeBoolean('name_1_osd_enabled'),
                        'onChange' => 'INSTAR_SetWebFrontVariable($id, "name_1_osd_enabled", $name_1_osd_enabled);'],]],
            [
                'type'    => 'RowLayout',
                'visible' => true,
                'items'   => [
                    [
                        'type'     => 'CheckBox',
                        'name'     => 'show_0_osd',
                        'visible'  => true,
                        'caption'  => 'Display Time Stamp',
                        'value'    => boolval($this->ReadAttributeInteger('show_0_osd')),
                        'onChange' => 'INSTAR_EnableOSD_Time($id, $show_0_osd);'],
                    [
                        'name'     => 'show_0_osd_enabled',
                        'type'     => 'CheckBox',
                        'caption'  => 'Create Variable for Webfront',
                        'visible'  => true,
                        'value'    => $this->ReadAttributeBoolean('show_0_osd_enabled'),
                        'onChange' => 'INSTAR_SetWebFrontVariable($id, "show_0_osd_enabled", $show_0_osd_enabled);'],]],
            [
                'type'    => 'RowLayout',
                'visible' => true,
                'items'   => [
                    [
                        'type'     => 'CheckBox',
                        'name'     => 'show_1_osd',
                        'visible'  => true,
                        'caption'  => 'Display Camera Name',
                        'value'    => boolval($this->ReadAttributeInteger('show_1_osd')),
                        'onChange' => 'INSTAR_EnableOSD_Name($id, $show_1_osd);'],
                    [
                        'name'     => 'show_1_osd_enabled',
                        'type'     => 'CheckBox',
                        'caption'  => 'Create Variable for Webfront',
                        'visible'  => true,
                        'value'    => $this->ReadAttributeBoolean('show_1_osd_enabled'),
                        'onChange' => 'INSTAR_SetWebFrontVariable($id, "show_1_osd_enabled", $show_1_osd_enabled);'],]],
            [
                'type'    => 'Label',
                'visible' => true,
                'caption' => 'Set OSD infos for the camera'],
            [
                'type'    => 'Button',
                'visible' => true,
                'caption' => 'Set OSD infos',
                'onClick' => 'INSTAR_SetONVIFConfiguration($id);'],

        ];
        return $form;
    }

    private function GetColor($color_attribute)
    {
        $color = $this->ReadAttributeString($color_attribute);
        $color = hexdec($color);
        return $color;
    }

    private function FormPrivacySettings()
    {
        $form = [
            [
                'type'  => 'RowLayout',
                'items' => [
                    [
                        'type'     => 'CheckBox',
                        'name'     => 'show_1',
                        'caption'  => 'Zone 1',
                        'value'    => boolval($this->ReadAttributeInteger('show_1')),
                        'onChange' => 'INSTAR_SetPrivacyZone1($id, $show_1);'],
                    [
                        'name'     => 'show_1_enabled',
                        'type'     => 'CheckBox',
                        'caption'  => 'Create Variable for Webfront',
                        'visible'  => true,
                        'value'    => $this->ReadAttributeBoolean('show_1_enabled'),
                        'onChange' => 'INSTAR_SetWebFrontVariable($id, "show_1_enabled", $show_1_enabled);']]],
            [
                'type'     => 'SelectColor',
                'name'     => 'color_1',
                'caption'  => 'Color 1',
                'visible'  => true,
                'value'    => $this->GetColor('color_1'),
                'onChange' => 'INSTAR_SetSettingsPrivacyZone1($id, $color_1, $x_1, $y_1, $w_1, $h_1);'],
            [
                'type'  => 'RowLayout',
                'items' => [
                    [
                        'type'     => 'HorizontalSlider',
                        'name'     => 'x_1',
                        'caption'  => 'X-Coordinate Origin Zone 1 (0-1920) Pixel',
                        'minimum'  => 0,
                        'maximum'  => 1920,
                        'value'    => $this->ReadAttributeInteger('x_1'),
                        'onChange' => 'INSTAR_SetSettingsPrivacyZone1($id, $color_1, $x_1, $y_1, $w_1, $h_1);'],
                    [
                        'type'     => 'HorizontalSlider',
                        'name'     => 'y_1',
                        'caption'  => 'Y-Coordinate Origin Zone 1 (0-1080) Pixel',
                        'minimum'  => 0,
                        'maximum'  => 1080,
                        'value'    => $this->ReadAttributeInteger('y_1'),
                        'onChange' => 'INSTAR_SetSettingsPrivacyZone1($id, $color_1, $x_1, $y_1, $w_1, $h_1);'],]],
            [
                'type'  => 'RowLayout',
                'items' => [
                    [
                        'type'     => 'HorizontalSlider',
                        'name'     => 'w_1',
                        'caption'  => 'Mask Width Zone 1 (1-1920) Pixel',
                        'minimum'  => 0,
                        'maximum'  => 1920,
                        'value'    => $this->ReadAttributeInteger('w_1'),
                        'onChange' => 'INSTAR_SetSettingsPrivacyZone1($id, $color_1, $x_1, $y_1, $w_1, $h_1);'],
                    [
                        'type'     => 'HorizontalSlider',
                        'name'     => 'h_1',
                        'caption'  => 'Mask Height Zone 1 (1-1080) Pixel',
                        'minimum'  => 0,
                        'maximum'  => 1080,
                        'value'    => $this->ReadAttributeInteger('h_1'),
                        'onChange' => 'INSTAR_SetSettingsPrivacyZone1($id, $color_1, $x_1, $y_1, $w_1, $h_1);'],]],
            [
                'type'  => 'RowLayout',
                'items' => [
                    [
                        'type'     => 'CheckBox',
                        'name'     => 'show_2',
                        'caption'  => 'Zone 2',
                        'value'    => boolval($this->ReadAttributeInteger('show_2')),
                        'onChange' => 'INSTAR_SetPrivacyZone2($id, $show_2);'],
                    [
                        'name'     => 'show_2_enabled',
                        'type'     => 'CheckBox',
                        'caption'  => 'Create Variable for Webfront',
                        'visible'  => true,
                        'value'    => $this->ReadAttributeBoolean('show_2_enabled'),
                        'onChange' => 'INSTAR_SetWebFrontVariable($id, "show_2_enabled", $show_2_enabled);']]],
            [
                'type'     => 'SelectColor',
                'name'     => 'color_2',
                'caption'  => 'Color 2',
                'visible'  => true,
                'value'    => $this->GetColor('color_2'),
                'onChange' => 'INSTAR_SetSettingsPrivacyZone2($id, $color_2, $x_2, $y_2, $w_2, $h_2);'],
            [
                'type'  => 'RowLayout',
                'items' => [
                    [
                        'type'     => 'HorizontalSlider',
                        'name'     => 'x_2',
                        'caption'  => 'X-Coordinate Origin Zone 2 (0-1920) Pixel',
                        'minimum'  => 0,
                        'maximum'  => 1920,
                        'value'    => $this->ReadAttributeInteger('x_2'),
                        'onChange' => 'INSTAR_SetSettingsPrivacyZone2($id, $color_2, $x_2, $y_2, $w_2, $h_2);'],
                    [
                        'type'     => 'HorizontalSlider',
                        'name'     => 'y_2',
                        'caption'  => 'Y-Coordinate Origin Zone 2 (0-1080) Pixel',
                        'minimum'  => 0,
                        'maximum'  => 1080,
                        'value'    => $this->ReadAttributeInteger('y_2'),
                        'onChange' => 'INSTAR_SetSettingsPrivacyZone2($id, $color_2, $x_2, $y_2, $w_2, $h_2);'],]],
            [
                'type'  => 'RowLayout',
                'items' => [
                    [
                        'type'     => 'HorizontalSlider',
                        'name'     => 'w_2',
                        'caption'  => 'Mask Width Zone 2 (1-1920) Pixel',
                        'minimum'  => 0,
                        'maximum'  => 1920,
                        'value'    => $this->ReadAttributeInteger('w_2'),
                        'onChange' => 'INSTAR_SetSettingsPrivacyZone2($id, $color_2, $x_2, $y_2, $w_2, $h_2);'],
                    [
                        'type'     => 'HorizontalSlider',
                        'name'     => 'h_2',
                        'caption'  => 'Mask Height Zone 2 (1-1080) Pixel',
                        'minimum'  => 0,
                        'maximum'  => 1080,
                        'value'    => $this->ReadAttributeInteger('h_2'),
                        'onChange' => 'INSTAR_SetSettingsPrivacyZone2($id, $color_2, $x_2, $y_2, $w_2, $h_2);'],]],
            [
                'type'  => 'RowLayout',
                'items' => [
                    [
                        'type'     => 'CheckBox',
                        'name'     => 'show_3',
                        'caption'  => 'Zone 3',
                        'value'    => boolval($this->ReadAttributeInteger('show_3')),
                        'onChange' => 'INSTAR_SetPrivacyZone3($id, $show_3);'],
                    [
                        'name'     => 'show_3_enabled',
                        'type'     => 'CheckBox',
                        'caption'  => 'Create Variable for Webfront',
                        'visible'  => true,
                        'value'    => $this->ReadAttributeBoolean('show_3_enabled'),
                        'onChange' => 'INSTAR_SetWebFrontVariable($id, "show_3_enabled", $show_3_enabled);']]],
            [
                'type'     => 'SelectColor',
                'name'     => 'color_3',
                'caption'  => 'Color 3',
                'visible'  => true,
                'value'    => $this->GetColor('color_3'),
                'onChange' => 'INSTAR_SetSettingsPrivacyZone3($id, $color_3, $x_3, $y_3, $w_3, $h_3);'],
            [
                'type'  => 'RowLayout',
                'items' => [
                    [
                        'type'     => 'HorizontalSlider',
                        'name'     => 'x_3',
                        'caption'  => 'X-Coordinate Origin Zone 3 (0-1920) Pixel',
                        'minimum'  => 0,
                        'maximum'  => 1920,
                        'value'    => $this->ReadAttributeInteger('x_3'),
                        'onChange' => 'INSTAR_SetSettingsPrivacyZone3($id, $color_3, $x_3, $y_3, $w_3, $h_3);'],
                    [
                        'type'     => 'HorizontalSlider',
                        'name'     => 'y_3',
                        'caption'  => 'Y-Coordinate Origin Zone 3 (0-1080) Pixel',
                        'minimum'  => 0,
                        'maximum'  => 1080,
                        'value'    => $this->ReadAttributeInteger('y_3'),
                        'onChange' => 'INSTAR_SetSettingsPrivacyZone3($id, $color_3, $x_3, $y_3, $w_3, $h_3);'],]],
            [
                'type'  => 'RowLayout',
                'items' => [
                    [
                        'type'     => 'HorizontalSlider',
                        'name'     => 'w_3',
                        'caption'  => 'Mask Width Zone 3 (1-1920) Pixel',
                        'minimum'  => 0,
                        'maximum'  => 1920,
                        'value'    => $this->ReadAttributeInteger('w_3'),
                        'onChange' => 'INSTAR_SetSettingsPrivacyZone3($id, $color_3, $x_3, $y_3, $w_3, $h_3);'],
                    [
                        'type'     => 'HorizontalSlider',
                        'name'     => 'h_3',
                        'caption'  => 'Mask Height Zone 3 (1-1080) Pixel',
                        'minimum'  => 0,
                        'maximum'  => 1080,
                        'value'    => $this->ReadAttributeInteger('h_3'),
                        'onChange' => 'INSTAR_SetSettingsPrivacyZone3($id, $color_3, $x_3, $y_3, $w_3, $h_3);'],]],
            [
                'type'  => 'RowLayout',
                'items' => [
                    [
                        'type'     => 'CheckBox',
                        'name'     => 'show_4',
                        'caption'  => 'Zone 4',
                        'value'    => boolval($this->ReadAttributeInteger('show_4')),
                        'onChange' => 'INSTAR_SetPrivacyZone4($id, $show_4);'],
                    [
                        'name'     => 'show_4_enabled',
                        'type'     => 'CheckBox',
                        'caption'  => 'Create Variable for Webfront',
                        'visible'  => true,
                        'value'    => $this->ReadAttributeBoolean('show_4_enabled'),
                        'onChange' => 'INSTAR_SetWebFrontVariable($id, "show_4_enabled", $show_4_enabled);']]],
            [
                'type'     => 'SelectColor',
                'name'     => 'color_4',
                'caption'  => 'Color 4',
                'visible'  => true,
                'value'    => $this->GetColor('color_4'),
                'onChange' => 'INSTAR_SetSettingsPrivacyZone3($id, $color_4, $x_4, $y_4, $w_4, $h_4);'],
            [
                'type'  => 'RowLayout',
                'items' => [
                    [
                        'type'     => 'HorizontalSlider',
                        'name'     => 'x_4',
                        'caption'  => 'X-Coordinate Origin Zone 4 (0-1920) Pixel',
                        'minimum'  => 0,
                        'maximum'  => 1920,
                        'value'    => $this->ReadAttributeInteger('x_4'),
                        'onChange' => 'INSTAR_SetSettingsPrivacyZone4($id, $color_4, $x_4, $y_4, $w_4, $h_4);'],
                    [
                        'type'     => 'HorizontalSlider',
                        'name'     => 'y_4',
                        'caption'  => 'Y-Coordinate Origin Zone 4 (0-1080) Pixel',
                        'minimum'  => 0,
                        'maximum'  => 1080,
                        'value'    => $this->ReadAttributeInteger('y_4'),
                        'onChange' => 'INSTAR_SetSettingsPrivacyZone4($id, $color_4, $x_4, $y_4, $w_4, $h_4);'],]],
            [
                'type'  => 'RowLayout',
                'items' => [
                    [
                        'type'     => 'HorizontalSlider',
                        'name'     => 'w_4',
                        'caption'  => 'Mask Width Zone 4 (1-1920) Pixel',
                        'minimum'  => 0,
                        'maximum'  => 1920,
                        'value'    => $this->ReadAttributeInteger('w_4'),
                        'onChange' => 'INSTAR_SetSettingsPrivacyZone4($id, $color_4, $x_4, $y_4, $w_4, $h_4);'],
                    [
                        'type'     => 'HorizontalSlider',
                        'name'     => 'h_4',
                        'caption'  => 'Mask Height Zone 4 (1-1080) Pixel',
                        'minimum'  => 0,
                        'maximum'  => 1080,
                        'value'    => $this->ReadAttributeInteger('h_4'),
                        'onChange' => 'INSTAR_SetSettingsPrivacyZone4($id, $color_4, $x_4, $y_4, $w_4, $h_4);'],]],];
        return $form;
    }

    public function UpdateParameter(string $Field, string $Parameter, $Value)
    {
        $this->UpdateFormField($Field, $Parameter, $Value);
        if ($Parameter == 'value') {
            $this->SendDebug('INSTAR Update Parameter', $Field . ' = ' . $Value, 0);
        }
    }

    public function Reload()
    {
        $this->ReloadForm();
    }

    private function FormCameraSelection()
    {
        $selection = [
            [
                'type'     => 'Select',
                'name'     => 'model_type',
                'caption'  => 'Model',
                'options'  => [
                    [
                        'caption' => 'Please select a camera model',
                        'value'   => 0],
                    [
                        'caption' => 'IN-5905 HD',
                        'value'   => self::IN_5905_HD],
                    [
                        'caption' => 'IN-5907 HD',
                        'value'   => self::IN_5907_HD],
                    [
                        'caption' => 'IN-7011 HD',
                        'value'   => self::IN_7011_HD],
                    [
                        'caption' => 'IN-9008 Full HD',
                        'value'   => self::IN_9008_Full_HD],
                    [
                        'caption' => 'IN-9010 Full HD',
                        'value'   => self::IN_9010_Full_HD],
                    [
                        'caption' => 'IN-9020 Full HD',
                        'value'   => self::IN_9020_Full_HD],
                    [
                        'caption' => 'IN-3011',
                        'value'   => self::IN_3011],
                    [
                        'caption' => 'IN-6001 HD',
                        'value'   => self::IN_6001_HD],
                    [
                        'caption' => 'IN-6012 HD',
                        'value'   => self::IN_6012_HD],
                    [
                        'caption' => 'IN-6014 HD',
                        'value'   => self::IN_6014_HD],

                    [
                        'caption' => 'IN-8003 Full HD',
                        'value'   => self::IN_8003_Full_HD],
                    [
                        'caption' => 'IN-8015 Full HD',
                        'value'   => self::IN_8015_Full_HD]],
                'onChange' => 'INSTAR_ChangeINSTAR_Picture($id, $model_type);'],
            [
                'type'    => 'Label',
                'name'    => 'instar_camera_icon_label',
                'visible' => false,
                'caption' => 'Please select a camera model'],
            [
                'type'    => 'Image',
                'name'    => 'instar_camera_icon',
                'visible' => true,
                'image'   => $this->SetInstarCameraPicture()],];
        return $selection;
    }

    protected function SetInstarCameraPicture()
    {
        $model_type = $this->ReadPropertyInteger('model_type');
        $image      = 'data:image/png;base64, ' . self::PICTURE_TRANSPARENT;

        if ($model_type == 0) {
            $image = 'data:image/png;base64, ' . self::PICTURE_TRANSPARENT;
        }
        // IN-5905 HD
        if ($model_type == self::IN_5905_HD) {
            $image = 'data:image/png;base64, ' . self::PICTURE_IN_5905_HD;
        }
        // IN-5907 HD
        if ($model_type == self::IN_5907_HD) {
            $image = 'data:image/png;base64, ' . self::PICTURE_IN_5907_HD;
        }
        // IN-7011 HD
        if ($model_type == self::IN_7011_HD) {
            $image = 'data:image/png;base64, ' . self::PICTURE_IN_7011_HD;
        }
        // IN-9008 Full HD
        if ($model_type == self::IN_9008_Full_HD) {
            $image = 'data:image/png;base64, ' . self::PICTURE_IN_9008_Full_HD;
        }
        // IN-9010 Full HD
        if ($model_type == self::IN_9010_Full_HD) {
            $image = 'data:image/png;base64, ' . self::PICTURE_IN_9010_Full_HD;
        }
        // IN-9020 Full HD
        if ($model_type == self::IN_9020_Full_HD) {
            $image = 'data:image/png;base64, ' . self::PICTURE_IN_9020_Full_HD;
        }
        // IN-3011
        if ($model_type == self::IN_3011) {
            $image = 'data:image/png;base64, ' . self::PICTURE_IN_3011;
        }
        // IN-6001 HD
        if ($model_type == self::IN_6001_HD) {
            $image = 'data:image/png;base64, ' . self::PICTURE_IN_6001_HD;
        }
        // IN-6012 HD
        if ($model_type == self::IN_6012_HD) {
            $image = 'data:image/png;base64, ' . self::PICTURE_IN_6012_HD;
        }
        // IN-6014 HD
        if ($model_type == self::IN_6014_HD) {
            $image = 'data:image/png;base64, ' . self::PICTURE_IN_6014_HD;
        }
        // IN-8003 Full HD
        if ($model_type == self::IN_8003_Full_HD) {
            $image = 'data:image/png;base64, ' . self::PICTURE_IN_8003_Full_HD;
        }
        // IN-8015 Full HD
        if ($model_type == self::IN_8015_Full_HD) {
            $image = 'data:image/png;base64, ' . self::PICTURE_IN_8015_Full_HD;
        }
        return $image;
    }

    public function ChangeINSTAR_Picture($model_type)
    {
        if ($model_type == 0) {
            $this->UpdateParameter('instar_camera_icon_label', 'visible', true);

        }
        // IN-5905 HD
        if ($model_type == self::IN_5905_HD) {
            $this->UpdateParameter('instar_camera_icon_label', 'visible', false);
            $this->UpdateParameter(
                'instar_IN_5905_HD_picture', 'image',
                'data:image/png;base64, '
            );
        }
        // IN-5907 HD
        if ($model_type == self::IN_5907_HD) {
            $this->UpdateParameter('instar_camera_icon_label', 'visible', false);
            $this->UpdateParameter(
                'instar_camera_icon', 'image',
                'data:image/png;base64, '
            );
        }
        // IN-7011 HD
        if ($model_type == self::IN_7011_HD) {
            $this->UpdateParameter('instar_camera_icon_label', 'visible', false);
            $this->UpdateParameter(
                'instar_camera_icon', 'image',
                'data:image/png;base64, '
            );
        }
        // IN-9008 Full HD
        if ($model_type == self::IN_9008_Full_HD) {
            $this->UpdateParameter('instar_camera_icon_label', 'visible', false);
            $this->UpdateParameter(
                'instar_camera_icon', 'image',
                'data:image/png;base64, '
            );
        }
        // IN-9010 Full HD
        if ($model_type == self::IN_9010_Full_HD) {
            $this->UpdateParameter('instar_camera_icon_label', 'visible', false);
            $this->UpdateParameter(
                'instar_camera_icon', 'image',
                'data:image/png;base64, '
            );
        }
        // IN-9020 Full HD
        if ($model_type == self::IN_9020_Full_HD) {
            $this->UpdateParameter('instar_camera_icon_label', 'visible', false);
            $this->UpdateParameter(
                'instar_camera_icon', 'image',
                'data:image/png;base64, '
            );
        }
        // IN-3011
        if ($model_type == self::IN_3011) {
            $this->UpdateParameter('instar_camera_icon_label', 'visible', false);
            $this->UpdateParameter(
                'instar_camera_icon', 'image',
                'data:image/png;base64, '
            );
        }
        // IN-6001 HD
        if ($model_type == self::IN_6001_HD) {
            $this->UpdateParameter('instar_camera_icon_label', 'visible', false);
            $this->UpdateParameter(
                'instar_camera_icon', 'image',
                'data:image/png;base64, '
            );
        }
        // IN-6012 HD
        if ($model_type == self::IN_6012_HD) {
            $this->UpdateParameter('instar_camera_icon_label', 'visible', false);
            $this->UpdateParameter(
                'instar_camera_icon', 'image',
                'data:image/png;base64, '
            );
        }
        // IN-6014 HD
        if ($model_type == self::IN_6014_HD) {
            $this->UpdateParameter('instar_camera_icon_label', 'visible', false);
            $this->UpdateParameter(
                'instar_camera_icon', 'image',
                'data:image/png;base64, '
            );
        }
        // IN-8003 Full HD
        if ($model_type == self::IN_8003_Full_HD) {
            $this->UpdateParameter('instar_camera_icon_label', 'visible', false);
            $this->UpdateParameter(
                'instar_camera_icon', 'image',
                'data:image/png;base64, '
            );
        }
        // IN-8015 Full HD
        if ($model_type == self::IN_8015_Full_HD) {
            $this->UpdateParameter('instar_camera_icon_label', 'visible', false);
            $this->UpdateParameter(
                'instar_camera_icon', 'image',
                'data:image/png;base64, '
            );
        }
    }

    protected function FormShowEmail()
    {
        $activeemail2  = $this->ReadPropertyBoolean('activeemail2');
        $activeemail3  = $this->ReadPropertyBoolean('activeemail3');
        $activeemail4  = $this->ReadPropertyBoolean('activeemail4');
        $activeemail5  = $this->ReadPropertyBoolean('activeemail5');
        $activeemail6  = $this->ReadPropertyBoolean('activeemail6');
        $activeemail7  = $this->ReadPropertyBoolean('activeemail7');
        $activeemail8  = $this->ReadPropertyBoolean('activeemail8');
        $activeemail9  = $this->ReadPropertyBoolean('activeemail9');
        $activeemail10 = $this->ReadPropertyBoolean('activeemail10');
        $activeemail11 = $this->ReadPropertyBoolean('activeemail11');
        $form          = [
            [
                'type'    => 'Label',
                'caption' => 'Optional email notification (requires a configured SMTP module)'],
            [
                'type'    => 'Label',
                'caption' => 'Email notification active'],
            [
                'name'    => 'activeemail',
                'type'    => 'CheckBox',
                'caption' => 'Active email'],
            [
                'name'    => 'smtpmodule',
                'type'    => 'SelectInstance',
                'caption' => 'SMTP module'],
            [
                'type'    => 'Label',
                'caption' => 'Email recipient'],
            [
                'name'    => 'email',
                'type'    => 'ValidationTextBox',
                'caption' => 'email'],
            [
                'type'    => 'Label',
                'caption' => 'Email subject'],
            [
                'name'    => 'subject',
                'type'    => 'ValidationTextBox',
                'caption' => 'subject'],
            [
                'type'    => 'Label',
                'caption' => 'Email text'],
            [
                'name'    => 'emailtext',
                'type'    => 'ValidationTextBox',
                'caption' => 'Email text'],
            [
                'name'    => 'activeemail2',
                'type'    => 'CheckBox',
                'caption' => 'Active email 2']];
        if ($activeemail2) {
            $form = array_merge_recursive(
                $form, [
                         [
                             'name'    => 'smtpmodule2',
                             'type'    => 'SelectInstance',
                             'caption' => 'SMTP module'],
                         [
                             'type'    => 'Label',
                             'caption' => 'Notification email address'],
                         [
                             'name'    => 'email2',
                             'type'    => 'ValidationTextBox',
                             'caption' => 'email'],
                         [
                             'type'    => 'Label',
                             'caption' => 'Email subject'],
                         [
                             'name'    => 'subject2',
                             'type'    => 'ValidationTextBox',
                             'caption' => 'subject'],
                         [
                             'type'    => 'Label',
                             'caption' => 'Email text'],
                         [
                             'name'    => 'emailtext2',
                             'type'    => 'ValidationTextBox',
                             'caption' => 'Email text'],
                         [
                             'name'    => 'activeemail3',
                             'type'    => 'CheckBox',
                             'caption' => 'Active email 3']]
            );
        }
        if ($activeemail3) {
            $form = array_merge_recursive(
                $form, [
                         [
                             'name'    => 'smtpmodule3',
                             'type'    => 'SelectInstance',
                             'caption' => 'SMTP module'],
                         [
                             'type'    => 'Label',
                             'caption' => 'Notification email address'],
                         [
                             'name'    => 'email3',
                             'type'    => 'ValidationTextBox',
                             'caption' => 'email'],
                         [
                             'type'    => 'Label',
                             'caption' => 'Email subject'],
                         [
                             'name'    => 'subject3',
                             'type'    => 'ValidationTextBox',
                             'caption' => 'subject'],
                         [
                             'type'    => 'Label',
                             'caption' => 'Email text'],
                         [
                             'name'    => 'emailtext3',
                             'type'    => 'ValidationTextBox',
                             'caption' => 'Email text'],
                         [
                             'name'    => 'activeemail4',
                             'type'    => 'CheckBox',
                             'caption' => 'Active email 4']]
            );
        }
        if ($activeemail4) {
            $form = array_merge_recursive(
                $form, [
                         [
                             'name'    => 'smtpmodule4',
                             'type'    => 'SelectInstance',
                             'caption' => 'SMTP module'],
                         [
                             'type'    => 'Label',
                             'caption' => 'Notification email address'],
                         [
                             'name'    => 'email4',
                             'type'    => 'ValidationTextBox',
                             'caption' => 'email'],
                         [
                             'type'    => 'Label',
                             'caption' => 'Email subject'],
                         [
                             'name'    => 'subject4',
                             'type'    => 'ValidationTextBox',
                             'caption' => 'subject'],
                         [
                             'type'    => 'Label',
                             'caption' => 'Email text'],
                         [
                             'name'    => 'emailtext4',
                             'type'    => 'ValidationTextBox',
                             'caption' => 'Email text'],
                         [
                             'name'    => 'activeemail5',
                             'type'    => 'CheckBox',
                             'caption' => 'Active email 5']]
            );
        }
        if ($activeemail5) {
            $form = array_merge_recursive(
                $form, [
                         [
                             'name'    => 'smtpmodule5',
                             'type'    => 'SelectInstance',
                             'caption' => 'SMTP module'],
                         [
                             'type'    => 'Label',
                             'caption' => 'Notification email address'],
                         [
                             'name'    => 'email5',
                             'type'    => 'ValidationTextBox',
                             'caption' => 'email'],
                         [
                             'type'    => 'Label',
                             'caption' => 'Email subject'],
                         [
                             'name'    => 'subject5',
                             'type'    => 'ValidationTextBox',
                             'caption' => 'subject'],
                         [
                             'type'    => 'Label',
                             'caption' => 'Email text'],
                         [
                             'name'    => 'emailtext5',
                             'type'    => 'ValidationTextBox',
                             'caption' => 'Email text'],
                         [
                             'name'    => 'activeemail6',
                             'type'    => 'CheckBox',
                             'caption' => 'Active email 6']]
            );
        }
        if ($activeemail6) {
            $form = array_merge_recursive(
                $form, [
                         [
                             'name'    => 'smtpmodule6',
                             'type'    => 'SelectInstance',
                             'caption' => 'SMTP module'],
                         [
                             'type'    => 'Label',
                             'caption' => 'Notification email address'],
                         [
                             'name'    => 'email6',
                             'type'    => 'ValidationTextBox',
                             'caption' => 'email'],
                         [
                             'type'    => 'Label',
                             'caption' => 'Email subject'],
                         [
                             'name'    => 'subject6',
                             'type'    => 'ValidationTextBox',
                             'caption' => 'subject'],
                         [
                             'type'    => 'Label',
                             'caption' => 'Email text'],
                         [
                             'name'    => 'emailtext6',
                             'type'    => 'ValidationTextBox',
                             'caption' => 'Email text'],
                         [
                             'name'    => 'activeemail7',
                             'type'    => 'CheckBox',
                             'caption' => 'Active email 7']]
            );
        }
        if ($activeemail7) {
            $form = array_merge_recursive(
                $form, [
                         [
                             'name'    => 'smtpmodule7',
                             'type'    => 'SelectInstance',
                             'caption' => 'SMTP module'],
                         [
                             'type'    => 'Label',
                             'caption' => 'Notification email address'],
                         [
                             'name'    => 'email7',
                             'type'    => 'ValidationTextBox',
                             'caption' => 'email'],
                         [
                             'type'    => 'Label',
                             'caption' => 'Email subject'],
                         [
                             'name'    => 'subject7',
                             'type'    => 'ValidationTextBox',
                             'caption' => 'subject'],
                         [
                             'type'    => 'Label',
                             'caption' => 'Email text'],
                         [
                             'name'    => 'emailtext7',
                             'type'    => 'ValidationTextBox',
                             'caption' => 'Email text'],
                         [
                             'name'    => 'activeemail8',
                             'type'    => 'CheckBox',
                             'caption' => 'Active email 8']]
            );
        }
        if ($activeemail8) {
            $form = array_merge_recursive(
                $form, [
                         [
                             'name'    => 'smtpmodule8',
                             'type'    => 'SelectInstance',
                             'caption' => 'SMTP module'],
                         [
                             'type'    => 'Label',
                             'caption' => 'Notification email address'],
                         [
                             'name'    => 'email8',
                             'type'    => 'ValidationTextBox',
                             'caption' => 'email'],
                         [
                             'type'    => 'Label',
                             'caption' => 'Email subject'],
                         [
                             'name'    => 'subject8',
                             'type'    => 'ValidationTextBox',
                             'caption' => 'subject'],
                         [
                             'type'    => 'Label',
                             'caption' => 'Email text'],
                         [
                             'name'    => 'emailtext8',
                             'type'    => 'ValidationTextBox',
                             'caption' => 'Email text'],
                         [
                             'name'    => 'activeemail9',
                             'type'    => 'CheckBox',
                             'caption' => 'Active email 9']]
            );
        }
        if ($activeemail9) {
            $form = array_merge_recursive(
                $form, [
                         [
                             'name'    => 'smtpmodule9',
                             'type'    => 'SelectInstance',
                             'caption' => 'SMTP module'],
                         [
                             'type'    => 'Label',
                             'caption' => 'Notification email address'],
                         [
                             'name'    => 'email9',
                             'type'    => 'ValidationTextBox',
                             'caption' => 'email'],
                         [
                             'type'    => 'Label',
                             'caption' => 'Email subject'],
                         [
                             'name'    => 'subject9',
                             'type'    => 'ValidationTextBox',
                             'caption' => 'subject'],
                         [
                             'type'    => 'Label',
                             'caption' => 'Email text'],
                         [
                             'name'    => 'emailtext9',
                             'type'    => 'ValidationTextBox',
                             'caption' => 'Email text'],
                         [
                             'name'    => 'activeemail10',
                             'type'    => 'CheckBox',
                             'caption' => 'Active email 10']]
            );
        }
        if ($activeemail10) {
            $form = array_merge_recursive(
                $form, [
                         [
                             'name'    => 'smtpmodule10',
                             'type'    => 'SelectInstance',
                             'caption' => 'SMTP module'],
                         [
                             'type'    => 'Label',
                             'caption' => 'Notification email address'],
                         [
                             'name'    => 'email10',
                             'type'    => 'ValidationTextBox',
                             'caption' => 'email'],
                         [
                             'type'    => 'Label',
                             'caption' => 'Email subject'],
                         [
                             'name'    => 'subject10',
                             'type'    => 'ValidationTextBox',
                             'caption' => 'subject'],
                         [
                             'type'    => 'Label',
                             'caption' => 'Email text'],
                         [
                             'name'    => 'emailtext10',
                             'type'    => 'ValidationTextBox',
                             'caption' => 'Email text'],
                         [
                             'name'    => 'activeemail11',
                             'type'    => 'CheckBox',
                             'caption' => 'Active email 11']]
            );
        }
        if ($activeemail11) {
            $form = array_merge_recursive(
                $form, [
                         [
                             'name'    => 'smtpmodule11',
                             'type'    => 'SelectInstance',
                             'caption' => 'SMTP module'],
                         [
                             'type'    => 'Label',
                             'caption' => 'Notification email address'],
                         [
                             'name'    => 'email11',
                             'type'    => 'ValidationTextBox',
                             'caption' => 'email'],
                         [
                             'type'    => 'Label',
                             'caption' => 'Email subject'],
                         [
                             'name'    => 'subject11',
                             'type'    => 'ValidationTextBox',
                             'caption' => 'subject'],
                         [
                             'type'    => 'Label',
                             'caption' => 'Email text'],
                         [
                             'name'    => 'emailtext11',
                             'type'    => 'ValidationTextBox',
                             'caption' => 'Email text']]
            );
        }
        return $form;
    }

    protected function FormShowINSTAREmail()
    {
        $form = [
            [
                'type'    => 'Label',
                'caption' => 'settings'],
            // TODO Add Form Email Settings
            [
                'type'    => 'Label',
                'caption' => 'recipient'],// TODO Add Form Email recipient
        ];
        return $form;
    }

    protected function FormShowFTP()
    {
        $form = [
            [
                'type'    => 'RowLayout',
                'visible' => true,
                'items'   => [
                    [
                        'type'     => 'ValidationTextBox',
                        'name'     => 'ft_server',
                        'visible'  => true,
                        'caption'  => 'FTP Server',
                        'value'    => $this->ReadAttributeString('ft_server'),
                        'onChange' => 'INSTAR_SetFTPParameter($id, $ft_server, $ft_port, $ft_username, $ft_password, $ft_mode, $ft_dirname, $ft_dirmode, $ft_ssl);'],
                    [
                        'name'     => 'ft_server_enabled',
                        'type'     => 'CheckBox',
                        'caption'  => 'Create Variable for Webfront',
                        'visible'  => true,
                        'value'    => $this->ReadAttributeBoolean('ft_server_enabled'),
                        'onChange' => 'INSTAR_SetWebFrontVariable($id, "ft_server_enabled", $ft_server_enabled);'],]],
            [
                'type'    => 'RowLayout',
                'visible' => true,
                'items'   => [
                    [
                        'type'    => 'NumberSpinner',
                        'name'    => 'ft_port',
                        'caption' => 'FTP port',
                        'visible' => true,
                        'value'   => $this->ReadAttributeInteger('ft_port'),
                        'onClick' => 'INSTAR_SetFTPParameter($id, $ft_server, $ft_port, $ft_username, $ft_password, $ft_mode, $ft_dirname, $ft_dirmode, $ft_ssl);'],
                    [
                        'name'     => 'ft_port_enabled',
                        'type'     => 'CheckBox',
                        'caption'  => 'Create Variable for Webfront',
                        'visible'  => true,
                        'value'    => $this->ReadAttributeBoolean('ft_port_enabled'),
                        'onChange' => 'INSTAR_SetWebFrontVariable($id, "ft_port_enabled", $ft_port_enabled);'],]],
            [
                'type'    => 'RowLayout',
                'visible' => true,
                'items'   => [
                    [
                        'type'     => 'ValidationTextBox',
                        'name'     => 'ft_username',
                        'visible'  => true,
                        'caption'  => 'FTP User Name',
                        'value'    => $this->ReadAttributeString('ft_username'),
                        'onChange' => 'INSTAR_SetFTPParameter($id, $ft_server, $ft_port, $ft_username, $ft_password, $ft_mode, $ft_dirname, $ft_dirmode, $ft_ssl);'],
                    [
                        'name'     => 'ft_username_enabled',
                        'type'     => 'CheckBox',
                        'caption'  => 'Create Variable for Webfront',
                        'visible'  => true,
                        'value'    => $this->ReadAttributeBoolean('ft_username_enabled'),
                        'onChange' => 'INSTAR_SetWebFrontVariable($id, "ft_username_enabled", $ft_username_enabled);'],]],
            [
                'type'    => 'RowLayout',
                'visible' => true,
                'items'   => [
                    [
                        'type'     => 'ValidationTextBox',
                        'name'     => 'ft_password',
                        'visible'  => true,
                        'caption'  => 'FTP User Password',
                        'value'    => $this->ReadAttributeString('ft_password'),
                        'onChange' => 'INSTAR_SetFTPParameter($id, $ft_server, $ft_port, $ft_username, $ft_password, $ft_mode, $ft_dirname, $ft_dirmode, $ft_ssl);'],
                    [
                        'name'     => 'ft_password_enabled',
                        'type'     => 'CheckBox',
                        'caption'  => 'Create Variable for Webfront',
                        'visible'  => true,
                        'value'    => $this->ReadAttributeBoolean('ft_password_enabled'),
                        'onChange' => 'INSTAR_SetWebFrontVariable($id, "ft_password_enabled", $ft_password_enabled);'],]],
            [
                'type'    => 'RowLayout',
                'visible' => true,
                'items'   => [
                    [
                        'type'     => 'Select',
                        'name'     => 'ft_mode',
                        'caption'  => 'FTP Mode',
                        'options'  => [
                            [
                                'caption' => 'PASV',
                                'value'   => 0],
                            [
                                'caption' => 'Port',
                                'value'   => 1],],
                        'visible'  => true,
                        'value'    => $this->ReadAttributeInteger('ft_mode'),
                        'onChange' => 'INSTAR_SetFTPParameter($id, $ft_server, $ft_port, $ft_username, $ft_password, $ft_mode, $ft_dirname, $ft_dirmode, $ft_ssl);'

                    ],
                    [
                        'name'     => 'ft_mode_enabled',
                        'type'     => 'CheckBox',
                        'caption'  => 'Create Variable for Webfront',
                        'visible'  => true,
                        'value'    => $this->ReadAttributeBoolean('ft_mode_enabled'),
                        'onChange' => 'INSTAR_SetWebFrontVariable($id, "ft_mode_enabled", $ft_mode_enabled);'],]],
            [
                'type'    => 'RowLayout',
                'visible' => true,
                'items'   => [
                    [
                        'type'     => 'ValidationTextBox',
                        'name'     => 'ft_dirname',
                        'visible'  => true,
                        'caption'  => 'FTP Directory',
                        'value'    => $this->ReadAttributeString('ft_dirname'),
                        'onChange' => 'INSTAR_SetFTPParameter($id, $ft_server, $ft_port, $ft_username, $ft_password, $ft_mode, $ft_dirname, $ft_dirmode, $ft_ssl);'],
                    [
                        'name'     => 'ft_dirname_enabled',
                        'type'     => 'CheckBox',
                        'caption'  => 'Create Variable for Webfront',
                        'visible'  => true,
                        'value'    => $this->ReadAttributeBoolean('ft_dirname_enabled'),
                        'onChange' => 'INSTAR_SetWebFrontVariable($id, "ft_dirname_enabled", $ft_dirname_enabled);'],]],
            [
                'type'    => 'RowLayout',
                'visible' => true,
                'items'   => [
                    [
                        'type'     => 'Select',
                        'name'     => 'ft_dirmode',
                        'caption'  => 'FTP Directory Mode',
                        'options'  => [
                            [
                                'caption' => 'sort by day',
                                'value'   => 0],
                            [
                                'caption' => 'one folder',
                                'value'   => 1],],
                        'visible'  => true,
                        'value'    => $this->ReadAttributeInteger('ft_dirmode'),
                        'onChange' => 'INSTAR_SetFTPParameter($id, $ft_server, $ft_port, $ft_username, $ft_password, $ft_mode, $ft_dirname, $ft_dirmode, $ft_ssl);'

                    ],
                    [
                        'name'     => 'ft_dirmode_enabled',
                        'type'     => 'CheckBox',
                        'caption'  => 'Create Variable for Webfront',
                        'visible'  => true,
                        'value'    => $this->ReadAttributeBoolean('ft_dirmode_enabled'),
                        'onChange' => 'INSTAR_SetWebFrontVariable($id, "ft_dirmode_enabled", $ft_dirmode_enabled);'],]],
            [
                'type'    => 'RowLayout',
                'visible' => true,
                'items'   => [
                    [
                        'type'     => 'Select',
                        'name'     => 'ft_ssl',
                        'caption'  => 'FTP SSL',
                        'options'  => [
                            [
                                'caption' => $this->Translate('no encrytion'),
                                'value'   => 0],
                            [
                                'caption' => 'SSL',
                                'value'   => 1],
                            [
                                'caption' => 'TLS',
                                'value'   => 1],],
                        'visible'  => true,
                        'value'    => $this->ReadAttributeInteger('ft_ssl'),
                        'onChange' => 'INSTAR_SetFTPParameter($id, $ft_server, $ft_port, $ft_username, $ft_password, $ft_mode, $ft_dirname, $ft_dirmode, $ft_ssl);'

                    ],
                    [
                        'name'     => 'ft_ssl_enabled',
                        'type'     => 'CheckBox',
                        'caption'  => 'Create Variable for Webfront',
                        'visible'  => true,
                        'value'    => $this->ReadAttributeBoolean('ft_ssl_enabled'),
                        'onChange' => 'INSTAR_SetWebFrontVariable($id, "ft_ssl_enabled", $ft_ssl_enabled);'],]],
            [
                'type'    => 'Label',
                'visible' => true,
                'caption' => 'Set FTP infos for the camera'],
            [
                'type'    => 'Button',
                'visible' => true,
                'caption' => 'Set FTP infos',
                'onClick' => 'INSTAR_SetFTPParameter($id, $ft_server, $ft_port, $ft_username, $ft_password, $ft_mode, $ft_dirname, $ft_dirmode, $ft_ssl);'],/*
             * [
                'type'    => 'RowLayout',
                'visible' => true,
                'items'   => [
                    [
                        'type'    => 'Select',
                        'name'    => 'ft_autocreatedir',
                        'caption' => 'Auto_Create_Directory',
                        'options' => [
                            [
                                'caption' => 'PASV',
                                'value'   => 0],
                            [
                                'caption' => 'Port',
                                'value'   => 1],],
                        'visible' => true,
                        'value'   => $this->ReadAttributeInteger('ft_autocreatedir'),
                        'onChange' => 'INSTAR_SetOutputVolume($id, $ao_volume);'

                    ],
                    [
                        'name'     => 'ft_autocreatedir_enabled',
                        'type'     => 'CheckBox',
                        'caption'  => 'Create Variable for Webfront',
                        'visible'  => true,
                        'value'    => $this->ReadAttributeBoolean('ft_autocreatedir_enabled'),
                        'onChange' => 'INSTAR_SetWebFrontVariable($id, "ft_autocreatedir_enabled", $ft_autocreatedir_enabled);'],]],
             */];
        return $form;
    }

    protected function FormShowIR_night_vision()
    {
        $form = [
            [
                'type'    => 'Label',
                'caption' => 'select here the behavior of the ir-led'],
            [
                'type'    => 'RowLayout',
                'visible' => true,
                'items'   => [
                    [
                        'type'     => 'Select',
                        'name'     => 'infraredstat_form',
                        'caption'  => 'IR LED control',
                        'options'  => [
                            [
                                'caption' => $this->Translate('auto'),
                                'value'   => 0],
                            [
                                'caption' => $this->Translate('close'),
                                'value'   => 2],],
                        'visible'  => true,
                        'value'    => $this->ReadAttributeInteger('infraredstat_form'),
                        'onChange' => 'INSTAR_SetIRLED($id, $infraredstat_form);'

                    ],
                    [
                        'name'     => 'infraredstat_form_enabled',
                        'type'     => 'CheckBox',
                        'caption'  => 'Create Variable for Webfront',
                        'visible'  => true,
                        'value'    => $this->ReadAttributeBoolean('infraredstat_enabled'),
                        'onChange' => 'INSTAR_SetWebFrontVariable($id, "infraredstat_enabled", $infraredstat_form_enabled);'],]],
            [
                'type'    => 'RowLayout',
                'visible' => false,
                'items'   => [
                    [
                        'type'     => 'Select',
                        'name'     => 'infraredcut_form',
                        'caption'  => 'IR CUT filter',
                        'options'  => [
                            [
                                'caption' => $this->Translate('Auto'),
                                'value'   => 0],
                            [
                                'caption' => $this->Translate('Daymode'),
                                'value'   => 1],
                            [
                                'caption' => $this->Translate('Nightmode'),
                                'value'   => 2]],
                        'visible'  => true,
                        'value'    => $this->ReadAttributeInteger('infraredcut_form'),
                        'onChange' => 'INSTAR_SetIRCut($id, $infraredcut_form);'

                    ],
                    [
                        'name'     => 'infraredcut_form__enabled',
                        'type'     => 'CheckBox',
                        'caption'  => 'Create Variable for Webfront',
                        'visible'  => true,
                        'value'    => $this->ReadAttributeBoolean('infraredcut_form_enabled'),
                        'onChange' => 'INSTAR_SetWebFrontVariable($id, "infraredcut_form_enabled", $infraredcut_form_enabled);'],]],
        ];
        return $form;
    }

    public function EnableStartPosition(bool $start_position_activate_action)
    {
        $this->WriteAttributeInteger('start_position_activate_action', intval($start_position_activate_action));
    }

    public function EnableAlarmPosition(bool $md_preset_switch)
    {
        if ($md_preset_switch) {
            $this->WriteAttributeString('md_preset_switch', 'on');
        } else {
            $this->WriteAttributeString('md_preset_switch', 'off');
        }
        $this->SetStateAlarmPosition();
    }

    public function SetStartPosition(int $start_position_select_action)
    {
        $this->WriteAttributeInteger('start_position_select_action', $start_position_select_action);
    }

    public function SetAlarmPosition(int $md_preset_switch_position)
    {
        // TODO Set Position
        $this->WriteAttributeInteger('md_preset_switch_position', $md_preset_switch_position);
    }

    public function EnableParkPosition(bool $timerpreset_enable)
    {
        $this->WriteAttributeInteger('timerpreset_enable', intval($timerpreset_enable));
        $this->SetParkPositionParameter();
    }

    public function SetParkPosition(int $timerpreset_index)
    {
        $this->WriteAttributeInteger('timerpreset_index)', $timerpreset_index);
        $this->SetParkPositionParameter();
    }

    public function EnableTourParkPosition(bool $tour_parkposition)
    {
        $this->WriteAttributeInteger('tour_parkposition', intval($tour_parkposition));
    }

    public function EnableStepbyStepControl(bool $admin_value46)
    {
        $this->WriteAttributeInteger('admin_value46', intval($admin_value46));
        $this->SetOneStepPanTiltControl();
    }

    protected function FormShowPan_Tilt()
    {
        $form = [
            [
                'type'    => 'RowLayout',
                'visible' => true,
                'items'   => [
                    [
                        'type'     => 'CheckBox',
                        'name'     => 'start_position_activate_action',
                        'visible'  => true,
                        'caption'  => 'Start position / activate action',
                        'value'    => boolval($this->ReadAttributeInteger('start_position_activate_action')),
                        'onChange' => 'INSTAR_EnableStartPosition($id, $start_position_activate_action);'],
                    [
                        'name'     => 'start_position_activate_action_enabled',
                        'type'     => 'CheckBox',
                        'caption'  => 'Create Variable for Webfront',
                        'visible'  => true,
                        'value'    => $this->ReadAttributeBoolean('start_position_activate_action_enabled'),
                        'onChange' => 'INSTAR_SetWebFrontVariable($id, "start_position_activate_action_enabled", $start_position_activate_action_enabled);'],]],
            [
                'type'    => 'RowLayout',
                'visible' => true,
                'items'   => [
                    [
                        'type'     => 'Select',
                        'name'     => 'start_position_select_action',
                        'caption'  => 'Start position / select action',
                        'options'  => [
                            [
                                'caption' => $this->Translate('Position 1'),
                                'value'   => self::POSITION_1],
                            [
                                'caption' => $this->Translate('Position 2'),
                                'value'   => self::POSITION_2],
                            [
                                'caption' => $this->Translate('Position 3'),
                                'value'   => self::POSITION_3],
                            [
                                'caption' => $this->Translate('Position 4'),
                                'value'   => self::POSITION_4],
                            [
                                'caption' => $this->Translate('Position 5'),
                                'value'   => self::POSITION_5],
                            [
                                'caption' => $this->Translate('Position 6'),
                                'value'   => self::POSITION_6],
                            [
                                'caption' => $this->Translate('Position 7'),
                                'value'   => self::POSITION_7],
                            [
                                'caption' => $this->Translate('Position 8'),
                                'value'   => self::POSITION_8],],
                        'visible'  => true,
                        'value'    => $this->ReadAttributeInteger('start_position_select_action'),
                        'onChange' => 'INSTAR_SetStartPosition($id, $start_position_select_action);'

                    ],
                    [
                        'name'     => 'start_position_select_action_enabled',
                        'type'     => 'CheckBox',
                        'caption'  => 'Create Variable for Webfront',
                        'visible'  => true,
                        'value'    => $this->ReadAttributeBoolean('start_position_select_action_enabled'),
                        'onChange' => 'INSTAR_SetWebFrontVariable($id, "start_position_select_action_enabled", $start_position_select_action_enabled);'],]],
            [
                'type'    => 'RowLayout',
                'visible' => true,
                'items'   => [
                    [
                        'type'     => 'CheckBox',
                        'name'     => 'md_preset_switch',
                        'visible'  => true,
                        'caption'  => 'Activate alarm position',
                        'value'    => $this->ReadAttributeString('md_preset_switch'),
                        'onChange' => 'INSTAR_EnableAlarmPosition($id, $md_preset_switch);'],
                    [
                        'name'     => 'md_preset_switch_enabled',
                        'type'     => 'CheckBox',
                        'caption'  => 'Create Variable for Webfront',
                        'visible'  => true,
                        'value'    => $this->ReadAttributeBoolean('md_preset_switch_enabled'),
                        'onChange' => 'INSTAR_SetWebFrontVariable($id, "md_preset_switch_enabled", $md_preset_switch_enabled);'],]],
            [
                'type'    => 'RowLayout',
                'visible' => true,
                'items'   => [
                    [
                        'type'     => 'Select',
                        'name'     => 'md_preset_switch_position',
                        'caption'  => 'Select alarm position',
                        'options'  => [
                            [
                                'caption' => $this->Translate('Position 1'),
                                'value'   => self::POSITION_1],
                            [
                                'caption' => $this->Translate('Position 2'),
                                'value'   => self::POSITION_2],
                            [
                                'caption' => $this->Translate('Position 3'),
                                'value'   => self::POSITION_3],
                            [
                                'caption' => $this->Translate('Position 4'),
                                'value'   => self::POSITION_4],
                            [
                                'caption' => $this->Translate('Position 5'),
                                'value'   => self::POSITION_5],
                            [
                                'caption' => $this->Translate('Position 6'),
                                'value'   => self::POSITION_6],
                            [
                                'caption' => $this->Translate('Position 7'),
                                'value'   => self::POSITION_7],
                            [
                                'caption' => $this->Translate('Position 8'),
                                'value'   => self::POSITION_8],],
                        'visible'  => true,
                        'value'    => $this->ReadAttributeInteger('md_preset_switch_position'),
                        'onChange' => 'INSTAR_SetAlarmPosition($id, $md_preset_switch_position);'

                    ],
                    [
                        'name'     => 'md_preset_switch_position_enabled',
                        'type'     => 'CheckBox',
                        'caption'  => 'Create Variable for Webfront',
                        'visible'  => true,
                        'value'    => $this->ReadAttributeBoolean('md_preset_switch_position_enabled'),
                        'onChange' => 'INSTAR_SetWebFrontVariable($id, "md_preset_switch_position_enabled", $md_preset_switch_position_enabled);'],]],
            [
                'type'    => 'RowLayout',
                'visible' => true,
                'items'   => [
                    [
                        'type'     => 'CheckBox',
                        'name'     => 'timerpreset_enable',
                        'visible'  => true,
                        'caption'  => 'Park function (active after 120 sec)',
                        'value'    => boolval($this->ReadAttributeInteger('timerpreset_enable')),
                        'onChange' => 'INSTAR_EnableParkPosition($id, $timerpreset_enable);'],
                    [
                        'name'     => 'timerpreset_enable_enabled',
                        'type'     => 'CheckBox',
                        'caption'  => 'Create Variable for Webfront',
                        'visible'  => true,
                        'value'    => $this->ReadAttributeBoolean('timerpreset_enable_enabled'),
                        'onChange' => 'INSTAR_SetWebFrontVariable($id, "timerpreset_enable_enabled", $timerpreset_enable_enabled);'],]],
            [
                'type'    => 'RowLayout',
                'visible' => true,
                'items'   => [
                    [
                        'type'     => 'Select',
                        'name'     => 'timerpreset_index',
                        'caption'  => 'Select park position',
                        'options'  => [
                            [
                                'caption' => $this->Translate('Position 1'),
                                'value'   => self::POSITION_1],
                            [
                                'caption' => $this->Translate('Position 2'),
                                'value'   => self::POSITION_2],
                            [
                                'caption' => $this->Translate('Position 3'),
                                'value'   => self::POSITION_3],
                            [
                                'caption' => $this->Translate('Position 4'),
                                'value'   => self::POSITION_4],
                            [
                                'caption' => $this->Translate('Position 5'),
                                'value'   => self::POSITION_5],
                            [
                                'caption' => $this->Translate('Position 6'),
                                'value'   => self::POSITION_6],
                            [
                                'caption' => $this->Translate('Position 7'),
                                'value'   => self::POSITION_7],
                            [
                                'caption' => $this->Translate('Position 8'),
                                'value'   => self::POSITION_8],],
                        'visible'  => true,
                        'value'    => $this->ReadAttributeInteger('timerpreset_index'),
                        'onChange' => 'INSTAR_SetParkPosition($id, $timerpreset_index);'

                    ],
                    [
                        'name'     => 'timerpreset_index_enabled',
                        'type'     => 'CheckBox',
                        'caption'  => 'Create Variable for Webfront',
                        'visible'  => true,
                        'value'    => $this->ReadAttributeBoolean('timerpreset_index_enabled'),
                        'onChange' => 'INSTAR_SetWebFrontVariable($id, "timerpreset_index_enabled", $timerpreset_index_enabled);'],]],
            [
                'type'    => 'RowLayout',
                'visible' => true,
                'items'   => [
                    [
                        'type'     => 'CheckBox',
                        'name'     => 'tour_parkposition',
                        'visible'  => true,
                        'caption'  => 'Use tour as parking position',
                        'value'    => boolval($this->ReadAttributeInteger('tour_parkposition')),
                        'onChange' => 'INSTAR_EnableTourParkPosition($id, $tour_parkposition);'],
                    [
                        'name'     => 'tour_parkposition_enabled',
                        'type'     => 'CheckBox',
                        'caption'  => 'Create Variable for Webfront',
                        'visible'  => true,
                        'value'    => $this->ReadAttributeBoolean('tour_parkposition_enabled'),
                        'onChange' => 'INSTAR_SetWebFrontVariable($id, "tour_parkposition_enabled", $tour_parkposition_enabled);'],]],
            [
                'type'    => 'RowLayout',
                'visible' => true,
                'items'   => [
                    [
                        'type'     => 'CheckBox',
                        'name'     => 'admin_value46',
                        'visible'  => true,
                        'caption'  => 'Activate step by step control',
                        'value'    => boolval($this->ReadAttributeInteger('admin_value46')),
                        'onChange' => 'INSTAR_EnableStepbyStepControl($id, $admin_value46);'],
                    [
                        'name'     => 'admin_value46_enabled',
                        'type'     => 'CheckBox',
                        'caption'  => 'Create Variable for Webfront',
                        'visible'  => true,
                        'value'    => $this->ReadAttributeBoolean('admin_value46_enabled'),
                        'onChange' => 'INSTAR_SetWebFrontVariable($id, "admin_value46_enabled", $admin_value46_enabled);'],]],];
        return $form;
    }

    public function SetPTZTourTime($ptz_tour_time)
    {
        $this->WriteAttributeInteger('ptz_tour_time', $ptz_tour_time);
    }

    protected function FormShowPTZ_tour()
    {
        $form = [
            [
                'type'    => 'Label',
                'caption' => 'The camera can move to successive positions'],
            [
                'type'    => 'RowLayout',
                'visible' => true,
                'items'   => [
                    [
                        'type'     => 'HorizontalSlider',
                        'name'     => 'ptz_tour_time',
                        'caption'  => 'Dwell time in seconds',
                        'minimum'  => 0,
                        'maximum'  => 255,
                        'value'    => $this->ReadAttributeInteger('ptz_tour_time'),
                        'onChange' => 'INSTAR_SetPTZTourTime($id, $ptz_tour_time);'],
                    [
                        'name'     => 'ptz_tour_time_enabled',
                        'type'     => 'CheckBox',
                        'caption'  => 'Create Variable for Webfront',
                        'visible'  => true,
                        'value'    => $this->ReadAttributeBoolean('ptz_tour_time_enabled'),
                        'onChange' => 'INSTAR_SetWebFrontVariable($id, "ptz_tour_time_enabled", $ptz_tour_time_enabled);'],]],];
        return $form;
    }

    protected function FormShowManual_record()
    {
        $form = [
            [
                'type'    => 'RowLayout',
                'visible' => true,
                'items'   => [
                    [
                        'type'     => 'HorizontalSlider',
                        'name'     => 'admin_value44',
                        'caption'  => 'duration of manual recordings',
                        'minimum'  => 0,
                        'maximum'  => 600,
                        'value'    => $this->ReadAttributeInteger('admin_value44'),
                        'onChange' => 'INSTAR_SetFileLengthManualRecordings($id, $admin_value44);'],
                    [
                        'name'     => 'admin_value44_enabled',
                        'type'     => 'CheckBox',
                        'caption'  => 'Create Variable for Webfront',
                        'visible'  => true,
                        'value'    => $this->ReadAttributeBoolean('admin_value44_enabled'),
                        'onChange' => 'INSTAR_SetWebFrontVariable($id, "admin_value44_enabled", $admin_value44_enabled);'],]],];
        return $form;
    }

    protected function FormShowSD_card()
    {
        $form = [
            [
                'type'    => 'Button',
                'caption' => 'Format SD Card',
                'onClick' => 'INSTAR_FormatSD_Card($id);'],
            [
                'type'    => 'Button',
                'caption' => 'Unmount SD Card',
                'onClick' => 'INSTAR_UnmountSD_Card($id);'],];
        return $form;
    }

    protected function FormShowStatus_LED()
    {
        $form = [];
        return $form;
    }

    protected function FormShowWizard()
    {
        $form = [];
        return $form;
    }

    protected function FormShowActions()
    {
        $form = [
            [
                'type'    => 'RowLayout',
                'visible' => true,
                'items'   => [
                    [
                        'name'    => 'pir_enable',
                        'type'    => 'CheckBox',
                        'visible'  => true,
                        'caption' => 'Enable PIR',
                        'value'    => boolval($this->ReadAttributeInteger('pir_enable')),
                        'onChange' => 'INSTAR_EnablePIR($id, $pir_enable);'],
                    [
                        'name'     => 'pir_enable_enabled',
                        'type'     => 'CheckBox',
                        'caption'  => 'Create Variable for Webfront',
                        'visible'  => true,
                        'value'    => $this->ReadAttributeBoolean('pir_enable_enabled'),
                        'onChange' => 'INSTAR_SetWebFrontVariable($id, "pir_enable_enabled", $pir_enable_enabled);']]]];
        return $form;
    }

    protected function FormShowAreas()
    {
        $form = [
            [
                'type'    => 'Label',
                'caption' => 'Zone 1'],
            [
                'type'    => 'RowLayout',
                'visible' => true,
                'items'   => [
                    [
                        'type'     => 'CheckBox',
                        'name'     => 'm1_enable',
                        'visible'  => true,
                        'caption'  => 'Zone 1',
                        'value'    => boolval($this->ReadAttributeInteger('m1_enable')),
                        'onChange' => 'INSTAR_SetAlarmZone1($id, $m1_enable);'],
                    [
                        'name'     => 'm1_enable_enabled',
                        'type'     => 'CheckBox',
                        'caption'  => 'Create Variable for Webfront',
                        'visible'  => true,
                        'value'    => $this->ReadAttributeBoolean('m1_enable_enabled'),
                        'onChange' => 'INSTAR_SetWebFrontVariable($id, "m1_enable_enabled", $m1_enable_enabled);'],]],
            [
                'type'    => 'RowLayout',
                'visible' => true,
                'items'   => [
                    [
                        'type'     => 'HorizontalSlider',
                        'name'     => 'm1_x',
                        'caption'  => 'X',
                        'minimum'  => 0,
                        'maximum'  => 100,
                        'value'    => intval(round($this->ReadAttributeInteger('m1_x')/1.92)),
                        'onChange' => 'INSTAR_SetAlarmZone1ParametersForm($id, $m1_x, $m1_y, $m1_w, $m1_h);'],
                    [
                        'type'     => 'HorizontalSlider',
                        'name'     => 'm1_y',
                        'caption'  => 'Y',
                        'minimum'  => 0,
                        'maximum'  => 100,
                        'value'    => intval(round($this->ReadAttributeInteger('m1_y')/1.08)),
                        'onChange' => 'INSTAR_SetAlarmZone1ParametersForm($id, $m1_x, $m1_y, $m1_w, $m1_h);'],]],
            [
                'type'    => 'RowLayout',
                'visible' => true,
                'items'   => [
                    [
                        'type'     => 'HorizontalSlider',
                        'name'     => 'm1_w',
                        'caption'  => 'W',
                        'minimum'  => 0,
                        'maximum'  => 100,
                        'value'    => intval(round($this->ReadAttributeInteger('m1_w')/1.92)),
                        'onChange' => 'INSTAR_SetAlarmZone1ParametersForm($id, $m1_x, $m1_y, $m1_w, $m1_h);'],
                    [
                        'type'     => 'HorizontalSlider',
                        'name'     => 'm1_h',
                        'caption'  => 'H',
                        'minimum'  => 0,
                        'maximum'  => 100,
                        'value'    => intval(round($this->ReadAttributeInteger('m1_h')/1.08)),
                        'onChange' => 'INSTAR_SetAlarmZone1ParametersForm($id, $m1_x, $m1_y, $m1_w, $m1_h);'],]],
            [
                'type'    => 'RowLayout',
                'visible' => true,
                'items'   => [
                    [
                        'type'     => 'HorizontalSlider',
                        'name'     => 'm1_sensitivity',
                        'caption'  => 'Sensitivity',
                        'minimum'  => 0,
                        'maximum'  => 100,
                        'value'    => $this->ReadAttributeInteger('m1_sensitivity'),
                        'onChange' => 'INSTAR_SetAlarmZone1Senitivity($id, $m1_sensitivity);'],
                    [
                        'name'     => 'm1_sensitivity_enabled',
                        'type'     => 'CheckBox',
                        'caption'  => 'Create Variable for Webfront',
                        'visible'  => true,
                        'value'    => $this->ReadAttributeBoolean('m1_sensitivity_enabled'),
                        'onChange' => 'INSTAR_SetWebFrontVariable($id, "m1_sensitivity_enabled", $m1_sensitivity_enabled);'],]],
            [
                'type'    => 'Label',
                'caption' => 'Zone 2'],
            [
                'type'    => 'RowLayout',
                'visible' => true,
                'items'   => [
                    [
                        'type'     => 'CheckBox',
                        'name'     => 'm2_enable',
                        'visible'  => true,
                        'caption'  => 'Zone 2',
                        'value'    => boolval($this->ReadAttributeInteger('m2_enable')),
                        'onChange' => 'INSTAR_SetAlarmZone2($id, $m2_enable);'],
                    [
                        'name'     => 'm2_enable_enabled',
                        'type'     => 'CheckBox',
                        'caption'  => 'Create Variable for Webfront',
                        'visible'  => true,
                        'value'    => $this->ReadAttributeBoolean('m2_enable_enabled'),
                        'onChange' => 'INSTAR_SetWebFrontVariable($id, "m2_enable_enabled", $m2_enable_enabled);'],]],
            [
                'type'    => 'RowLayout',
                'visible' => true,
                'items'   => [
                    [
                        'type'     => 'HorizontalSlider',
                        'name'     => 'm2_x',
                        'caption'  => 'X',
                        'minimum'  => 0,
                        'maximum'  => 100,
                        'value'    => intval(round($this->ReadAttributeInteger('m2_x')/1.92)),
                        'onChange' => 'INSTAR_SetAlarmZone2ParametersForm($id, $m2_x, $m2_y, $m2_w, $m2_h);'],
                    [
                        'type'     => 'HorizontalSlider',
                        'name'     => 'm2_y',
                        'caption'  => 'Y',
                        'minimum'  => 0,
                        'maximum'  => 100,
                        'value'    => intval(round($this->ReadAttributeInteger('m2_y')/1.08)),
                        'onChange' => 'INSTAR_SetAlarmZone2ParametersForm($id, $m2_x, $m2_y, $m2_w, $m2_h);'],]],
            [
                'type'    => 'RowLayout',
                'visible' => true,
                'items'   => [
                    [
                        'type'     => 'HorizontalSlider',
                        'name'     => 'm2_w',
                        'caption'  => 'W',
                        'minimum'  => 0,
                        'maximum'  => 100,
                        'value'    => intval(round($this->ReadAttributeInteger('m2_w')/1.92)),
                        'onChange' => 'INSTAR_SetAlarmZone2ParametersForm($id, $m2_x, $m2_y, $m2_w, $m2_h);'],
                    [
                        'type'     => 'HorizontalSlider',
                        'name'     => 'm2_h',
                        'caption'  => 'H',
                        'minimum'  => 0,
                        'maximum'  => 100,
                        'value'    => intval(round($this->ReadAttributeInteger('m2_h')/1.08)),
                        'onChange' => 'INSTAR_SetAlarmZone2ParametersForm($id, $m2_x, $m2_y, $m2_w, $m2_h);'],]],
            [
                'type'    => 'RowLayout',
                'visible' => true,
                'items'   => [
                    [
                        'type'     => 'HorizontalSlider',
                        'name'     => 'm2_sensitivity',
                        'caption'  => 'Sensitivity',
                        'minimum'  => 0,
                        'maximum'  => 100,
                        'value'    => $this->ReadAttributeInteger('m2_sensitivity'),
                        'onChange' => 'INSTAR_SetAlarmZone2Senitivity($id, $m2_sensitivity);'],
                    [
                        'name'     => 'm2_sensitivity_enabled',
                        'type'     => 'CheckBox',
                        'caption'  => 'Create Variable for Webfront',
                        'visible'  => true,
                        'value'    => $this->ReadAttributeBoolean('m2_sensitivity_enabled'),
                        'onChange' => 'INSTAR_SetWebFrontVariable($id, "m2_sensitivity_enabled", $m2_sensitivity_enabled);'],]],
            [
                'type'    => 'Label',
                'caption' => 'Zone 3'],
            [
                'type'    => 'RowLayout',
                'visible' => true,
                'items'   => [
                    [
                        'type'     => 'CheckBox',
                        'name'     => 'm3_enable',
                        'visible'  => true,
                        'caption'  => 'Zone 3',
                        'value'    => boolval($this->ReadAttributeInteger('m3_enable')),
                        'onChange' => 'INSTAR_SetAlarmZone3($id, $m3_enable);'],
                    [
                        'name'     => 'm3_enable_enabled',
                        'type'     => 'CheckBox',
                        'caption'  => 'Create Variable for Webfront',
                        'visible'  => true,
                        'value'    => $this->ReadAttributeBoolean('m3_enable_enabled'),
                        'onChange' => 'INSTAR_SetWebFrontVariable($id, "m3_enable_enabled", $m3_enable_enabled);'],]],
            [
                'type'    => 'RowLayout',
                'visible' => true,
                'items'   => [
                    [
                        'type'     => 'HorizontalSlider',
                        'name'     => 'm3_x',
                        'caption'  => 'X',
                        'minimum'  => 0,
                        'maximum'  => 100,
                        'value'    => intval(round($this->ReadAttributeInteger('m3_x')/1.92)),
                        'onChange' => 'INSTAR_SetAlarmZone3ParametersForm($id, $m3_x, $m3_y, $m3_w, $m3_h);'],
                    [
                        'type'     => 'HorizontalSlider',
                        'name'     => 'm3_y',
                        'caption'  => 'Y',
                        'minimum'  => 0,
                        'maximum'  => 100,
                        'value'    => intval(round($this->ReadAttributeInteger('m3_y')/1.08)),
                        'onChange' => 'INSTAR_SetAlarmZone3ParametersForm($id, $m3_x, $m3_y, $m3_w, $m3_h);'],]],
            [
                'type'    => 'RowLayout',
                'visible' => true,
                'items'   => [
                    [
                        'type'     => 'HorizontalSlider',
                        'name'     => 'm3_w',
                        'caption'  => 'W',
                        'minimum'  => 0,
                        'maximum'  => 100,
                        'value'    => intval(round($this->ReadAttributeInteger('m3_w')/1.92)),
                        'onChange' => 'INSTAR_SetAlarmZone3ParametersForm($id, $m3_x, $m3_y, $m3_w, $m3_h);'],
                    [
                        'type'     => 'HorizontalSlider',
                        'name'     => 'm3_h',
                        'caption'  => 'H',
                        'minimum'  => 0,
                        'maximum'  => 100,
                        'value'    => intval(round($this->ReadAttributeInteger('m3_h')/1.08)),
                        'onChange' => 'INSTAR_SetAlarmZone3ParametersForm($id, $m3_x, $m3_y, $m3_w, $m3_h);'],]],
            [
                'type'    => 'RowLayout',
                'visible' => true,
                'items'   => [
                    [
                        'type'     => 'HorizontalSlider',
                        'name'     => 'm3_sensitivity',
                        'caption'  => 'Sensitivity',
                        'minimum'  => 0,
                        'maximum'  => 100,
                        'value'    => $this->ReadAttributeInteger('m3_sensitivity'),
                        'onChange' => 'INSTAR_SetAlarmZone3Senitivity($id, $m3_sensitivity);'],
                    [
                        'name'     => 'm3_sensitivity_enabled',
                        'type'     => 'CheckBox',
                        'caption'  => 'Create Variable for Webfront',
                        'visible'  => true,
                        'value'    => $this->ReadAttributeBoolean('m3_sensitivity_enabled'),
                        'onChange' => 'INSTAR_SetWebFrontVariable($id, "m3_sensitivity_enabled", $m3_sensitivity_enabled);'],]],
            [
                'type'    => 'Label',
                'caption' => 'Zone 4'],
            [
                'type'    => 'RowLayout',
                'visible' => true,
                'items'   => [
                    [
                        'type'     => 'CheckBox',
                        'name'     => 'm4_enable',
                        'visible'  => true,
                        'caption'  => 'Zone 4',
                        'value'    => boolval($this->ReadAttributeInteger('m4_enable')),
                        'onChange' => 'INSTAR_SetAlarmZone4($id, $m4_enable);'],
                    [
                        'name'     => 'm4_enable_enabled',
                        'type'     => 'CheckBox',
                        'caption'  => 'Create Variable for Webfront',
                        'visible'  => true,
                        'value'    => $this->ReadAttributeBoolean('m4_enable_enabled'),
                        'onChange' => 'INSTAR_SetWebFrontVariable($id, "m4_enable_enabled", $m4_enable_enabled);'],]],
            [
                'type'    => 'RowLayout',
                'visible' => true,
                'items'   => [
                    [
                        'type'     => 'HorizontalSlider',
                        'name'     => 'm4_x',
                        'caption'  => 'X',
                        'minimum'  => 1,
                        'maximum'  => 100,
                        'value'    => intval(round($this->ReadAttributeInteger('m4_x')/1.92)),
                        'onChange' => 'INSTAR_SetAlarmZone4ParametersForm($id, $m4_x, $m4_y, $m4_w, $m4_h);'],
                    [
                        'type'     => 'HorizontalSlider',
                        'name'     => 'm4_y',
                        'caption'  => 'Y',
                        'minimum'  => 0,
                        'maximum'  => 100,
                        'value'    => intval(round($this->ReadAttributeInteger('m4_y')/1.08)),
                        'onChange' => 'INSTAR_SetAlarmZone4ParametersForm($id, $m4_x, $m4_y, $m4_w, $m4_h);'],]],
            [
                'type'    => 'RowLayout',
                'visible' => true,
                'items'   => [
                    [
                        'type'     => 'HorizontalSlider',
                        'name'     => 'm4_w',
                        'caption'  => 'W',
                        'minimum'  => 0,
                        'maximum'  => 100,
                        'value'    => intval(round($this->ReadAttributeInteger('m4_w')/1.92)),
                        'onChange' => 'INSTAR_SetAlarmZone4ParametersForm($id, $m4_x, $m4_y, $m4_w, $m4_h);'],
                    [
                        'type'     => 'HorizontalSlider',
                        'name'     => 'm4_h',
                        'caption'  => 'H',
                        'minimum'  => 1,
                        'maximum'  => 100,
                        'value'    => intval(round($this->ReadAttributeInteger('m4_h')/1.08)),
                        'onChange' => 'INSTAR_SetAlarmZone4ParametersForm($id, $m4_x, $m4_y, $m4_w, $m4_h);'],]],
            [
                'type'    => 'RowLayout',
                'visible' => true,
                'items'   => [
                    [
                        'type'     => 'HorizontalSlider',
                        'name'     => 'm4_sensitivity',
                        'caption'  => 'Sensitivity',
                        'minimum'  => 0,
                        'maximum'  => 100,
                        'value'    => $this->ReadAttributeInteger('m4_sensitivity'),
                        'onChange' => 'INSTAR_SetAlarmZone4Senitivity($id, $m4_sensitivity);'],
                    [
                        'name'     => 'm4_sensitivity_enabled',
                        'type'     => 'CheckBox',
                        'caption'  => 'Create Variable for Webfront',
                        'visible'  => true,
                        'value'    => $this->ReadAttributeBoolean('m4_sensitivity_enabled'),
                        'onChange' => 'INSTAR_SetWebFrontVariable($id, "m4_sensitivity_enabled", $m4_sensitivity_enabled);'],]],];
        return $form;
    }

    protected function FormShowSchedule()
    {
        $form = [
            [
                'type'    => 'Label',
                'caption' => 'Set Schedule in INSTAR Camera'],];
        return $form;
    }

    protected function FormShowPush()
    {
        $form = [
            [
                'type'    => 'Label',
                'caption' => 'Set Push in INSTAR Camera'],];
        return $form;
    }

    /** Set Alarm Server
     *
     * @param int $alarmserver 0 IP-Symcon Connect , 1 local network
     */
    public function SetAlarmServer(int $alarmserver)
    {
        $this->SendDebug('Set Alarmserver', 'Selection ' . $alarmserver, 0);
        $this->WriteAttributeInteger('alarmserver', $alarmserver);
        if ($alarmserver == 0) {
            $this->SendDebug('Set Alarmserver', 'Selection IP-Symcon Connect', 0);
            $connectinfo = $this->GetConnectURL();
            $pos         = strpos($connectinfo, 'https://');
            if ($pos === 0) {
                $ip = str_replace('https://', '', $connectinfo);
            }
            $this->SendDebug('Set Alarmserver', 'Selection IP ' . $ip, 0);
            $port = 80;
            $this->SendDebug('Set Alarmserver', 'Selection Port ' . $port, 0);
        } else {
            $this->SendDebug('Set Alarmserver', 'Selection IP-Symcon local network', 0);
            $ip = $this->GetHostIP()[0];
            $this->SendDebug('Set Alarmserver', 'Selection IP ' . $ip, 0);
            $port = 3777;
            $this->SendDebug('Set Alarmserver', 'Selection Port ' . $port, 0);
        }
        $this->WriteAttributeString('as_server_2', $ip);
        $this->UpdateParameter('as_server_2', 'value', $ip);
        $this->WriteAttributeInteger('as_port_2', $port);
        $this->UpdateParameter('as_port_2', 'value', $port);
    }

    /** Alarmserver Setup
     *
     * @param int $alarmserver 0 IP-Symcon Connect, 1 IP-Symcon lokal
     */
    public function SetupAlarmServer(string $user, string $password, string $parameter_1_key, string $parameter_1_value, string $parameter_2_key,
                                     string $parameter_2_value, string $parameter_3_key, string $parameter_3_value)
    {
        $this->WriteAttributeString('as_username_2', $user);
        $this->WriteAttributeString('as_password_2', $password);
        $this->WriteAttributeString('as_queryattr1_2', $parameter_1_key);
        $this->WriteAttributeString('as_queryval1_2', $parameter_1_value);
        $this->WriteAttributeString('as_queryattr2_2', $parameter_2_key);
        $this->WriteAttributeString('as_queryval2_2', $parameter_2_value);
        $this->WriteAttributeString('as_queryattr3_2', $parameter_3_key);
        $this->WriteAttributeString('as_queryval3_2', $parameter_3_value);
        $data = $this->SetAlarmserver2Configuration();
        if ($data === false) {
            $this->ShowPopup('Could not connect to INSTAR camera');
        } else {
            $this->ShowPopup($data);
        }
        return $data;
    }

    public function ShowPopup(string $message)
    {
        $this->UpdateParameter('popup', 'visible', true);
        $this->UpdateParameter('popup_message', 'value', $message);
        $this->UpdateParameter('popup_message', 'visible', true);
    }

    public function ShowStartPopup()
    {
        $this->UpdateParameter('popup_start', 'visible', true);
    }

    public function SendQueryMotionDetected(bool $as_area)
    {
        if ($as_area) {
            $this->WriteAttributeInteger('as_area', 1);
        } else {
            $this->WriteAttributeInteger('as_area', 0);
        }
        $this->SetAlarmserver2Configuration();
    }

    public function SendQueryAlarmInputTriggered(bool $as_io)
    {
        if ($as_io) {
            $this->WriteAttributeInteger('as_io', 1);
        } else {
            $this->WriteAttributeInteger('as_io', 0);
        }
        $this->SetAlarmserver2Configuration();
    }

    public function SendQueryAudioAlarmTriggered(bool $as_audio)
    {
        if ($as_audio) {
            $this->WriteAttributeInteger('as_audio', 1);
        } else {
            $this->WriteAttributeInteger('as_audio', 0);
        }
        $this->SetAlarmserver2Configuration();
    }

    public function SendQueryMotionDetectedInputTriggered(bool $as_areaio)
    {
        if ($as_areaio) {
            $this->WriteAttributeInteger('as_areaio', 1);
        } else {
            $this->WriteAttributeInteger('as_areaio', 0);
        }
        $this->SetAlarmserver2Configuration();
    }

    private function GetAlarmServerPort()
    {
        $port = $this->ReadAttributeInteger('as_port_2');
        return $port;
    }

    private function GetAlarmServerAdress()
    {
        $ip = $this->ReadAttributeString('as_server_2');
        return $ip;
    }

    private function GetWebhook()
    {
        $hook = '/hook/INSTAR' . $this->InstanceID;
        $this->WriteAttributeString('as_path_2', $hook);
        return $hook;
    }

    protected function FormShowAlarmserver()
    {
        $form = [
            [
                'type'    => 'RowLayout',
                'visible' => true,
                'items'   => [
                    [
                        'type'     => 'Select',
                        'name'     => 'alarmserver',
                        'caption'  => 'Alarm Server',
                        'options'  => [
                            [
                                'caption' => 'Please choose connection',
                                'value'   => 0],
                            [
                                'caption' => 'IP-Symcon Connect',
                                'value'   => 1],
                            [
                                'caption' => 'IP-Symcon in local network',
                                'value'   => 2],],
                        'visible'  => true,
                        'value'    => $this->ReadAttributeInteger('alarmserver'),
                        'onChange' => 'INSTAR_SetAlarmServer($id, $alarmserver);',],
                    [
                        'name'     => 'alarmserver_enabled',
                        'type'     => 'CheckBox',
                        'caption'  => 'Create Variable for Webfront',
                        'visible'  => false,
                        'value'    => $this->ReadAttributeBoolean('alarmserver_enabled'),
                        'onChange' => 'INSTAR_SetWebFrontVariable($id, "alarmserver_enabled", $alarmserver_enabled);'],]],
            [
                'type'  => 'RowLayout',
                'items' => [
                    [
                        'type'    => 'ValidationTextBox',
                        'name'    => 'as_server_2',
                        'caption' => 'Alarm Server Address',
                        'visible' => true,
                        'value'   => $this->GetAlarmServerAdress(),
                        'onClick' => 'INSTAR_SetWebFrontVariable($id, "as_server_2", $as_server_2);'],
                    [
                        'name'     => 'as_server_2_enabled',
                        'type'     => 'CheckBox',
                        'caption'  => 'Create Variable for Webfront',
                        'visible'  => false,
                        'value'    => $this->ReadAttributeBoolean('as_server_2_enabled'),
                        'onChange' => 'INSTAR_SetWebFrontVariable($id, "as_server_2_enabled", $as_server_2_enabled);'],]],
            [
                'type'  => 'RowLayout',
                'items' => [
                    [
                        'type'    => 'NumberSpinner',
                        'name'    => 'as_port_2',
                        'caption' => 'Alarm Server Port',
                        'visible' => true,
                        'enabled' => false,
                        'value'   => $this->GetAlarmServerPort(),
                        'onClick' => 'INSTAR_SetWebFrontVariable($id, $name, $value);'],
                    [
                        'name'     => 'as_port_2_enabled',
                        'type'     => 'CheckBox',
                        'caption'  => 'Create Variable for Webfront',
                        'visible'  => false,
                        'value'    => $this->ReadAttributeBoolean('as_port_2_enabled'),
                        'onChange' => 'INSTAR_SetWebFrontVariable($id, "as_port_2_enabled", $as_port_2_enabled);'],]],
            [
                'type'  => 'RowLayout',
                'items' => [
                    [
                        'type'    => 'ValidationTextBox',
                        'name'    => 'as_path_2',
                        'caption' => 'server path',
                        'visible' => true,
                        'enabled' => false,
                        'value'   => $this->GetWebhook(),
                        'onClick' => 'INSTAR_SetWebFrontVariable($id, $name, $value);'],
                    [
                        'name'     => 'as_path_2_enabled',
                        'type'     => 'CheckBox',
                        'caption'  => 'Create Variable for Webfront',
                        'visible'  => false,
                        'value'    => $this->ReadAttributeBoolean('as_path_2_enabled'),
                        'onChange' => 'INSTAR_SetWebFrontVariable($id, "as_path_2_enabled", $as_path_2_enabled);'],]],
            [
                'type'    => 'RowLayout',
                'visible' => true,
                'items'   => [
                    [
                        'type'     => 'CheckBox',
                        'name'     => 'as_area',
                        'visible'  => true,
                        'caption'  => 'Send Query when Motion is Detected',
                        'value'    => boolval($this->ReadAttributeInteger('as_area')),
                        'onChange' => 'INSTAR_SendQueryMotionDetected($id, $as_area);'],
                    [
                        'name'     => 'as_area_enabled',
                        'type'     => 'CheckBox',
                        'caption'  => 'Create Variable for Webfront',
                        'visible'  => false,
                        'value'    => $this->ReadAttributeBoolean('as_area_enabled'),
                        'onChange' => 'INSTAR_SetWebFrontVariable($id, "as_area_enabled", $as_area_enabled);'],]],
            [
                'type'    => 'RowLayout',
                'visible' => true,
                'items'   => [
                    [
                        'type'     => 'CheckBox',
                        'name'     => 'as_io',
                        'visible'  => true,
                        'caption'  => 'Send Query when Alarm Input is Triggered',
                        'value'    => boolval($this->ReadAttributeInteger('as_io')),
                        'onChange' => 'INSTAR_SendQueryAlarmInputTriggered($id, $aec);'],
                    [
                        'name'     => 'as_io_enabled',
                        'type'     => 'CheckBox',
                        'caption'  => 'Create Variable for Webfront',
                        'visible'  => false,
                        'value'    => $this->ReadAttributeBoolean('as_io_enabled'),
                        'onChange' => 'INSTAR_SetWebFrontVariable($id, "as_io_enabled", $as_io_enabled);'],]],
            [
                'type'    => 'RowLayout',
                'visible' => true,
                'items'   => [
                    [
                        'type'     => 'CheckBox',
                        'name'     => 'as_audio',
                        'visible'  => true,
                        'caption'  => 'Send Query when Audio Alarm is Triggered',
                        'value'    => boolval($this->ReadAttributeInteger('as_audio')),
                        'onChange' => 'INSTAR_SendQueryAudioAlarmTriggered($id, $as_audio);'],
                    [
                        'name'     => 'as_audio_enabled',
                        'type'     => 'CheckBox',
                        'caption'  => 'Create Variable for Webfront',
                        'visible'  => false,
                        'value'    => $this->ReadAttributeBoolean('as_audio_enabled'),
                        'onChange' => 'INSTAR_SetWebFrontVariable($id, "as_audio_enabled", $as_audio_enabled);'],]],
            [
                'type'    => 'RowLayout',
                'visible' => true,
                'items'   => [
                    [
                        'type'     => 'CheckBox',
                        'name'     => 'as_areaio',
                        'visible'  => true,
                        'caption'  => 'Send Query when Motion is Detected and Input is Triggered',
                        'value'    => boolval($this->ReadAttributeInteger('as_areaio')),
                        'onChange' => 'INSTAR_SendQueryMotionDetectedInputTriggered($id, $as_areaio);'],
                    [
                        'name'     => 'as_areaio_enabled',
                        'type'     => 'CheckBox',
                        'caption'  => 'Create Variable for Webfront',
                        'visible'  => false,
                        'value'    => $this->ReadAttributeBoolean('as_areaio_enabled'),
                        'onChange' => 'INSTAR_SetWebFrontVariable($id, "as_areaio_enabled", $as_areaio_enabled);'],]],
            [
                // as_query1_2
                'name'    => 'parameter_1_label',
                'type'    => 'Label',
                'visible' => false,
                'caption' => 'Parameter 1 ( optional)'],
            [
                'type'    => 'RowLayout',
                'visible' => false,
                'items'   => [
                    [
                        'type'    => 'ValidationTextBox',
                        'name'    => 'as_queryattr1_2',
                        'caption' => 'Parameter 1 Key',
                        'visible' => true,
                        'value'   => $this->ReadAttributeString('as_queryattr1_2'),
                        'onClick' => 'INSTAR_SetupAlarmServer($id, $as_username_2, $as_password_2, $as_queryattr1_2, $as_queryval1_2, $as_queryattr2_2, $as_queryval2_2, $as_queryattr3_2, $as_queryval3_2);'],
                    [
                        'type'    => 'ValidationTextBox',
                        'name'    => 'as_queryval1_2',
                        'caption' => 'Parameter 1 Value',
                        'visible' => true,
                        'value'   => $this->ReadAttributeString('ip'),
                        'onClick' => 'INSTAR_SetupAlarmServer($id, $as_username_2, $as_password_2, $as_queryattr1_2, $as_queryval1_2, $as_queryattr2_2, $as_queryval2_2, $as_queryattr3_2, $as_queryval3_2);'],
                    [
                        'name'     => 'as_queryattr1_2_enabled',
                        'type'     => 'CheckBox',
                        'caption'  => 'Create Variable for Webfront',
                        'visible'  => false,
                        'value'    => $this->ReadAttributeBoolean('as_queryattr1_2_enabled'),
                        'onChange' => 'INSTAR_SetWebFrontVariable($id, "as_queryattr1_2_enabled", $as_queryattr1_2_enabled);'],]],
            [
                // as_query2_2
                'name'    => 'parameter_2_label',
                'type'    => 'Label',
                'visible' => false,
                'caption' => 'Parameter 2 ( optional)'],
            [
                'type'    => 'RowLayout',
                'visible' => false,
                'items'   => [
                    [
                        'type'    => 'ValidationTextBox',
                        'name'    => 'as_queryattr2_2',
                        'caption' => 'Parameter 2 Key',
                        'visible' => true,
                        'value'   => $this->ReadAttributeString('as_queryattr2_2'),
                        'onClick' => 'INSTAR_SetupAlarmServer($id, $as_username_2, $as_password_2, $as_queryattr1_2, $as_queryval1_2, $as_queryattr2_2, $as_queryval2_2, $as_queryattr3_2, $as_queryval3_2);'],
                    [
                        'type'    => 'ValidationTextBox',
                        'name'    => 'as_queryval2_2',
                        'caption' => 'Parameter 2 Value',
                        'visible' => true,
                        'value'   => $this->ReadAttributeString('as_queryval2_2'),
                        'onClick' => 'INSTAR_SetupAlarmServer($id, $as_username_2, $as_password_2, $as_queryattr1_2, $as_queryval1_2, $as_queryattr2_2, $as_queryval2_2, $as_queryattr3_2, $as_queryval3_2);'],
                    [
                        'name'     => 'as_queryattr2_2_enabled',
                        'type'     => 'CheckBox',
                        'caption'  => 'Create Variable for Webfront',
                        'visible'  => false,
                        'value'    => $this->ReadAttributeBoolean('as_queryattr2_2_enabled'),
                        'onChange' => 'INSTAR_SetWebFrontVariable($id, "as_queryattr2_2_enabled", $as_queryattr2_2_enabled);'],]],
            [
                // as_query3_2
                'name'    => 'parameter_3_label',
                'type'    => 'Label',
                'visible' => false,
                'caption' => 'Parameter 3 ( optional)'],
            [
                'type'    => 'RowLayout',
                'visible' => false,
                'items'   => [
                    [
                        'type'    => 'ValidationTextBox',
                        'name'    => 'as_queryattr3_2',
                        'caption' => 'Parameter 3 Key',
                        'visible' => true,
                        'value'   => $this->ReadAttributeString('as_queryattr3_2'),
                        'onClick' => 'INSTAR_SetupAlarmServer($id, $as_username_2, $as_password_2, $as_queryattr1_2, $as_queryval1_2, $as_queryattr2_2, $as_queryval2_2, $as_queryattr3_2, $as_queryval3_2);'],
                    [
                        'type'    => 'ValidationTextBox',
                        'name'    => 'as_queryval3_2',
                        'caption' => 'Parameter 3 Value',
                        'visible' => true,
                        'value'   => $this->ReadAttributeString('as_queryval3_2'),
                        'onClick' => 'INSTAR_SetupAlarmServer($id, $as_username_2, $as_password_2, $as_queryattr1_2, $as_queryval1_2, $as_queryattr2_2, $as_queryval2_2, $as_queryattr3_2, $as_queryval3_2);'],
                    [
                        'name'     => 'as_queryattr3_2_enabled',
                        'type'     => 'CheckBox',
                        'caption'  => 'Create Variable for Webfront',
                        'visible'  => false,
                        'value'    => $this->ReadAttributeBoolean('as_queryattr3_2_enabled'),
                        'onChange' => 'INSTAR_SetWebFrontVariable($id, "as_queryattr3_2_enabled", $as_queryattr3_2_enabled);'],]],
            [
                'type'    => 'Label',
                'caption' => 'Username and password for the INSTAR Webhook'],
            [
                'name'    => 'as_username_2',
                'type'    => 'ValidationTextBox',
                'caption' => 'Webhook username',
                'value'   => $this->ReadAttributeString('webhook_username')],
            [
                'name'    => 'as_password_2',
                'type'    => 'PasswordTextBox',
                'caption' => 'Webhook password',
                'value'   => $this->ReadAttributeString('webhook_password')],
            [
                'type'    => 'Button',
                'caption' => 'Setup Alarmserver Settings',
                'onClick' => 'INSTAR_SetupAlarmServer($id, $as_username_2, $as_password_2, $as_queryattr1_2, $as_queryval1_2, $as_queryattr2_2, $as_queryval2_2, $as_queryattr3_2, $as_queryval3_2);'],];
        return $form;
    }

    protected function FormShowPhoto_series()
    {
        $form = [
            [
                'type'    => 'Label',
                'caption' => 'Please use the INSTAR webUI'],];
        return $form;
    }

    protected function FormShowRecordings()
    {
        $form = [
            [
                'type'    => 'Label',
                'caption' => 'Please use the INSTAR webUI'],];
        return $form;
    }

    protected function FormShowInformation()
    {
        $form = [
            [
                'type'  => 'RowLayout',
                'items' => [
                    [
                        'type'    => 'Label',
                        'name'    => 'label_name',
                        'caption' => 'Name'],
                    [
                        'type'    => 'Label',
                        'name'    => 'name',
                        'caption' => $this->ReadAttributeString('name')],
                    [
                        'name'     => 'name_enabled',
                        'type'     => 'CheckBox',
                        'caption'  => 'Create Variable for Webfront',
                        'onChange' => 'INSTAR_SetWebFrontVariable($id, "name_enabled", $name_enabled);'],]],
            [
                'type'  => 'RowLayout',
                'items' => [
                    [
                        'type'    => 'Label',
                        'name'    => 'label_model',
                        'caption' => 'Camera Model Identifier'],
                    [
                        'type'    => 'Label',
                        'name'    => 'model',
                        'caption' => $this->ReadAttributeString('model')],
                    [
                        'name'     => 'model_enabled',
                        'type'     => 'CheckBox',
                        'caption'  => 'Create Variable for Webfront',
                        'onChange' => 'INSTAR_SetWebFrontVariable($id, "model_enabled", $model_enabled);'],]],
            [
                'type'  => 'RowLayout',
                'items' => [
                    [
                        'type'    => 'Label',
                        'name'    => 'label_hardVersion',
                        'caption' => 'Hardware Version'],
                    [
                        'type'    => 'Label',
                        'name'    => 'hardVersion',
                        'caption' => $this->ReadAttributeString('hardVersion')],
                    [
                        'name'     => 'hardVersion_enabled',
                        'type'     => 'CheckBox',
                        'caption'  => 'Create Variable for Webfront',
                        'onChange' => 'INSTAR_SetWebFrontVariable($id, "hardVersion_enabled", $hardVersion_enabled);'],]],
            [
                'type'  => 'RowLayout',
                'items' => [
                    [
                        'type'    => 'Label',
                        'name'    => 'label_softVersion',
                        'caption' => 'Firmware Version'],
                    [
                        'type'    => 'Label',
                        'name'    => 'softVersion',
                        'caption' => $this->ReadAttributeString('softVersion')],
                    [
                        'name'     => 'softVersion_enabled',
                        'type'     => 'CheckBox',
                        'caption'  => 'Create Variable for Webfront',
                        'onChange' => 'INSTAR_SetWebFrontVariable($id, "softVersion_enabled", $softVersion_enabled);'],]],
            [
                'type'  => 'RowLayout',
                'items' => [
                    [
                        'type'    => 'Label',
                        'name'    => 'label_webVersion',
                        'caption' => 'WebUI Version'],
                    [
                        'type'    => 'Label',
                        'name'    => 'webVersion',
                        'caption' => $this->ReadAttributeString('webVersion')],
                    [
                        'name'     => 'webVersion_enabled',
                        'type'     => 'CheckBox',
                        'caption'  => 'Create Variable for Webfront',
                        'onChange' => 'INSTAR_SetWebFrontVariable($id, "webVersion_enabled", $webVersion_enabled);'],]],
            [
                'type'  => 'RowLayout',
                'items' => [
                    [
                        'type'    => 'Label',
                        'name'    => 'label_infraredstat',
                        'caption' => 'Nightvision'],
                    [
                        'type'    => 'Label',
                        'name'    => 'infraredstat',
                        'caption' => $this->ReadAttributeString('infraredstat')],
                    [
                        'name'     => 'infraredstat_enabled',
                        'type'     => 'CheckBox',
                        'caption'  => 'Create Variable for Webfront',
                        'onChange' => 'INSTAR_SetWebFrontVariable($id, "infraredstat_enabled", $infraredstat_enabled);'],]],
            [
                'type'  => 'RowLayout',
                'items' => [
                    [
                        'type'    => 'Label',
                        'name'    => 'label_sdstatus',
                        'caption' => 'SD Card'],
                    [
                        'type'    => 'Label',
                        'name'    => 'sdstatus',
                        'caption' => $this->ReadAttributeString('sdstatus')],
                    [
                        'name'     => 'sdstatus_enabled',
                        'type'     => 'CheckBox',
                        'caption'  => 'Create Variable for Webfront',
                        'onChange' => 'INSTAR_SetWebFrontVariable($id, "sdstatus_enabled", $sdstatus_enabled);'],]],
            [
                'type'  => 'RowLayout',
                'items' => [
                    [
                        'type'    => 'Label',
                        'name'    => 'label_sdtotalspace',
                        'caption' => 'SD Capacity'],
                    [
                        'type'    => 'Label',
                        'name'    => 'sdtotalspace',
                        'caption' => $this->ReadAttributeInteger('sdtotalspace') . ' KB'],
                    [
                        'name'     => 'sdtotalspace_enabled',
                        'type'     => 'CheckBox',
                        'caption'  => 'Create Variable for Webfront',
                        'onChange' => 'INSTAR_SetWebFrontVariable($id, "sdtotalspace_enabled", $sdtotalspace_enabled);'],]],
            [
                'type'  => 'RowLayout',
                'items' => [
                    [
                        'type'    => 'Label',
                        'name'    => 'label_sdfreespace',
                        'caption' => 'SD Free Space'],
                    [
                        'type'    => 'Label',
                        'name'    => 'sdfreespace',
                        'caption' => $this->ReadAttributeInteger('sdfreespace') . ' KB'],
                    [
                        'name'     => 'sdfreespace_enabled',
                        'type'     => 'CheckBox',
                        'caption'  => 'Create Variable for Webfront',
                        'onChange' => 'INSTAR_SetWebFrontVariable($id, "sdfreespace_enabled", $sdfreespace_enabled);'],]],
            [
                'type'  => 'RowLayout',
                'items' => [
                    [
                        'type'    => 'Label',
                        'name'    => 'label_lanmac',
                        'caption' => 'LAN MAC:'],
                    [
                        'type'    => 'Label',
                        'name'    => 'lanmac',
                        'caption' => $this->ReadAttributeString('lanmac')],
                    [
                        'name'     => 'lanmac_enabled',
                        'type'     => 'CheckBox',
                        'caption'  => 'Create Variable for Webfront',
                        'onChange' => 'INSTAR_SetWebFrontVariable($id, "lanmac_enabled", $lanmac_enabled);'],]],
            [
                'type'  => 'RowLayout',
                'items' => [
                    [
                        'type'    => 'Label',
                        'name'    => 'label_wifimac',
                        'caption' => 'WLAN MAC:'],
                    [
                        'type'    => 'Label',
                        'name'    => 'wifimac',
                        'caption' => $this->ReadAttributeString('wifimac')],
                    [
                        'name'     => 'wifimac_enabled',
                        'type'     => 'CheckBox',
                        'caption'  => 'Create Variable for Webfront',
                        'onChange' => 'INSTAR_SetWebFrontVariable($id, "wifimac", $wifimac_enabled);'],]],
            [
                'type'  => 'RowLayout',
                'items' => [
                    [
                        'type'    => 'Label',
                        'name'    => 'label_startdate',
                        'caption' => 'Uptime:'],
                    [
                        'type'    => 'Label',
                        'name'    => 'startdate',
                        'caption' => $this->ReadAttributeString('startdate')],
                    [
                        'name'     => 'startdate_enabled',
                        'type'     => 'CheckBox',
                        'caption'  => 'Create Variable for Webfront',
                        'onChange' => 'INSTAR_SetWebFrontVariable($id, "startdate_enabled", $startdate_enabled);'],]],


        ];
        return $form;
    }

    protected function FormShowNetwork()
    {
        $form = [
            [
                'type'  => 'RowLayout',
                'items' => [
                    [
                        'type'    => 'Label',
                        'name'    => 'label_name_Network',
                        'caption' => 'Name'],
                    [
                        'type'    => 'Label',
                        'name'    => 'name_network',
                        'caption' => $this->ReadAttributeString('name')],
                    [
                        'name'     => 'name_network_enabled',
                        'type'     => 'CheckBox',
                        'caption'  => 'Create Variable for Webfront',
                        'visible'  => false,
                        'onChange' => 'INSTAR_SetWebFrontVariable($id, "name_network_enabled", $name_network_enabled);'],]],
            [
                'type'  => 'RowLayout',
                'items' => [
                    [
                        'type'    => 'Label',
                        'name'    => 'label_connection',
                        'caption' => 'WLAN MAC:'],
                    [
                        'type'    => 'Label',
                        'name'    => 'wifimac_network',
                        'caption' => $this->ReadAttributeString('wifimac')],
                    [
                        'name'     => 'wifimac_network_enabled',
                        'type'     => 'CheckBox',
                        'visible'  => false,
                        'caption'  => 'Create Variable for Webfront',
                        'onChange' => 'INSTAR_SetWebFrontVariable($id, "wifimac_network", $wifimac_network__enabled);'],]],];
        /* Modell:
        Verbindungsart:
        WAN IP:
        Internet: Verbindung erfolgreich!
        INSTAR-DDNS:
        DDNS-Status: Verbindung erfolgreich!
        P2P-UID:
        P2P Status: P2P akiviert
        uPNP state: uPNP deaktiviert
         *
         */
        return $form;
    }

    protected function FormShowUsers()
    {
        $form = [
            [
                'type'    => 'Label',
                'caption' => 'Admin'],
            [
                'type'    => 'ValidationTextBox',
                'visible' => true,
                'name'    => 'at_username0',
                'caption' => 'User',
                'value'   => $this->ReadAttributeString('at_username0')],
            [
                'type'    => 'PasswordTextBox',
                'visible' => true,
                'name'    => 'at_password0',
                'caption' => 'Password',
                'value'   => $this->ReadAttributeString('at_password0')],
            [
                'type'  => 'RowLayout',
                'items' => [
                    [
                        'type'    => 'Label',
                        'caption' => 'User'],
                    [
                        'name'     => 'at_enable1',
                        'type'     => 'CheckBox',
                        'visible'  => true,
                        'caption'  => 'Activate user',
                        'value'    => boolval($this->ReadAttributeInteger('at_enable1')),
                        'onChange' => 'INSTAR_EnableUser($id, $at_enable1);'],]],

            [
                'type'    => 'ValidationTextBox',
                'visible' => true,
                'name'    => 'at_username1',
                'caption' => 'User',
                'value'   => $this->ReadAttributeString('at_username1')],
            [
                'type'    => 'PasswordTextBox',
                'visible' => true,
                'name'    => 'at_password1',
                'caption' => 'Password',
                'value'   => $this->ReadAttributeString('at_password1')],
            [
                'type'  => 'RowLayout',
                'items' => [
                    [
                        'type'    => 'Label',
                        'caption' => 'Guest'],
                    [
                        'name'     => 'at_enable2',
                        'type'     => 'CheckBox',
                        'visible'  => true,
                        'caption'  => 'Activate guest',
                        'value'    => boolval($this->ReadAttributeInteger('at_enable2')),
                        'onChange' => 'INSTAR_EnableGuest($id, $at_enable2);'],]],
            [
                'type'    => 'ValidationTextBox',
                'visible' => true,
                'name'    => 'at_username2',
                'caption' => 'User',
                'value'   => $this->ReadAttributeString('at_username2')],
            [
                'type'    => 'PasswordTextBox',
                'visible' => true,
                'name'    => 'at_password2',
                'caption' => 'Password',
                'value'   => $this->ReadAttributeString('at_password2')],
            [
                'type'    => 'Button',
                'caption' => 'Set user',
                'onClick' => 'INSTAR_SetNetworkConfiguration($id, $at_username0, $at_password0, $at_enable1, $at_username1, $at_password1, $at_enable2, $at_username2, $at_password2);']];
        return $form;
    }

    protected function FormShowDate_Time()
    {
        $time_info = $this->GetCameraTimeConfiguration();
        if (empty($time_info)) {
            $current_date = '01.01.2019';
            $current_time = '00:00:00';
        } else {
            $time         = strval($time_info['time']);
            $year         = substr($time, 0, 4);
            $month        = substr($time, 4, 2);
            $day          = substr($time, 6, 2);
            $hour         = substr($time, 8, 2);
            $minute       = substr($time, 10, 2);
            $second       = substr($time, 12, 2);
            $current_date = $day . '.' . $month . '.' . $year;
            $current_time = $hour . ':' . $minute . ':' . $second;
        }
        $form = [
            [
                'type'  => 'RowLayout',
                'items' => [
                    [
                        'type'    => 'Label',
                        'name'    => 'current_date_label',
                        'caption' => 'current date:'],
                    [
                        'type'    => 'Label',
                        'name'    => 'current_date',
                        'caption' => $current_date]]],
            [
                'type'  => 'RowLayout',
                'items' => [
                    [
                        'type'    => 'Label',
                        'name'    => 'current_time_label',
                        'caption' => 'current time:'],
                    [
                        'type'    => 'Label',
                        'name'    => 'current_time',
                        'caption' => $current_time]]],
            [
                'type'  => 'RowLayout',
                'items' => [
                    [
                        'type'    => 'Label',
                        'name'    => 'timeZone_time_label',
                        'caption' => 'time zone:'],
                    [
                        'type'    => 'Label',
                        'name'    => 'timeZone_time',
                        'caption' => $this->ReadAttributeString('timeZone_time')]]],
            [
                'name'     => 'dstmode_time',
                'type'     => 'CheckBox',
                'visible'  => false,
                'caption'  => 'DST mode',
                'onChange' => 'INSTAR_SetWebFrontVariable($id, "dstmode_time", $dstmode_time);'],
            [
                'type'    => 'Button',
                'caption' => 'Refresh',
                'onClick' => 'INSTAR_GetCameraTimeConfiguration($id);']];
        return $form;
    }

    protected function FormShowLanguage_Selection()
    {
        $form = [
            [
                'type'    => 'Label',
                'caption' => 'Please select an language'],
            [
                'type'     => 'Select',
                'name'     => 'guest_value11',
                'caption'  => 'Language',
                'options'  => [
                    [
                        'caption' => 'German',
                        'value'   => 'de'],
                    [
                        'caption' => 'English',
                        'value'   => 'en'],
                    [
                        'caption' => 'French',
                        'value'   => 'fr'],
                    [
                        'caption' => 'Japanese',
                        'value'   => 'jp'],
                    [
                        'caption' => 'Polish',
                        'value'   => 'pl'],],
                'visible'  => true,
                'value'    => $this->ReadAttributeString('guest_value11'),
                'onChange' => 'INSTAR_SetCameraUI_LanguageConfiguration($id, $guest_value11);',]];
        return $form;
    }

    public function DeleteSystemLog()
    {
        $this->SendDebug('System Log', 'Deleting system log', 0);
        $MediaID = @$this->GetIDForIdent('system_log');
        $Content = '';
        IPS_SetMediaContent($MediaID, base64_encode($Content));  // Base64 codieren und ablegen
    }

    /**
     * @param bool $system_log
     */
    public function EnableSystemLog(bool $system_log)
    {
        $this->WriteAttributeBoolean('system_log', $system_log);
        if ($system_log) {
            $this->SendDebug('System Log', 'Creating system log', 0);
            $MediaID = @$this->GetIDForIdent('system_log');
            if ($MediaID === false) {
                $DocumentFile = IPS_GetKernelDir() . 'media' . DIRECTORY_SEPARATOR . 'INSTAR_System_Log.doc';  // File
                $Content      = $this->GetCameraSystemLog();
                file_put_contents($DocumentFile, $Content);
                $MediaID = IPS_CreateMedia(5);              // Create Document
                IPS_SetMediaFile($MediaID, $DocumentFile, true);
                IPS_SetMediaCached($MediaID, true);
                IPS_SetParent($MediaID, $this->InstanceID); // Medienobjekt einsortieren unter der Instanz
                IPS_SetIdent($MediaID, 'system_log');
                IPS_SetPosition($MediaID, 100);
                IPS_SetName($MediaID, $this->Translate('Camera System Log')); // Medienobjekt benennen
                IPS_SetIcon($MediaID, 'Database');
                IPS_SendMediaEvent($MediaID); //aktualisieren
            }
        } else {
            $this->SendDebug('System Log', 'Deleting system log', 0);
            $MediaID = @$this->GetIDForIdent('system_log');
            IPS_DeleteMedia($MediaID, true);
        }
    }

    protected function FormShowSystem_Logbook()
    {
        $form = [
            [
                'type'    => 'Label',
                'caption' => 'The system log is read out daily'],
            [
                'name'     => 'system_log',
                'type'     => 'CheckBox',
                'visible'  => true,
                'caption'  => 'Create backup from system log to IP-Symcon',
                'value'    => $this->ReadAttributeBoolean('system_log'),
                'onChange' => 'INSTAR_EnableSystemLog($id, $system_log);'],
            [
                'type'    => 'Button',
                'caption' => 'Delete system log data in IP-Symcon',
                'onClick' => 'INSTAR_DeleteSystemLog($id);']];
        return $form;
    }

    protected function FormShowFirmware_Update()
    {
        $form = [
            [
                'type'    => 'Label',
                'caption' => 'Please use the INSTAR webUI']];
        return $form;
    }

    protected function FormShowReboot()
    {
        $form = [
            [
                'type'    => 'Button',
                'caption' => 'Reboot',
                'onClick' => 'INSTAR_RebootCamera($id);']];
        return $form;
    }

    protected function FormShowReset()
    {
        $form = [
            [
                'type'    => 'Button',
                'caption' => 'Reset',
                'onClick' => 'INSTAR_ResetCamera($id);']];
        return $form;
    }

    /**
     * return form actions by token.
     *
     * @return array
     */
    protected function FormActions()
    {
        $alarmserver = $this->ReadAttributeInteger('alarmserver');
        if($alarmserver)
        {
            $instar_alarm_menu_expanded = true;
            $instar_alarmserver_menu_expanded = true;
        }
        else
        {
            $instar_alarm_menu_expanded = false;
            $instar_alarmserver_menu_expanded = false;
        }
        $form = [
            [
                'type'    => 'Label',
                'caption' => 'INSTAR Camera Menu'],
            [
                'type'     => 'ExpansionPanel',
                'caption'  => 'Network Menu',
                'name'     => 'instar_network_menu',
                'visible'  => true,
                'expanded' => false,
                'items'    => [
                    [
                        'type'     => 'ExpansionPanel',
                        'caption'  => 'IP configuration',
                        'name'     => 'instar_ip_configuration_menu',
                        'visible'  => true,
                        'expanded' => false,
                        'items'    => $this->FormNetworkInfo()],
                    [
                        'type'     => 'ExpansionPanel',
                        'caption'  => 'SSL-Certificate',
                        'name'     => 'instar_ssl_certificate_menu',
                        'visible'  => true,
                        'expanded' => false,
                        'items'    => $this->FormSSLInfo()],
                    [
                        'type'     => 'ExpansionPanel',
                        'caption'  => 'WLAN',
                        'name'     => 'instar_wlan_menu',
                        'visible'  => true,
                        'expanded' => false,
                        'items'    => $this->FormWIFIInfo()],
                    [
                        'type'     => 'ExpansionPanel',
                        'caption'  => 'Remote access',
                        'name'     => 'instar_remote_access_menu',
                        'visible'  => true,
                        'expanded' => false,
                        'items'    => $this->FormRemoteInfo()],
                    [
                        'type'     => 'ExpansionPanel',
                        'caption'  => 'Upnp',
                        'name'     => 'instar_upnp_menu',
                        'visible'  => true,
                        'expanded' => false,
                        'items'    => $this->FormUPNPInfo()],
                    [
                        'type'     => 'ExpansionPanel',
                        'caption'  => 'Onvif',
                        'name'     => 'instar_onvif_menu',
                        'visible'  => true,
                        'expanded' => false,
                        'items'    => $this->FormONVIFInfo()]]],
            [
                'type'     => 'ExpansionPanel',
                'caption'  => 'Multimedia Menu',
                'name'     => 'instar_multimedia_menu',
                'visible'  => true,
                'expanded' => false,
                'items'    => [
                    [
                        'type'     => 'ExpansionPanel',
                        'caption'  => 'Audio',
                        'name'     => 'instar_audio_menu',
                        'visible'  => true,
                        'expanded' => false,
                        'items'    => $this->FormAudioSettings()],
                    [
                        'type'     => 'ExpansionPanel',
                        'caption'  => 'Video',
                        'name'     => 'instar_video_menu',
                        'visible'  => true,
                        'expanded' => false,
                        'items'    => $this->FormVideoSettings()],
                    [
                        'type'     => 'ExpansionPanel',
                        'caption'  => 'Image settings',
                        'name'     => 'instar_image_settings_menu',
                        'visible'  => true,
                        'expanded' => false,
                        'items'    => $this->FormImageSettings()],
                    [
                        'type'     => 'ExpansionPanel',
                        'caption'  => 'Video overlays',
                        'name'     => 'instar_video_overlays_menu',
                        'visible'  => true,
                        'expanded' => false,
                        'items'    => $this->FormImageOverlaySettings()],
                    [
                        'type'     => 'ExpansionPanel',
                        'caption'  => 'Privacy settings',
                        'name'     => 'instar_privacy_settings_menu',
                        'visible'  => true,
                        'expanded' => false,
                        'items'    => $this->FormPrivacySettings()]]],
            [
                'type'     => 'ExpansionPanel',
                'caption'  => 'Features Menu',
                'name'     => 'instar_features_menu',
                'visible'  => true,
                'expanded' => false,
                'items'    => [
                    [
                        'type'     => 'ExpansionPanel',
                        'caption'  => 'Email settings',
                        'name'     => 'instar_email_settings_menu',
                        'visible'  => true,
                        'expanded' => false,
                        'items'    => $this->FormShowINSTAREmail()],
                    [
                        'type'     => 'ExpansionPanel',
                        'caption'  => 'FTP',
                        'name'     => 'instar_ftp_menu',
                        'visible'  => true,
                        'expanded' => false,
                        'items'    => $this->FormShowFTP()],
                    [
                        'type'     => 'ExpansionPanel',
                        'caption'  => 'IR night vision',
                        'name'     => 'instar_ir_night_vision_menu',
                        'visible'  => true,
                        'expanded' => false,
                        'items'    => $this->FormShowIR_night_vision()],
                    [
                        'type'     => 'ExpansionPanel',
                        'caption'  => 'Pan & tilt',
                        'name'     => 'instar_pan_tilt_menu',
                        'visible'  => true,
                        'expanded' => false,
                        'items'    => $this->FormShowPan_Tilt()],
                    [
                        'type'     => 'ExpansionPanel',
                        'caption'  => 'PTZ tour',
                        'name'     => 'instar_ptz_tour_menu',
                        'visible'  => true,
                        'expanded' => false,
                        'items'    => $this->FormShowPTZ_tour()],
                    [
                        'type'     => 'ExpansionPanel',
                        'caption'  => 'Manual recording',
                        'name'     => 'instar_manual_record_menu',
                        'visible'  => true,
                        'expanded' => false,
                        'items'    => $this->FormShowManual_record()],
                    [
                        'type'     => 'ExpansionPanel',
                        'caption'  => 'SD card',
                        'name'     => 'instar_sd_card_menu',
                        'visible'  => true,
                        'expanded' => false,
                        'items'    => $this->FormShowSD_card()],
                    [
                        'type'     => 'ExpansionPanel',
                        'caption'  => 'Status LED',
                        'name'     => 'instar_status_led_menu',
                        'visible'  => false,
                        'expanded' => false,
                        'items'    => $this->FormShowStatus_LED()],
                    [
                        'type'     => 'ExpansionPanel',
                        'caption'  => 'Wizard',
                        'name'     => 'instar_wizard_menu',
                        'visible'  => false,
                        'expanded' => false,
                        'items'    => $this->FormShowWizard()]]],
            [
                'type'     => 'ExpansionPanel',
                'name'     => 'instar_alarm_menu',
                'visible'  => true,
                'expanded' => $instar_alarm_menu_expanded,
                'caption'  => 'Alarm Menu',
                'items'    => [
                    [
                        'type'     => 'ExpansionPanel',
                        'caption'  => 'Actions',
                        'name'     => 'instar_actions_menu',
                        'visible'  => true,
                        'expanded' => false,
                        'items'    => $this->FormShowActions()],
                    [
                        'type'     => 'ExpansionPanel',
                        'caption'  => 'Areas',
                        'name'     => 'instar_areas_menu',
                        'visible'  => true,
                        'expanded' => false,
                        'items'    => $this->FormShowAreas()],
                    [
                        'type'     => 'ExpansionPanel',
                        'caption'  => 'Schedule',
                        'name'     => 'instar_schedule_menu',
                        'visible'  => true,
                        'expanded' => false,
                        'items'    => $this->FormShowSchedule()],
                    [
                        'type'     => 'ExpansionPanel',
                        'caption'  => 'Push',
                        'name'     => 'instar_push_menu',
                        'visible'  => true,
                        'expanded' => false,
                        'items'    => $this->FormShowPush()],
                    [
                        'type'     => 'ExpansionPanel',
                        'caption'  => 'Alarmserver',
                        'name'     => 'instar_alarmserver_menu',
                        'visible'  => true,
                        'expanded' => $instar_alarmserver_menu_expanded,
                        'items'    => $this->FormShowAlarmserver()]]],
            [
                'type'     => 'ExpansionPanel',
                'caption'  => 'Tasks Menu',
                'name'     => 'instar_tasks_menu',
                'visible'  => true,
                'expanded' => false,
                'items'    => [
                    [
                        'type'     => 'ExpansionPanel',
                        'caption'  => 'Photo series',
                        'name'     => 'instar_photo_series_menu',
                        'visible'  => true,
                        'expanded' => false,
                        'items'    => $this->FormShowPhoto_series()],
                    [
                        'type'     => 'ExpansionPanel',
                        'caption'  => 'Recordings',
                        'name'     => 'instar_recordings_menu',
                        'visible'  => true,
                        'expanded' => false,
                        'items'    => $this->FormShowRecordings()]]],
            [
                'type'     => 'ExpansionPanel',
                'caption'  => 'System Menu',
                'name'     => 'instar_system_menu',
                'visible'  => true,
                'expanded' => false,
                'items'    => [
                    [
                        'type'     => 'ExpansionPanel',
                        'caption'  => 'Overview',
                        'name'     => 'instar_overview_menu',
                        'visible'  => true,
                        'expanded' => false,
                        'items'    => [
                            [
                                'type'     => 'ExpansionPanel',
                                'caption'  => 'Information',
                                'name'     => 'instar_information_menu',
                                'visible'  => true,
                                'expanded' => false,
                                'items'    => $this->FormShowInformation()],
                            [
                                'type'     => 'ExpansionPanel',
                                'caption'  => 'Network',
                                'name'     => 'instar_network_menu',
                                'visible'  => true,
                                'expanded' => false,
                                'items'    => $this->FormShowNetwork()]],],
                    [
                        'type'     => 'ExpansionPanel',
                        'caption'  => 'Users',
                        'name'     => 'instar_users_menu',
                        'visible'  => true,
                        'expanded' => false,
                        'items'    => $this->FormShowUsers()],
                    [
                        'type'     => 'ExpansionPanel',
                        'caption'  => 'Date & Time',
                        'name'     => 'instar_date_time_menu',
                        'visible'  => true,
                        'expanded' => false,
                        'items'    => $this->FormShowDate_Time()],
                    [
                        'type'     => 'ExpansionPanel',
                        'caption'  => 'Language Selection',
                        'name'     => 'instar_language_selection_menu',
                        'visible'  => true,
                        'expanded' => false,
                        'items'    => $this->FormShowLanguage_Selection()],
                    [
                        'type'     => 'ExpansionPanel',
                        'caption'  => 'System Logbook',
                        'name'     => 'instar_system_logbook_menu',
                        'visible'  => true,
                        'expanded' => false,
                        'items'    => $this->FormShowSystem_Logbook()],
                    [
                        'type'     => 'ExpansionPanel',
                        'caption'  => 'Firmware Update',
                        'name'     => 'instar_firmware_update_menu',
                        'visible'  => true,
                        'expanded' => false,
                        'items'    => $this->FormShowFirmware_Update()],
                    [
                        'type'     => 'ExpansionPanel',
                        'caption'  => 'Reboot',
                        'name'     => 'instar_reboot_menu',
                        'visible'  => true,
                        'expanded' => false,
                        'items'    => $this->FormShowReboot()],
                    [
                        'type'     => 'ExpansionPanel',
                        'caption'  => 'Reset',
                        'name'     => 'instar_reset_menu',
                        'visible'  => true,
                        'expanded' => false,
                        'items'    => $this->FormShowReset()]]],
            [
                'type'    => 'Label',
                'caption' => 'Get snapshot from camera'],
            [
                'type'    => 'Button',
                'caption' => 'Get snapshot',
                'onClick' => 'INSTAR_GetSnapshot($id);'],
            [
                'type'    => 'Label',
                'caption' => 'Move left'],
            [
                'type'    => 'Button',
                'caption' => 'Left',
                'onClick' => 'INSTAR_Left($id);'],
            [
                'type'    => 'Label',
                'caption' => 'Move left'],
            [
                'type'    => 'Button',
                'caption' => 'Right',
                'onClick' => 'INSTAR_Right($id);'],
            [
                'type'    => 'Label',
                'caption' => 'Move left'],
            [
                'type'    => 'Button',
                'caption' => 'Up',
                'onClick' => 'INSTAR_Up($id);'],
            [
                'type'    => 'Label',
                'caption' => 'Move down'],
            [
                'type'    => 'Button',
                'caption' => 'Left',
                'onClick' => 'INSTAR_Down($id);'],
            /*
            [
                'type'    => 'Button',
                'caption' => 'Show Variables for Test',
                'visible' => false,
                'onClick' => 'INSTAR_UpdateParameter($id, "instar_testcenter_menu", "visible", true);'],
            [
                'type'    => 'Button',
                'caption' => 'Hide Variables for Test',
                'visible' => false,
                'onClick' => 'INSTAR_UpdateParameter($id, "instar_testcenter_menu", "visible", false);'],
            [
                    'type'    => 'TestCenter',
                    'name'    => 'instar_testcenter_menu',
                    'visible' => false],
            */
            [
                'type'    => 'PopupAlert',
                'name'    => 'popup',
                'visible' => false,
                'popup'   => [
                    'closeCaption' => 'Ok',
                    'items'        => [
                        [
                            'type'    => 'ValidationTextBox',
                            'visible' => false,
                            'name'    => 'popup_message',
                            'caption' => 'Response from INSTAR'],]]],
            [
                'type'    => 'PopupAlert',
                'name'    => 'popup_start',
                'visible' => false,
                'popup'   => [
                    'closeCaption' => 'Ok',
                    'items'        => [
                        [
                            'type'    => 'Label',
                            'visible' => true,
                            'name'    => 'popup_message_start_title',
                            'caption' => 'To use your INSTAR camera:'],
                        [
                            'type'    => 'Label',
                            'visible' => true,
                            'name'    => 'popup_message_start_line1',
                            'caption' => '- add an admin user and password for your INSTAR camera'],
                        [
                            'type'    => 'Label',
                            'visible' => true,
                            'name'    => 'popup_message_start_line2',
                            'caption' => '- to get events from the INSTAR camers set up the alarm server settings'],
                        [
                            'type'    => 'Label',
                            'visible' => true,
                            'name'    => 'popup_message_start_line3',
                            'caption' => '- create a category for pictures and link to this category. Pictures will be saved in the selected category.'],
                        [
                            'type'    => 'Label',
                            'visible' => true,
                            'name'    => 'popup_message_start_line4',
                            'caption' => '- optional set up email notification'],]]]];
        return $form;
    }

    /**
     * return from status.
     *
     * @return array
     */
    protected function FormStatus()
    {
        $form = [
            [
                'code'    => 101,
                'icon'    => 'inactive',
                'caption' => 'Creating instance.'],
            [
                'code'    => 102,
                'icon'    => 'active',
                'caption' => 'Camera is accessible.'],
            [
                'code'    => 104,
                'icon'    => 'inactive',
                'caption' => 'Interface closed.'],
            [
                'code'    => 201,
                'icon'    => 'inactive',
                'caption' => 'Please follow the instructions.'],
            [
                'code'    => 202,
                'icon'    => 'error',
                'caption' => 'INSTAR IP adress must not empty.'],
            [
                'code'    => 203,
                'icon'    => 'error',
                'caption' => 'No valid IP address or host'],
            [
                'code'    => 204,
                'icon'    => 'error',
                'caption' => 'connection to INSTAR lost.'],
            [
                'code'    => 205,
                'icon'    => 'error',
                'caption' => 'Field can not be left empty'],
            [
                'code'    => 206,
                'icon'    => 'error',
                'caption' => 'The category for saving the images has not been set'],
            [
                'code'    => 207,
                'icon'    => 'error',
                'caption' => 'email not valid.'],
            [
                'code'    => 208,
                'icon'    => 'error',
                'caption' => 'category INSTAR snapshot not set'],
            [
                'code'    => 209,
                'icon'    => 'error',
                'caption' => 'Please select a camera model'],
            [
                'code'    => 210,
                'icon'    => 'error',
                'caption' => 'Webhook username and password can not be left empty']];

        return $form;
    }

    /**
     * send debug log.
     *
     * @param string $notification
     * @param string $message
     * @param int    $format 0 = Text, 1 = Hex
     */
    private function _debug(string $notification = null, string $message = null, $format = 0)
    {
        $this->SendDebug($notification, $message, $format);
    }

    /**
     * return incremented position.
     *
     * @return int
     */
    private function _getPosition()
    {
        $this->position++;
        return $this->position;
    }

    /***********************************************************
     * Migrations
     ***********************************************************/

    /**
     * Polyfill for IP-Symcon 4.4 and older.
     *
     * @param string $Ident
     * @param mixed  $Value
     */
    //Add this Polyfill for IP-Symcon 4.4 and older
    protected function SetValue($Ident, $Value)
    {
        $this->SendDebug('Write Value', $Ident . ' : ' . (print_r($Value, true)), 0);
        if (IPS_GetKernelVersion() >= 5) {
            parent::SetValue($Ident, $Value);
        } else {
            SetValue($this->GetIDForIdent($Ident), $Value);
        }
    }
}
